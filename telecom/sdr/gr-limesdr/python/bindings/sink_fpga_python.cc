/*
 * Copyright 2023 Lime Microsystems info@limemicro.com
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(sink_fpga.h)                                                    */
/* BINDTOOL_HEADER_FILE_HASH(4893497e7f6760a35aca884bb4256da3)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <limesdr_fpga/sink_fpga.h>
// pydoc.h is automatically generated in the build directory
#include <sink_fpga_pydoc.h>

void bind_sink_fpga(py::module& m)
{

    using sink_fpga    = ::gr::limesdr_fpga::sink_fpga;


    py::class_<sink_fpga, gr::block, gr::basic_block,
        std::shared_ptr<sink_fpga>>(m, "sink_fpga", D(sink_fpga))

        .def(py::init(&sink_fpga::make),
           py::arg("serial"),
           py::arg("channel_mode"),
           py::arg("filename"),
           py::arg("length_tag_name"),
           D(sink_fpga,make)
        )
        




        
        .def("set_center_freq",&sink_fpga::set_center_freq,       
            py::arg("freq"),
            py::arg("chan") = 0,
            D(sink_fpga,set_center_freq)
        )


        
        .def("set_antenna",&sink_fpga::set_antenna,       
            py::arg("antenna"),
            py::arg("channel") = 0,
            D(sink_fpga,set_antenna)
        )


        
        .def("set_nco",&sink_fpga::set_nco,       
            py::arg("nco_freq"),
            py::arg("channel"),
            D(sink_fpga,set_nco)
        )


        
        .def("set_bandwidth",&sink_fpga::set_bandwidth,       
            py::arg("analog_bandw"),
            py::arg("channel") = 0,
            D(sink_fpga,set_bandwidth)
        )


        
        .def("set_digital_filter",&sink_fpga::set_digital_filter,       
            py::arg("digital_bandw"),
            py::arg("channel"),
            D(sink_fpga,set_digital_filter)
        )


        
        .def("set_gain",&sink_fpga::set_gain,       
            py::arg("gain_dB"),
            py::arg("channel") = 0,
            D(sink_fpga,set_gain)
        )


        
        .def("set_sample_rate",&sink_fpga::set_sample_rate,       
            py::arg("rate"),
            D(sink_fpga,set_sample_rate)
        )


        
        .def("set_oversampling",&sink_fpga::set_oversampling,       
            py::arg("oversample"),
            D(sink_fpga,set_oversampling)
        )


        
        .def("calibrate",&sink_fpga::calibrate,       
            py::arg("bandw"),
            py::arg("channel") = 0,
            D(sink_fpga,calibrate)
        )


        
        .def("set_buffer_size",&sink_fpga::set_buffer_size,       
            py::arg("size"),
            D(sink_fpga,set_buffer_size)
        )


        
        .def("set_tcxo_dac",&sink_fpga::set_tcxo_dac,       
            py::arg("dacVal") = 125,
            D(sink_fpga,set_tcxo_dac)
        )


        
        .def("write_lms_reg",&sink_fpga::write_lms_reg,       
            py::arg("address"),
            py::arg("val"),
            D(sink_fpga,write_lms_reg)
        )


        
        .def("set_gpio_dir",&sink_fpga::set_gpio_dir,       
            py::arg("dir"),
            D(sink_fpga,set_gpio_dir)
        )


        
        .def("write_gpio",&sink_fpga::write_gpio,       
            py::arg("out"),
            D(sink_fpga,write_gpio)
        )


        
        .def("read_gpio",&sink_fpga::read_gpio,       
            D(sink_fpga,read_gpio)
        )

        ;




}








