from collections import defaultdict
from pathlib import Path

import click
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


def simulation_output_callback(
    _ctx: click.Context, param: click.Parameter, value: Path
) -> Path | None:
    if not value.exists():
        if value == param.default:
            return None
        raise click.BadParameter(f"File {value!r} does not exist.")
    return value


@click.command()
@click.argument(
    "file",
    type=click.Path(exists=True, dir_okay=False, path_type=Path),
)
@click.option(
    "--quiet",
    is_flag=True,
    help="Suppress output. I.e., does not print the dataframe.",
)
@click.option(
    "--snr_tol",
    default=1,
    help="Suppress outlier where ",
)
@click.option(
    "--plot/--no-plot",
    is_flag=True,
    default=True,
    show_default=True,
    help="Show plots.",
)
@click.option(
    "--simulation-output",
    type=click.Path(dir_okay=False, path_type=Path),
    default=Path(__file__).parents[2] / "sim_outputs.csv",
    callback=simulation_output_callback,
    show_default=True,
)
def main(
    file: Path,
    snr_tol: float,
    quiet: bool,
    plot: bool,
    simulation_output: Path | None,
) -> None:
    """
    Read a measurements file generated by 'eval_limesdr_fpga.py'
    and plots the PER/SNR curve, plus CFO values.
    """
    payload_len = 100
    expected_payload = np.arange(payload_len, dtype=np.uint8)
    num_bits = payload_len * 8

    data = defaultdict(list)
    with open(file) as f:
        for line in f.read().splitlines():
            if line.startswith("CFO"):
                cfo, sto = line.split(",")
                data["cfo"].append(float(cfo.split("=")[1]))
                data["sto"].append(int(sto.split("=")[1]))
            elif line.startswith("SNR"):
                snr, Grx = line.split(",")
                data["snr"].append(float(snr.split("=")[1]))
                data["Grx"].append(int(Grx.split("=")[1]))
            elif line.startswith("packet"):
                *_, payload = line.split(",", maxsplit=2)
                payload = list(map(int, payload.split("=")[1][1:-1].split(",")))
                biterror = np.unpackbits(
                    expected_payload ^ np.array(payload, dtype=np.uint8)
                ).sum()
                invalid = 1 if biterror > 0 else 0
                data["biterror"].append(biterror)
                data["invalid"].append(invalid)

    if not quiet or plot:
        df = pd.DataFrame.from_dict(data)
        if not quiet:
            click.echo(df)

        if plot:

            def remove_outliers(group):
                median_snr = group["snr"].median()
                return group[
                    (group["snr"] >= median_snr - snr_tol)
                    & (group["snr"] <= median_snr + snr_tol)
                ]

            _fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10, 4))
            df.boxplot(ax=ax[0], column="snr", by="Grx", grid=True)
            df = df.groupby("Grx", group_keys=False).apply(remove_outliers)
            df.boxplot(ax=ax[1], column="snr", by="Grx", grid=True)
            ax[0].set_ylabel("Measured SNR (dB)")
            ax[0].set_xlabel("RX Gain used (dB)")
            ax[0].grid(True)
            ax[0].set_title("Measured SNR distribution")
            ax[1].set_ylabel("Measured SNR (dB)")
            ax[1].set_xlabel("RX Gain used (dB)")
            ax[1].grid(True)
            ax[1].set_title("Measured SNR distribution after outlier removal")

            df.hist(column="cfo")
            plt.title("Histogram of estimated CFO")
            plt.suptitle("")
            plt.xlabel("Number")
            plt.ylabel("Frequency (Hz)")

            agg = (
                df.groupby("Grx")
                .agg(
                    snr_mean=("snr", "mean"),
                    per_mean=("invalid", "mean"),
                    biterror=("biterror", "sum"),
                    count=("biterror", "count"),
                )
                .reset_index()
            )

            ber = agg["biterror"] / (agg["count"] * num_bits)

            if simulation_output is not None:
                data = np.loadtxt(simulation_output)
                EsN0_db = data[:, 0]
                sim_BER = data[:, 1]
                sim_PER = data[:, 2]

                SNR_th = 10 ** (EsN0_db / 10)
                BER_th_noncoh = 0.5 * np.exp(-(10 ** (EsN0_db / 10.0)) / 2)

            _fig, ax = plt.subplots(1, 2, constrained_layout=True, figsize=(10, 4))
            ax[0].plot(agg["snr_mean"], ber, "-s", label="Measurement")
            ax[0].plot(EsN0_db, BER_th_noncoh, label="AWGN Th. FSK non-coh.")
            ax[0].plot(EsN0_db, sim_BER, label="Simulation")
            ax[0].set_ylabel("BER")
            ax[0].set_xlabel("$E_{s}/N_{0}$ [dB]")
            ax[0].set_yscale("log")
            ax[0].set_ylim((1e-4, 1))
            ax[0].grid(True)
            ax[0].set_title("Average Bit Error Rate")
            ax[0].legend()

            ax[1].plot(agg["snr_mean"], agg["per_mean"], "-s", label="Measurement")
            ax[1].plot(
                EsN0_db,
                1 - (1 - BER_th_noncoh) ** num_bits,
                label="AWGN Th. FSK non-coh.",
            )
            ax[1].plot(EsN0_db, sim_PER, label="Simulation")
            ax[1].set_ylabel("PER")
            ax[1].set_xlabel("$E_{s}/N_{0}$ [dB]")
            ax[1].set_yscale("log")
            ax[1].set_ylim((1e-4, 1))
            ax[1].grid(True)
            ax[1].set_title("Average Packet Error Rate")
            ax[1].legend()

            plt.show()


if __name__ == "__main__":
    main()
