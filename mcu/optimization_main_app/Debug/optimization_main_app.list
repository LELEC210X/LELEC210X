
optimization_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b330  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001239c  0800b4e0  0800b4e0  0000c4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d87c  0801d87c  00021ffc  2**0
                  CONTENTS
  4 .ARM          00000008  0801d87c  0801d87c  0001e87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d884  0801d884  00021ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d884  0801d884  0001e884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d888  0801d888  0001e888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002ffc  20000000  0801d88c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c98  20002ffc  08020888  00021ffc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c94  08020888  00022c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021ffc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ff62  00000000  00000000  0002202c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063d2  00000000  00000000  00051f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00058360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000129f  00000000  00000000  00059d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030483  00000000  00000000  0005afe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000275ee  00000000  00000000  0008b46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121a1a  00000000  00000000  000b2a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000bc  00000000  00000000  001d4472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007078  00000000  00000000  001d4530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001db5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000940e  00000000  00000000  001db60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00001210  00000000  00000000  001e4a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20002ffc 	.word	0x20002ffc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b4c8 	.word	0x0800b4c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20003000 	.word	0x20003000
 80001ec:	0800b4c8 	.word	0x0800b4c8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005a2:	4b31      	ldr	r3, [pc, #196]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005a4:	4a31      	ldr	r2, [pc, #196]	@ (800066c <MX_ADC1_Init+0xec>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005aa:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 80005ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005c8:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ce:	4b26      	ldr	r3, [pc, #152]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005d4:	4b24      	ldr	r3, [pc, #144]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005da:	4b23      	ldr	r3, [pc, #140]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005e4:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80005e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000600:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <MX_ADC1_Init+0xe8>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000608:	4817      	ldr	r0, [pc, #92]	@ (8000668 <MX_ADC1_Init+0xe8>)
 800060a:	f003 fb6f 	bl	8003cec <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000614:	f001 fa38 	bl	8001a88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	4811      	ldr	r0, [pc, #68]	@ (8000668 <MX_ADC1_Init+0xe8>)
 8000624:	f004 fcd2 	bl	8004fcc <HAL_ADCEx_MultiModeConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800062e:	f001 fa2b 	bl	8001a88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_ADC1_Init+0xf0>)
 8000634:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000636:	2306      	movs	r3, #6
 8000638:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800063e:	237f      	movs	r3, #127	@ 0x7f
 8000640:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000642:	2304      	movs	r3, #4
 8000644:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	@ (8000668 <MX_ADC1_Init+0xe8>)
 8000650:	f003 fdc8 	bl	80041e4 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800065a:	f001 fa15 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3728      	adds	r7, #40	@ 0x28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20003018 	.word	0x20003018
 800066c:	50040000 	.word	0x50040000
 8000670:	14f00020 	.word	0x14f00020

08000674 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0ac      	sub	sp, #176	@ 0xb0
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	228c      	movs	r2, #140	@ 0x8c
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f00a f97d 	bl	800a994 <memset>
  if(adcHandle->Instance==ADC1)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a35      	ldr	r2, [pc, #212]	@ (8000774 <HAL_ADC_MspInit+0x100>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d163      	bne.n	800076c <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80006aa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80006ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 f8f4 	bl	80068a4 <HAL_RCCEx_PeriphCLKConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80006c2:	f001 f9e1 	bl	8001a88 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <HAL_ADC_MspInit+0x104>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000778 <HAL_ADC_MspInit+0x104>)
 80006cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006d2:	4b29      	ldr	r3, [pc, #164]	@ (8000778 <HAL_ADC_MspInit+0x104>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b26      	ldr	r3, [pc, #152]	@ (8000778 <HAL_ADC_MspInit+0x104>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	4a25      	ldr	r2, [pc, #148]	@ (8000778 <HAL_ADC_MspInit+0x104>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ea:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <HAL_ADC_MspInit+0x104>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	2303      	movs	r3, #3
 80006fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000712:	f005 f853 	bl	80057bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <HAL_ADC_MspInit+0x108>)
 8000718:	4a19      	ldr	r2, [pc, #100]	@ (8000780 <HAL_ADC_MspInit+0x10c>)
 800071a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <HAL_ADC_MspInit+0x108>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <HAL_ADC_MspInit+0x108>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <HAL_ADC_MspInit+0x108>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <HAL_ADC_MspInit+0x108>)
 8000730:	2280      	movs	r2, #128	@ 0x80
 8000732:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <HAL_ADC_MspInit+0x108>)
 8000736:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800073a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <HAL_ADC_MspInit+0x108>)
 800073e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000742:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000744:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <HAL_ADC_MspInit+0x108>)
 8000746:	2220      	movs	r2, #32
 8000748:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <HAL_ADC_MspInit+0x108>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000750:	480a      	ldr	r0, [pc, #40]	@ (800077c <HAL_ADC_MspInit+0x108>)
 8000752:	f004 fdfd 	bl	8005350 <HAL_DMA_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <HAL_ADC_MspInit+0xec>
    {
      Error_Handler();
 800075c:	f001 f994 	bl	8001a88 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a06      	ldr	r2, [pc, #24]	@ (800077c <HAL_ADC_MspInit+0x108>)
 8000764:	651a      	str	r2, [r3, #80]	@ 0x50
 8000766:	4a05      	ldr	r2, [pc, #20]	@ (800077c <HAL_ADC_MspInit+0x108>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076c:	bf00      	nop
 800076e:	37b0      	adds	r7, #176	@ 0xb0
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	50040000 	.word	0x50040000
 8000778:	40021000 	.word	0x40021000
 800077c:	20003080 	.word	0x20003080
 8000780:	40020008 	.word	0x40020008

08000784 <StartADCAcq>:

static uint32_t packet_cnt = 0;

static volatile int32_t rem_n_bufs = 0;

int StartADCAcq(int32_t n_bufs) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	rem_n_bufs = n_bufs;
 800078c:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <StartADCAcq+0x38>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
	cur_melvec = 0;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <StartADCAcq+0x3c>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
	if (rem_n_bufs != 0) {
 8000798:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <StartADCAcq+0x38>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d007      	beq.n	80007b0 <StartADCAcq+0x2c>
		return HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE);
 80007a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007a4:	4907      	ldr	r1, [pc, #28]	@ (80007c4 <StartADCAcq+0x40>)
 80007a6:	4808      	ldr	r0, [pc, #32]	@ (80007c8 <StartADCAcq+0x44>)
 80007a8:	f003 fbf4 	bl	8003f94 <HAL_ADC_Start_DMA>
 80007ac:	4603      	mov	r3, r0
 80007ae:	e000      	b.n	80007b2 <StartADCAcq+0x2e>
	} else {
		return HAL_OK;
 80007b0:	2300      	movs	r3, #0
	}
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20003bf0 	.word	0x20003bf0
 80007c0:	200038ca 	.word	0x200038ca
 80007c4:	200030c8 	.word	0x200030c8
 80007c8:	20003018 	.word	0x20003018

080007cc <IsADCFinished>:

int IsADCFinished(void) {
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	return (rem_n_bufs == 0);
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <IsADCFinished+0x1c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	2301      	moveq	r3, #1
 80007da:	2300      	movne	r3, #0
 80007dc:	b2db      	uxtb	r3, r3
}
 80007de:	4618      	mov	r0, r3
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	20003bf0 	.word	0x20003bf0

080007ec <StopADCAcq>:

static void StopADCAcq() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 80007f0:	4802      	ldr	r0, [pc, #8]	@ (80007fc <StopADCAcq+0x10>)
 80007f2:	f003 fc8b 	bl	800410c <HAL_ADC_Stop_DMA>
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20003018 	.word	0x20003018

08000800 <print_encoded_packet>:
	}
	stop_cycle_count("Print FV");
#endif
}

static void print_encoded_packet(uint8_t *packet) {
 8000800:	b580      	push	{r7, lr}
 8000802:	f5ad 6dd0 	sub.w	sp, sp, #1664	@ 0x680
 8000806:	af00      	add	r7, sp, #0
 8000808:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 800080c:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 8000810:	6018      	str	r0, [r3, #0]
#if (DEBUGP == 1)
	char hex_encoded_packet[2*PACKET_LENGTH+1];
	hex_encode(hex_encoded_packet, packet, PACKET_LENGTH);
 8000812:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 8000816:	f2a3 637c 	subw	r3, r3, #1660	@ 0x67c
 800081a:	f107 000c 	add.w	r0, r7, #12
 800081e:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	f002 ff2e 	bl	8003684 <hex_encode>
	DEBUG_PRINT("DF:HEX:%s\r\n", hex_encoded_packet);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	4804      	ldr	r0, [pc, #16]	@ (8000840 <print_encoded_packet+0x40>)
 8000830:	f009 feb4 	bl	800a59c <iprintf>
#endif
}
 8000834:	bf00      	nop
 8000836:	f507 67d0 	add.w	r7, r7, #1664	@ 0x680
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	0800b538 	.word	0x0800b538

08000844 <encode_packet>:

static void encode_packet(uint8_t *packet, uint32_t* packet_cnt) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
	// BE encoding of each mel coef
	for (size_t i=0; i<N_MELVECS; i++) {
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e03d      	b.n	80008d0 <encode_packet+0x8c>
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	e034      	b.n	80008c4 <encode_packet+0x80>
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 800085a:	492c      	ldr	r1, [pc, #176]	@ (800090c <encode_packet+0xc8>)
 800085c:	68fa      	ldr	r2, [r7, #12]
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	4413      	add	r3, r2
 800086a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800086e:	121b      	asrs	r3, r3, #8
 8000870:	b219      	sxth	r1, r3
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	461a      	mov	r2, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	3304      	adds	r3, #4
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	687a      	ldr	r2, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	b2ca      	uxtb	r2, r1
 800088c:	701a      	strb	r2, [r3, #0]
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2+1] = mel_vectors[i][j] & 0xFF;
 800088e:	491f      	ldr	r1, [pc, #124]	@ (800090c <encode_packet+0xc8>)
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	4613      	mov	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	4413      	add	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	4413      	add	r3, r2
 800089e:	f931 1013 	ldrsh.w	r1, [r1, r3, lsl #1]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	461a      	mov	r2, r3
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	4413      	add	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	3309      	adds	r3, #9
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	2b13      	cmp	r3, #19
 80008c8:	d9c7      	bls.n	800085a <encode_packet+0x16>
	for (size_t i=0; i<N_MELVECS; i++) {
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	3301      	adds	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b13      	cmp	r3, #19
 80008d4:	d9be      	bls.n	8000854 <encode_packet+0x10>
		}
	}
	// Write header and tag into the packet.
	make_packet(packet, PAYLOAD_LENGTH, 0, *packet_cnt);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f001 f965 	bl	8001bb0 <make_packet>
	*packet_cnt += 1;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	601a      	str	r2, [r3, #0]
	if (*packet_cnt == 0) {
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d104      	bne.n	8000902 <encode_packet+0xbe>
		// Should not happen as packet_cnt is 32-bit and we send at most 1 packet per second.
		DEBUG_PRINT("Packet counter overflow.\r\n");
 80008f8:	4805      	ldr	r0, [pc, #20]	@ (8000910 <encode_packet+0xcc>)
 80008fa:	f009 feb7 	bl	800a66c <puts>
		Error_Handler();
 80008fe:	f001 f8c3 	bl	8001a88 <Error_Handler>
	}
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200038cc 	.word	0x200038cc
 8000910:	0800b544 	.word	0x0800b544

08000914 <send_spectrogram>:

static void send_spectrogram() {
 8000914:	b580      	push	{r7, lr}
 8000916:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
 800091a:	af00      	add	r7, sp, #0
	uint8_t packet[PACKET_LENGTH];

	start_cycle_count();
 800091c:	f002 fe62 	bl	80035e4 <start_cycle_count>
	encode_packet(packet, &packet_cnt);
 8000920:	463b      	mov	r3, r7
 8000922:	490d      	ldr	r1, [pc, #52]	@ (8000958 <send_spectrogram+0x44>)
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff8d 	bl	8000844 <encode_packet>
	stop_cycle_count("Encode packet");
 800092a:	480c      	ldr	r0, [pc, #48]	@ (800095c <send_spectrogram+0x48>)
 800092c:	f002 fe8a 	bl	8003644 <stop_cycle_count>

	start_cycle_count();
 8000930:	f002 fe58 	bl	80035e4 <start_cycle_count>
	S2LP_Send(packet, PACKET_LENGTH);
 8000934:	463b      	mov	r3, r7
 8000936:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fb3e 	bl	8001fbc <S2LP_Send>
	stop_cycle_count("Send packet");
 8000940:	4807      	ldr	r0, [pc, #28]	@ (8000960 <send_spectrogram+0x4c>)
 8000942:	f002 fe7f 	bl	8003644 <stop_cycle_count>

	print_encoded_packet(packet);
 8000946:	463b      	mov	r3, r7
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff59 	bl	8000800 <print_encoded_packet>
}
 800094e:	bf00      	nop
 8000950:	f507 774e 	add.w	r7, r7, #824	@ 0x338
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20003bec 	.word	0x20003bec
 800095c:	0800b560 	.word	0x0800b560
 8000960:	0800b570 	.word	0x0800b570

08000964 <ADC_Callback>:

static void ADC_Callback(int buf_cplt) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	if (rem_n_bufs != -1) {
 800096c:	4b28      	ldr	r3, [pc, #160]	@ (8000a10 <ADC_Callback+0xac>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d004      	beq.n	8000980 <ADC_Callback+0x1c>
		rem_n_bufs--;
 8000976:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <ADC_Callback+0xac>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3b01      	subs	r3, #1
 800097c:	4a24      	ldr	r2, [pc, #144]	@ (8000a10 <ADC_Callback+0xac>)
 800097e:	6013      	str	r3, [r2, #0]
	}
	if (rem_n_bufs == 0) {
 8000980:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <ADC_Callback+0xac>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <ADC_Callback+0x2a>
		StopADCAcq();
 8000988:	f7ff ff30 	bl	80007ec <StopADCAcq>
 800098c:	e00c      	b.n	80009a8 <ADC_Callback+0x44>
	} else if (ADCDataRdy[1-buf_cplt]) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f1c3 0301 	rsb	r3, r3, #1
 8000994:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <ADC_Callback+0xb0>)
 8000996:	5cd3      	ldrb	r3, [r2, r3]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <ADC_Callback+0x44>
		DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 800099e:	481e      	ldr	r0, [pc, #120]	@ (8000a18 <ADC_Callback+0xb4>)
 80009a0:	f009 fe64 	bl	800a66c <puts>
		Error_Handler();
 80009a4:	f001 f870 	bl	8001a88 <Error_Handler>
	}
	ADCDataRdy[buf_cplt] = 1;
 80009a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a14 <ADC_Callback+0xb0>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
	//start_cycle_count();
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 80009b2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a1c <ADC_Callback+0xb8>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fad8 	bl	8002f70 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 80009c0:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <ADC_Callback+0xb8>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <ADC_Callback+0xbc>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4619      	mov	r1, r3
 80009d0:	460b      	mov	r3, r1
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	440b      	add	r3, r1
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4912      	ldr	r1, [pc, #72]	@ (8000a24 <ADC_Callback+0xc0>)
 80009da:	440b      	add	r3, r1
 80009dc:	4619      	mov	r1, r3
 80009de:	4610      	mov	r0, r2
 80009e0:	f002 faf0 	bl	8002fc4 <Spectrogram_Compute>
	cur_melvec++;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a20 <ADC_Callback+0xbc>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	3301      	adds	r3, #1
 80009ec:	b2da      	uxtb	r2, r3
 80009ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <ADC_Callback+0xbc>)
 80009f0:	701a      	strb	r2, [r3, #0]
	//stop_cycle_count("spectrogram");
	ADCDataRdy[buf_cplt] = 0;
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <ADC_Callback+0xb0>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]

	if (rem_n_bufs == 0) {
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <ADC_Callback+0xac>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d101      	bne.n	8000a08 <ADC_Callback+0xa4>
		//print_spectrogram();
		send_spectrogram();
 8000a04:	f7ff ff86 	bl	8000914 <send_spectrogram>
	}
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20003bf0 	.word	0x20003bf0
 8000a14:	200038c8 	.word	0x200038c8
 8000a18:	0800b57c 	.word	0x0800b57c
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	200038ca 	.word	0x200038ca
 8000a24:	200038cc 	.word	0x200038cc

08000a28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	ADC_Callback(1);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff ff97 	bl	8000964 <ADC_Callback>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
	ADC_Callback(0);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff ff8c 	bl	8000964 <ADC_Callback>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <mul>:
};
static const int BC = 4;
static const int KC = 4;
static const int ROUNDS = 10;

word8 mul(word8 a, word8 b) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	71fb      	strb	r3, [r7, #7]
 8000a60:	4613      	mov	r3, r2
 8000a62:	71bb      	strb	r3, [r7, #6]
  /* multiply two elements of GF(256)
   * required for MixColumns and InvMixColumns
   */
  if (a && b)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d018      	beq.n	8000a9c <mul+0x48>
 8000a6a:	79bb      	ldrb	r3, [r7, #6]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d015      	beq.n	8000a9c <mul+0x48>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	@ (8000aac <mul+0x58>)
 8000a74:	5cd3      	ldrb	r3, [r2, r3]
 8000a76:	4619      	mov	r1, r3
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000aac <mul+0x58>)
 8000a7c:	5cd3      	ldrb	r3, [r2, r3]
 8000a7e:	18ca      	adds	r2, r1, r3
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <mul+0x5c>)
 8000a82:	fb83 1302 	smull	r1, r3, r3, r2
 8000a86:	4413      	add	r3, r2
 8000a88:	11d9      	asrs	r1, r3, #7
 8000a8a:	17d3      	asrs	r3, r2, #31
 8000a8c:	1ac9      	subs	r1, r1, r3
 8000a8e:	460b      	mov	r3, r1
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	1a5b      	subs	r3, r3, r1
 8000a94:	1ad1      	subs	r1, r2, r3
 8000a96:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <mul+0x60>)
 8000a98:	5c5b      	ldrb	r3, [r3, r1]
 8000a9a:	e000      	b.n	8000a9e <mul+0x4a>
  else
    return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	80808081 	.word	0x80808081
 8000ab4:	20000108 	.word	0x20000108

08000ab8 <AddRoundKey>:
void AddRoundKey(word8 a[4][MAXBC], word8 rk[4][MAXBC]) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  /* XOR corresponding text input and round key input bytes
   */
  int i, j;
  for (i = 0; i < 4; i++)
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	e024      	b.n	8000b12 <AddRoundKey+0x5a>
    for (j = 0; j < BC; j++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	e01a      	b.n	8000b04 <AddRoundKey+0x4c>
      a[i][j] ^= rk[i][j];
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	441a      	add	r2, r3
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	7819      	ldrb	r1, [r3, #0]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	441a      	add	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	00d2      	lsls	r2, r2, #3
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	4402      	add	r2, r0
 8000af2:	404b      	eors	r3, r1
 8000af4:	b2d9      	uxtb	r1, r3
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	4413      	add	r3, r2
 8000afa:	460a      	mov	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < BC; j++)
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	3301      	adds	r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	2204      	movs	r2, #4
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	dbe0      	blt.n	8000ace <AddRoundKey+0x16>
  for (i = 0; i < 4; i++)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	ddd7      	ble.n	8000ac8 <AddRoundKey+0x10>
}
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <SubBytes>:
void SubBytes(word8 a[4][MAXBC], word8 box[256]) {
 8000b26:	b480      	push	{r7}
 8000b28:	b085      	sub	sp, #20
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  /* Replace every byte of the input by the byte at that place
   * in the non-linear S-box
   */
  int i, j;
  for (i = 0; i < 4; i++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e01f      	b.n	8000b76 <SubBytes+0x50>
    for (j = 0; j < BC; j++)
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	e015      	b.n	8000b68 <SubBytes+0x42>
      a[i][j] = box[a[i][j]];
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	441a      	add	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	4413      	add	r3, r2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	00d2      	lsls	r2, r2, #3
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	440a      	add	r2, r1
 8000b58:	7819      	ldrb	r1, [r3, #0]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	460a      	mov	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < BC; j++)
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	3301      	adds	r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	2204      	movs	r2, #4
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	dbe5      	blt.n	8000b3c <SubBytes+0x16>
  for (i = 0; i < 4; i++)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3301      	adds	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	dddc      	ble.n	8000b36 <SubBytes+0x10>
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <ShiftRows>:

void ShiftRows(word8 a[4][MAXBC], word8 d) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b087      	sub	sp, #28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	70fb      	strb	r3, [r7, #3]
  /* Row 0 remains unchanged
   * The other three rows are shifted a variable amount
   */
  word8 tmp[MAXBC];
  int i, j;
  if (d == 0) {
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d146      	bne.n	8000c2c <ShiftRows+0xa0>
    for (i = 1; i < 4; i++) {
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e03f      	b.n	8000c24 <ShiftRows+0x98>
      for (j = 0; j < BC; j++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	e01e      	b.n	8000be8 <ShiftRows+0x5c>
        tmp[j] = a[i][(j + shifts[BC - 4][i]) % BC];
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	18d1      	adds	r1, r2, r3
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	3b04      	subs	r3, #4
 8000bb6:	4a44      	ldr	r2, [pc, #272]	@ (8000cc8 <ShiftRows+0x13c>)
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	441a      	add	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2204      	movs	r2, #4
 8000bca:	fb93 f0f2 	sdiv	r0, r3, r2
 8000bce:	fb00 f202 	mul.w	r2, r0, r2
 8000bd2:	1a9b      	subs	r3, r3, r2
 8000bd4:	5cc9      	ldrb	r1, [r1, r3]
 8000bd6:	f107 0208 	add.w	r2, r7, #8
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4413      	add	r3, r2
 8000bde:	460a      	mov	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
      for (j = 0; j < BC; j++)
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	3301      	adds	r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	2204      	movs	r2, #4
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	4293      	cmp	r3, r2
 8000bee:	dbdc      	blt.n	8000baa <ShiftRows+0x1e>
      for (j = 0; j < BC; j++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	e00f      	b.n	8000c16 <ShiftRows+0x8a>
        a[i][j] = tmp[j];
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	441a      	add	r2, r3
 8000bfe:	f107 0108 	add.w	r1, r7, #8
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	440b      	add	r3, r1
 8000c06:	7819      	ldrb	r1, [r3, #0]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	701a      	strb	r2, [r3, #0]
      for (j = 0; j < BC; j++)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	3301      	adds	r3, #1
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	2204      	movs	r2, #4
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	dbeb      	blt.n	8000bf6 <ShiftRows+0x6a>
    for (i = 1; i < 4; i++) {
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	ddbc      	ble.n	8000ba4 <ShiftRows+0x18>
        tmp[j] = a[i][(BC + j - shifts[BC - 4][i]) % BC];
      for (j = 0; j < BC; j++)
        a[i][j] = tmp[j];
    }
  }
}
 8000c2a:	e046      	b.n	8000cba <ShiftRows+0x12e>
    for (i = 1; i < 4; i++) {
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	e040      	b.n	8000cb4 <ShiftRows+0x128>
      for (j = 0; j < BC; j++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	e01f      	b.n	8000c78 <ShiftRows+0xec>
        tmp[j] = a[i][(BC + j - shifts[BC - 4][i]) % BC];
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	18d1      	adds	r1, r2, r3
 8000c40:	2204      	movs	r2, #4
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4413      	add	r3, r2
 8000c46:	2204      	movs	r2, #4
 8000c48:	3a04      	subs	r2, #4
 8000c4a:	481f      	ldr	r0, [pc, #124]	@ (8000cc8 <ShiftRows+0x13c>)
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	4410      	add	r0, r2
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	4402      	add	r2, r0
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	2204      	movs	r2, #4
 8000c5a:	fb93 f0f2 	sdiv	r0, r3, r2
 8000c5e:	fb00 f202 	mul.w	r2, r0, r2
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	5cc9      	ldrb	r1, [r1, r3]
 8000c66:	f107 0208 	add.w	r2, r7, #8
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	460a      	mov	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
      for (j = 0; j < BC; j++)
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	3301      	adds	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	2204      	movs	r2, #4
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	dbdb      	blt.n	8000c38 <ShiftRows+0xac>
      for (j = 0; j < BC; j++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	e00f      	b.n	8000ca6 <ShiftRows+0x11a>
        a[i][j] = tmp[j];
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	f107 0108 	add.w	r1, r7, #8
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	440b      	add	r3, r1
 8000c96:	7819      	ldrb	r1, [r3, #0]
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	701a      	strb	r2, [r3, #0]
      for (j = 0; j < BC; j++)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	2204      	movs	r2, #4
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	dbeb      	blt.n	8000c86 <ShiftRows+0xfa>
    for (i = 1; i < 4; i++) {
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	ddbb      	ble.n	8000c32 <ShiftRows+0xa6>
}
 8000cba:	bf00      	nop
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20000380 	.word	0x20000380

08000ccc <MixColumns>:
void MixColumns(word8 a[4][MAXBC]) {
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b08d      	sub	sp, #52	@ 0x34
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Mix the four bytes of every column in a linear way
   */
  word8 b[4][MAXBC];
  int i, j;
  for (j = 0; j < BC; j++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cd8:	e059      	b.n	8000d8e <MixColumns+0xc2>
    for (i = 0; i < 4; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cde:	e050      	b.n	8000d82 <MixColumns+0xb6>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8000ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	441a      	add	r2, r3
 8000ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f7ff feaf 	bl	8000a54 <mul>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461c      	mov	r4, r3
 8000cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	425a      	negs	r2, r3
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	f002 0203 	and.w	r2, r2, #3
 8000d08:	bf58      	it	pl
 8000d0a:	4253      	negpl	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	441a      	add	r2, r3
 8000d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d14:	4413      	add	r3, r2
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2003      	movs	r0, #3
 8000d1c:	f7ff fe9a 	bl	8000a54 <mul>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4063      	eors	r3, r4
 8000d24:	b2da      	uxtb	r2, r3
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 8000d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d28:	3302      	adds	r3, #2
 8000d2a:	4259      	negs	r1, r3
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	f001 0103 	and.w	r1, r1, #3
 8000d34:	bf58      	it	pl
 8000d36:	424b      	negpl	r3, r1
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	4419      	add	r1, r3
 8000d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d40:	440b      	add	r3, r1
 8000d42:	781b      	ldrb	r3, [r3, #0]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8000d44:	4053      	eors	r3, r2
 8000d46:	b2da      	uxtb	r2, r3
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 8000d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d4a:	3303      	adds	r3, #3
 8000d4c:	4259      	negs	r1, r3
 8000d4e:	f003 0303 	and.w	r3, r3, #3
 8000d52:	f001 0103 	and.w	r1, r1, #3
 8000d56:	bf58      	it	pl
 8000d58:	424b      	negpl	r3, r1
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	4419      	add	r1, r3
 8000d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d62:	440b      	add	r3, r1
 8000d64:	781b      	ldrb	r3, [r3, #0]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8000d66:	4053      	eors	r3, r2
 8000d68:	b2d9      	uxtb	r1, r3
 8000d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	3330      	adds	r3, #48	@ 0x30
 8000d70:	19da      	adds	r2, r3, r7
 8000d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d74:	4413      	add	r3, r2
 8000d76:	3b28      	subs	r3, #40	@ 0x28
 8000d78:	460a      	mov	r2, r1
 8000d7a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 8000d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d7e:	3301      	adds	r3, #1
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	ddab      	ble.n	8000ce0 <MixColumns+0x14>
  for (j = 0; j < BC; j++)
 8000d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d8e:	2204      	movs	r2, #4
 8000d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d92:	4293      	cmp	r3, r2
 8000d94:	dba1      	blt.n	8000cda <MixColumns+0xe>
  for (i = 0; i < 4; i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d9a:	e01c      	b.n	8000dd6 <MixColumns+0x10a>
    for (j = 0; j < BC; j++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000da0:	e012      	b.n	8000dc8 <MixColumns+0xfc>
      a[i][j] = b[i][j];
 8000da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	441a      	add	r2, r3
 8000daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	3330      	adds	r3, #48	@ 0x30
 8000db0:	19d9      	adds	r1, r3, r7
 8000db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db4:	440b      	add	r3, r1
 8000db6:	3b28      	subs	r3, #40	@ 0x28
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dbc:	4413      	add	r3, r2
 8000dbe:	460a      	mov	r2, r1
 8000dc0:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < BC; j++)
 8000dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dc8:	2204      	movs	r2, #4
 8000dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	dbe8      	blt.n	8000da2 <MixColumns+0xd6>
  for (i = 0; i < 4; i++)
 8000dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	dddf      	ble.n	8000d9c <MixColumns+0xd0>
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3734      	adds	r7, #52	@ 0x34
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}
	...

08000de8 <KeyExpansion>:
                mul(0xd, a[(i + 2) % 4][j]) ^ mul(0x9, a[(i + 3) % 4][j]);
  for (i = 0; i < 4; i++)
    for (j = 0; j < BC; j++)
      a[i][j] = b[i][j];
}
int KeyExpansion(word8 k[4][MAXKC], word8 W[MAXROUNDS + 1][4][MAXBC]) {
 8000de8:	b480      	push	{r7}
 8000dea:	b08f      	sub	sp, #60	@ 0x3c
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  /* Calculate the required round keys
   */
  int i, j, t, RCpointer = 1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  word8 tk[4][MAXKC];
  for (j = 0; j < KC; j++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
 8000dfa:	e01b      	b.n	8000e34 <KeyExpansion+0x4c>
    for (i = 0; i < 4; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e00:	e012      	b.n	8000e28 <KeyExpansion+0x40>
      tk[i][j] = k[i][j];
 8000e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	441a      	add	r2, r3
 8000e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e0c:	4413      	add	r3, r2
 8000e0e:	7819      	ldrb	r1, [r3, #0]
 8000e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	3338      	adds	r3, #56	@ 0x38
 8000e16:	19da      	adds	r2, r3, r7
 8000e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3b30      	subs	r3, #48	@ 0x30
 8000e1e:	460a      	mov	r2, r1
 8000e20:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 8000e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e24:	3301      	adds	r3, #1
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	dde9      	ble.n	8000e02 <KeyExpansion+0x1a>
  for (j = 0; j < KC; j++)
 8000e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e30:	3301      	adds	r3, #1
 8000e32:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e34:	2204      	movs	r2, #4
 8000e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	dbdf      	blt.n	8000dfc <KeyExpansion+0x14>
  t = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* copy values into round key array */
  for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e44:	e02a      	b.n	8000e9c <KeyExpansion+0xb4>
    for (i = 0; i < 4; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e4a:	e01e      	b.n	8000e8a <KeyExpansion+0xa2>
      W[t / BC][i][t % BC] = tk[i][j];
 8000e4c:	2204      	movs	r2, #4
 8000e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e54:	015b      	lsls	r3, r3, #5
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	18d1      	adds	r1, r2, r3
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e5e:	fb93 f0f2 	sdiv	r0, r3, r2
 8000e62:	fb00 f202 	mul.w	r2, r0, r2
 8000e66:	1a9b      	subs	r3, r3, r2
 8000e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e6a:	00d2      	lsls	r2, r2, #3
 8000e6c:	3238      	adds	r2, #56	@ 0x38
 8000e6e:	19d0      	adds	r0, r2, r7
 8000e70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000e72:	4402      	add	r2, r0
 8000e74:	3a30      	subs	r2, #48	@ 0x30
 8000e76:	7810      	ldrb	r0, [r2, #0]
 8000e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e7a:	00d2      	lsls	r2, r2, #3
 8000e7c:	440a      	add	r2, r1
 8000e7e:	4413      	add	r3, r2
 8000e80:	4602      	mov	r2, r0
 8000e82:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 8000e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e86:	3301      	adds	r3, #1
 8000e88:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	dddd      	ble.n	8000e4c <KeyExpansion+0x64>
  for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 8000e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e92:	3301      	adds	r3, #1
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8000e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e98:	3301      	adds	r3, #1
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	f280 8129 	bge.w	80010f8 <KeyExpansion+0x310>
 8000ea6:	230a      	movs	r3, #10
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	2204      	movs	r2, #4
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	dbc7      	blt.n	8000e46 <KeyExpansion+0x5e>
  while (t < (ROUNDS + 1) * BC) {
 8000eb6:	e11f      	b.n	80010f8 <KeyExpansion+0x310>
    /* while not enough round key material calculated,
     * calculate new values
     */
    for (i = 0; i < 4; i++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ebc:	e024      	b.n	8000f08 <KeyExpansion+0x120>
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 8000ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	3338      	adds	r3, #56	@ 0x38
 8000ec4:	443b      	add	r3, r7
 8000ec6:	f813 2c30 	ldrb.w	r2, [r3, #-48]
 8000eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ecc:	3301      	adds	r3, #1
 8000ece:	4259      	negs	r1, r3
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	f001 0103 	and.w	r1, r1, #3
 8000ed8:	bf58      	it	pl
 8000eda:	424b      	negpl	r3, r1
 8000edc:	2104      	movs	r1, #4
 8000ede:	3901      	subs	r1, #1
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	3338      	adds	r3, #56	@ 0x38
 8000ee4:	443b      	add	r3, r7
 8000ee6:	440b      	add	r3, r1
 8000ee8:	3b30      	subs	r3, #48	@ 0x30
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	4b8a      	ldr	r3, [pc, #552]	@ (8001118 <KeyExpansion+0x330>)
 8000ef0:	5c5b      	ldrb	r3, [r3, r1]
 8000ef2:	4053      	eors	r3, r2
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	3338      	adds	r3, #56	@ 0x38
 8000efc:	443b      	add	r3, r7
 8000efe:	f803 2c30 	strb.w	r2, [r3, #-48]
    for (i = 0; i < 4; i++)
 8000f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f04:	3301      	adds	r3, #1
 8000f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	ddd7      	ble.n	8000ebe <KeyExpansion+0xd6>
    tk[0][0] ^= RC[RCpointer++];
 8000f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000f14:	4a81      	ldr	r2, [pc, #516]	@ (800111c <KeyExpansion+0x334>)
 8000f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1a:	7a3a      	ldrb	r2, [r7, #8]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4053      	eors	r3, r2
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	723b      	strb	r3, [r7, #8]

    if (KC <= 6)
 8000f24:	2304      	movs	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	dc2f      	bgt.n	8000f8a <KeyExpansion+0x1a2>
      for (j = 1; j < KC; j++)
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f2e:	e027      	b.n	8000f80 <KeyExpansion+0x198>
        for (i = 0; i < 4; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f34:	e01e      	b.n	8000f74 <KeyExpansion+0x18c>
          tk[i][j] ^= tk[i][j - 1];
 8000f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	3338      	adds	r3, #56	@ 0x38
 8000f3c:	19da      	adds	r2, r3, r7
 8000f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f40:	4413      	add	r3, r2
 8000f42:	3b30      	subs	r3, #48	@ 0x30
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000f4c:	00c9      	lsls	r1, r1, #3
 8000f4e:	3138      	adds	r1, #56	@ 0x38
 8000f50:	4439      	add	r1, r7
 8000f52:	440b      	add	r3, r1
 8000f54:	3b30      	subs	r3, #48	@ 0x30
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4053      	eors	r3, r2
 8000f5a:	b2d9      	uxtb	r1, r3
 8000f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	3338      	adds	r3, #56	@ 0x38
 8000f62:	19da      	adds	r2, r3, r7
 8000f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f66:	4413      	add	r3, r2
 8000f68:	3b30      	subs	r3, #48	@ 0x30
 8000f6a:	460a      	mov	r2, r1
 8000f6c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++)
 8000f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f70:	3301      	adds	r3, #1
 8000f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	dddd      	ble.n	8000f36 <KeyExpansion+0x14e>
      for (j = 1; j < KC; j++)
 8000f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f80:	2204      	movs	r2, #4
 8000f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f84:	4293      	cmp	r3, r2
 8000f86:	dbd3      	blt.n	8000f30 <KeyExpansion+0x148>
 8000f88:	e07c      	b.n	8001084 <KeyExpansion+0x29c>
    else {
      for (j = 1; j < 4; j++)
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f8e:	e027      	b.n	8000fe0 <KeyExpansion+0x1f8>
        for (i = 0; i < 4; i++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f94:	e01e      	b.n	8000fd4 <KeyExpansion+0x1ec>
          tk[i][j] ^= tk[i][j - 1];
 8000f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	3338      	adds	r3, #56	@ 0x38
 8000f9c:	19da      	adds	r2, r3, r7
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3b30      	subs	r3, #48	@ 0x30
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000fac:	00c9      	lsls	r1, r1, #3
 8000fae:	3138      	adds	r1, #56	@ 0x38
 8000fb0:	4439      	add	r1, r7
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3b30      	subs	r3, #48	@ 0x30
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4053      	eors	r3, r2
 8000fba:	b2d9      	uxtb	r1, r3
 8000fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	3338      	adds	r3, #56	@ 0x38
 8000fc2:	19da      	adds	r2, r3, r7
 8000fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3b30      	subs	r3, #48	@ 0x30
 8000fca:	460a      	mov	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++)
 8000fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	dddd      	ble.n	8000f96 <KeyExpansion+0x1ae>
      for (j = 1; j < 4; j++)
 8000fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fdc:	3301      	adds	r3, #1
 8000fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	ddd4      	ble.n	8000f90 <KeyExpansion+0x1a8>
      for (i = 0; i < 4; i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fea:	e019      	b.n	8001020 <KeyExpansion+0x238>
        tk[i][4] ^= S[tk[i][3]];
 8000fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	3338      	adds	r3, #56	@ 0x38
 8000ff2:	443b      	add	r3, r7
 8000ff4:	f813 2c2c 	ldrb.w	r2, [r3, #-44]
 8000ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	3338      	adds	r3, #56	@ 0x38
 8000ffe:	443b      	add	r3, r7
 8001000:	f813 3c2d 	ldrb.w	r3, [r3, #-45]
 8001004:	4619      	mov	r1, r3
 8001006:	4b44      	ldr	r3, [pc, #272]	@ (8001118 <KeyExpansion+0x330>)
 8001008:	5c5b      	ldrb	r3, [r3, r1]
 800100a:	4053      	eors	r3, r2
 800100c:	b2da      	uxtb	r2, r3
 800100e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	3338      	adds	r3, #56	@ 0x38
 8001014:	443b      	add	r3, r7
 8001016:	f803 2c2c 	strb.w	r2, [r3, #-44]
      for (i = 0; i < 4; i++)
 800101a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800101c:	3301      	adds	r3, #1
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001022:	2b03      	cmp	r3, #3
 8001024:	dde2      	ble.n	8000fec <KeyExpansion+0x204>
      for (j = 5; j < KC; j++)
 8001026:	2305      	movs	r3, #5
 8001028:	633b      	str	r3, [r7, #48]	@ 0x30
 800102a:	e027      	b.n	800107c <KeyExpansion+0x294>
        for (i = 0; i < 4; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001030:	e01e      	b.n	8001070 <KeyExpansion+0x288>
          tk[i][j] ^= tk[i][j - 1];
 8001032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	3338      	adds	r3, #56	@ 0x38
 8001038:	19da      	adds	r2, r3, r7
 800103a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800103c:	4413      	add	r3, r2
 800103e:	3b30      	subs	r3, #48	@ 0x30
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001044:	3b01      	subs	r3, #1
 8001046:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001048:	00c9      	lsls	r1, r1, #3
 800104a:	3138      	adds	r1, #56	@ 0x38
 800104c:	4439      	add	r1, r7
 800104e:	440b      	add	r3, r1
 8001050:	3b30      	subs	r3, #48	@ 0x30
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4053      	eors	r3, r2
 8001056:	b2d9      	uxtb	r1, r3
 8001058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	3338      	adds	r3, #56	@ 0x38
 800105e:	19da      	adds	r2, r3, r7
 8001060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001062:	4413      	add	r3, r2
 8001064:	3b30      	subs	r3, #48	@ 0x30
 8001066:	460a      	mov	r2, r1
 8001068:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < 4; i++)
 800106a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800106c:	3301      	adds	r3, #1
 800106e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001072:	2b03      	cmp	r3, #3
 8001074:	dddd      	ble.n	8001032 <KeyExpansion+0x24a>
      for (j = 5; j < KC; j++)
 8001076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001078:	3301      	adds	r3, #1
 800107a:	633b      	str	r3, [r7, #48]	@ 0x30
 800107c:	2204      	movs	r2, #4
 800107e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001080:	4293      	cmp	r3, r2
 8001082:	dbd3      	blt.n	800102c <KeyExpansion+0x244>
    }
    /* copy values into round key array */
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	@ 0x30
 8001088:	e02a      	b.n	80010e0 <KeyExpansion+0x2f8>
      for (i = 0; i < 4; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	@ 0x34
 800108e:	e01e      	b.n	80010ce <KeyExpansion+0x2e6>
        W[t / BC][i][t % BC] = tk[i][j];
 8001090:	2204      	movs	r2, #4
 8001092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001094:	fb93 f3f2 	sdiv	r3, r3, r2
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	18d1      	adds	r1, r2, r3
 800109e:	2204      	movs	r2, #4
 80010a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a2:	fb93 f0f2 	sdiv	r0, r3, r2
 80010a6:	fb00 f202 	mul.w	r2, r0, r2
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010ae:	00d2      	lsls	r2, r2, #3
 80010b0:	3238      	adds	r2, #56	@ 0x38
 80010b2:	19d0      	adds	r0, r2, r7
 80010b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80010b6:	4402      	add	r2, r0
 80010b8:	3a30      	subs	r2, #48	@ 0x30
 80010ba:	7810      	ldrb	r0, [r2, #0]
 80010bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010be:	00d2      	lsls	r2, r2, #3
 80010c0:	440a      	add	r2, r1
 80010c2:	4413      	add	r3, r2
 80010c4:	4602      	mov	r2, r0
 80010c6:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < 4; i++)
 80010c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ca:	3301      	adds	r3, #1
 80010cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80010ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	dddd      	ble.n	8001090 <KeyExpansion+0x2a8>
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 80010d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010d6:	3301      	adds	r3, #1
 80010d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80010da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010dc:	3301      	adds	r3, #1
 80010de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010e0:	2204      	movs	r2, #4
 80010e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e4:	4293      	cmp	r3, r2
 80010e6:	da07      	bge.n	80010f8 <KeyExpansion+0x310>
 80010e8:	230a      	movs	r3, #10
 80010ea:	3301      	adds	r3, #1
 80010ec:	2204      	movs	r2, #4
 80010ee:	fb02 f303 	mul.w	r3, r2, r3
 80010f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbc8      	blt.n	800108a <KeyExpansion+0x2a2>
  while (t < (ROUNDS + 1) * BC) {
 80010f8:	230a      	movs	r3, #10
 80010fa:	3301      	adds	r3, #1
 80010fc:	2204      	movs	r2, #4
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001104:	429a      	cmp	r2, r3
 8001106:	f6ff aed7 	blt.w	8000eb8 <KeyExpansion+0xd0>
  }
  return 0;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	373c      	adds	r7, #60	@ 0x3c
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	20000208 	.word	0x20000208
 800111c:	20000308 	.word	0x20000308

08001120 <Encrypt>:
int Encrypt(word8 a[4][MAXBC], word8 rk[MAXROUNDS + 1][4][MAXBC]) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  /* Encryption of one block.
   */
  int r;
  /* begin with a key addition
   * */
  AddRoundKey(a, rk[0]);
 800112a:	6839      	ldr	r1, [r7, #0]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff fcc3 	bl	8000ab8 <AddRoundKey>
  /* ROUNDS-1 ordinary rounds
   */
  for (r = 1; r < ROUNDS; r++) {
 8001132:	2301      	movs	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	e015      	b.n	8001164 <Encrypt+0x44>
    SubBytes(a, S);
 8001138:	4917      	ldr	r1, [pc, #92]	@ (8001198 <Encrypt+0x78>)
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fcf3 	bl	8000b26 <SubBytes>
    ShiftRows(a, 0);
 8001140:	2100      	movs	r1, #0
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fd22 	bl	8000b8c <ShiftRows>
    MixColumns(a);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff fdbf 	bl	8000ccc <MixColumns>
    AddRoundKey(a, rk[r]);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	015b      	lsls	r3, r3, #5
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4619      	mov	r1, r3
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff fcad 	bl	8000ab8 <AddRoundKey>
  for (r = 1; r < ROUNDS; r++) {
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3301      	adds	r3, #1
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	220a      	movs	r2, #10
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4293      	cmp	r3, r2
 800116a:	dbe5      	blt.n	8001138 <Encrypt+0x18>
  }
  /* Last round is special: there is no MixColumns
   */
  SubBytes(a, S);
 800116c:	490a      	ldr	r1, [pc, #40]	@ (8001198 <Encrypt+0x78>)
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fcd9 	bl	8000b26 <SubBytes>
  ShiftRows(a, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fd08 	bl	8000b8c <ShiftRows>
  AddRoundKey(a, rk[ROUNDS]);
 800117c:	230a      	movs	r3, #10
 800117e:	015b      	lsls	r3, r3, #5
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4619      	mov	r1, r3
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fc96 	bl	8000ab8 <AddRoundKey>
  return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000208 	.word	0x20000208

0800119c <AES128_encrypt>:
   */
  AddRoundKey(a, rk[0]);
  return 0;
}

void AES128_encrypt(word8* block, const word8* key) {
 800119c:	b580      	push	{r7, lr}
 800119e:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80011a8:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80011ac:	6018      	str	r0, [r3, #0]
 80011ae:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80011b2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80011b6:	6019      	str	r1, [r3, #0]
  word8 a[4][MAXBC], rk[MAXROUNDS + 1][4][MAXBC], sk[4][MAXKC];
  for (int j=0; j<4; j++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 80011be:	e046      	b.n	800124e <AES128_encrypt+0xb2>
      for (int i=0; i<4; i++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 80011c6:	e039      	b.n	800123c <AES128_encrypt+0xa0>
          a[i][j] = block[4*j+i];
 80011c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80011cc:	009a      	lsls	r2, r3, #2
 80011ce:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80011d2:	4413      	add	r3, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80011da:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4413      	add	r3, r2
 80011e2:	7819      	ldrb	r1, [r3, #0]
 80011e4:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 80011ee:	19da      	adds	r2, r3, r7
 80011f0:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 80011f4:	4413      	add	r3, r2
 80011f6:	3b30      	subs	r3, #48	@ 0x30
 80011f8:	460a      	mov	r2, r1
 80011fa:	701a      	strb	r2, [r3, #0]
          sk[i][j] = key[4*j+i];
 80011fc:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001200:	009a      	lsls	r2, r3, #2
 8001202:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8001206:	4413      	add	r3, r2
 8001208:	461a      	mov	r2, r3
 800120a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800120e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4413      	add	r3, r2
 8001216:	7819      	ldrb	r1, [r3, #0]
 8001218:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800121c:	f5a3 720c 	sub.w	r2, r3, #560	@ 0x230
 8001220:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	441a      	add	r2, r3
 8001228:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800122c:	4413      	add	r3, r2
 800122e:	460a      	mov	r2, r1
 8001230:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<4; i++) {
 8001232:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8001236:	3301      	adds	r3, #1
 8001238:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 800123c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8001240:	2b03      	cmp	r3, #3
 8001242:	ddc1      	ble.n	80011c8 <AES128_encrypt+0x2c>
  for (int j=0; j<4; j++) {
 8001244:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001248:	3301      	adds	r3, #1
 800124a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800124e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001252:	2b03      	cmp	r3, #3
 8001254:	ddb4      	ble.n	80011c0 <AES128_encrypt+0x24>
      }
  }
  KeyExpansion(sk, rk);
 8001256:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800125a:	f107 0308 	add.w	r3, r7, #8
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fdc1 	bl	8000de8 <KeyExpansion>
  Encrypt(a, rk);
 8001266:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800126a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff55 	bl	8001120 <Encrypt>
  for (int j=0; j<4; j++) {
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 800127c:	e02a      	b.n	80012d4 <AES128_encrypt+0x138>
      for (int i=0; i<4; i++) {
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8001284:	e01d      	b.n	80012c2 <AES128_encrypt+0x126>
          block[4*j+i] = a[i][j];
 8001286:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800128a:	009a      	lsls	r2, r3, #2
 800128c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001290:	4413      	add	r3, r2
 8001292:	461a      	mov	r2, r3
 8001294:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001298:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 80012a4:	00d2      	lsls	r2, r2, #3
 80012a6:	f502 720e 	add.w	r2, r2, #568	@ 0x238
 80012aa:	19d1      	adds	r1, r2, r7
 80012ac:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80012b0:	440a      	add	r2, r1
 80012b2:	3a30      	subs	r2, #48	@ 0x30
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<4; i++) {
 80012b8:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80012bc:	3301      	adds	r3, #1
 80012be:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 80012c2:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	dddd      	ble.n	8001286 <AES128_encrypt+0xea>
  for (int j=0; j<4; j++) {
 80012ca:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80012ce:	3301      	adds	r3, #1
 80012d0:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 80012d4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80012d8:	2b03      	cmp	r3, #3
 80012da:	ddd0      	ble.n	800127e <AES128_encrypt+0xe2>
      }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <arm_absmax_q15>:
void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b09d      	sub	sp, #116	@ 0x74
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
 80012f4:	603b      	str	r3, [r7, #0]
        q15_t cur_absmax, out;                     /* Temporary variables to store the output value. */\
        uint32_t blkCnt, outIndex;                     /* Loop counter */                                   \
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
 80012f6:	2300      	movs	r3, #0
 80012f8:	667b      	str	r3, [r7, #100]	@ 0x64
  /* Load first input value that act as reference value for comparision */                                  \
  out = *pSrc++;                                                                                            \
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1c9a      	adds	r2, r3, #2
 80012fe:	60fa      	str	r2, [r7, #12]
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 8001306:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800130a:	2b00      	cmp	r3, #0
 800130c:	dc0c      	bgt.n	8001328 <arm_absmax_q15+0x40>
 800130e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8001312:	2200      	movs	r2, #0
 8001314:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001316:	657b      	str	r3, [r7, #84]	@ 0x54

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001318:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800131a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800131c:	fad3 f312 	qsub16	r3, r3, r2
 8001320:	653b      	str	r3, [r7, #80]	@ 0x50
  return(result);
 8001322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001324:	b21b      	sxth	r3, r3
 8001326:	e001      	b.n	800132c <arm_absmax_q15+0x44>
 8001328:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800132c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
 8001330:	2300      	movs	r3, #0
 8001332:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3b01      	subs	r3, #1
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 800133c:	e0a5      	b.n	800148a <arm_absmax_q15+0x1a2>
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1c9a      	adds	r2, r3, #2
 8001342:	60fa      	str	r2, [r7, #12]
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 800134a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800134e:	2b00      	cmp	r3, #0
 8001350:	dc0c      	bgt.n	800136c <arm_absmax_q15+0x84>
 8001352:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8001356:	2200      	movs	r2, #0
 8001358:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800135a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800135c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800135e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001360:	fad3 f312 	qsub16	r3, r3, r2
 8001364:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8001366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001368:	b21b      	sxth	r3, r3
 800136a:	e001      	b.n	8001370 <arm_absmax_q15+0x88>
 800136c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8001370:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8001374:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8001378:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800137c:	429a      	cmp	r2, r3
 800137e:	dd06      	ble.n	800138e <arm_absmax_q15+0xa6>
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8001380:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001384:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 1U;                                                                                \
 8001388:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800138a:	3301      	adds	r3, #1
 800138c:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1c9a      	adds	r2, r3, #2
 8001392:	60fa      	str	r2, [r7, #12]
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 800139a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc0c      	bgt.n	80013bc <arm_absmax_q15+0xd4>
 80013a2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80013a6:	2200      	movs	r2, #0
 80013a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013b0:	fad3 f312 	qsub16	r3, r3, r2
 80013b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80013b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	e001      	b.n	80013c0 <arm_absmax_q15+0xd8>
 80013bc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80013c0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 80013c4:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80013c8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dd06      	ble.n	80013de <arm_absmax_q15+0xf6>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80013d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80013d4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 2U;                                                                                \
 80013d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80013da:	3302      	adds	r3, #2
 80013dc:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1c9a      	adds	r2, r3, #2
 80013e2:	60fa      	str	r2, [r7, #12]
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80013ea:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dc0c      	bgt.n	800140c <arm_absmax_q15+0x124>
 80013f2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80013f6:	2200      	movs	r2, #0
 80013f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80013fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80013fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001400:	fad3 f312 	qsub16	r3, r3, r2
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8001406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001408:	b21b      	sxth	r3, r3
 800140a:	e001      	b.n	8001410 <arm_absmax_q15+0x128>
 800140c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8001410:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 8001414:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8001418:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800141c:	429a      	cmp	r2, r3
 800141e:	dd06      	ble.n	800142e <arm_absmax_q15+0x146>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001420:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001424:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 3U;                                                                                \
 8001428:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800142a:	3303      	adds	r3, #3
 800142c:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1c9a      	adds	r2, r3, #2
 8001432:	60fa      	str	r2, [r7, #12]
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 800143a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800143e:	2b00      	cmp	r3, #0
 8001440:	dc0c      	bgt.n	800145c <arm_absmax_q15+0x174>
 8001442:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8001446:	2200      	movs	r2, #0
 8001448:	62ba      	str	r2, [r7, #40]	@ 0x28
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800144c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800144e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001450:	fad3 f312 	qsub16	r3, r3, r2
 8001454:	623b      	str	r3, [r7, #32]
  return(result);
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	b21b      	sxth	r3, r3
 800145a:	e001      	b.n	8001460 <arm_absmax_q15+0x178>
 800145c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8001460:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                          \
 8001464:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 8001468:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800146c:	429a      	cmp	r2, r3
 800146e:	dd06      	ble.n	800147e <arm_absmax_q15+0x196>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001470:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001474:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = index + 4U;                                                                                \
 8001478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800147a:	3304      	adds	r3, #4
 800147c:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    index += 4U;                                                                                            \
 800147e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001480:	3304      	adds	r3, #4
 8001482:	663b      	str	r3, [r7, #96]	@ 0x60
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 8001484:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001486:	3b01      	subs	r3, #1
 8001488:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 800148a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800148c:	2b00      	cmp	r3, #0
 800148e:	f47f af56 	bne.w	800133e <arm_absmax_q15+0x56>
  }                                                                                                         \
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	3b01      	subs	r3, #1
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	66bb      	str	r3, [r7, #104]	@ 0x68
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 800149c:	e02b      	b.n	80014f6 <arm_absmax_q15+0x20e>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1c9a      	adds	r2, r3, #2
 80014a2:	60fa      	str	r2, [r7, #12]
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80014aa:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	dc0c      	bgt.n	80014cc <arm_absmax_q15+0x1e4>
 80014b2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80014b6:	2200      	movs	r2, #0
 80014b8:	61fa      	str	r2, [r7, #28]
 80014ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	fad3 f312 	qsub16	r3, r3, r2
 80014c4:	617b      	str	r3, [r7, #20]
  return(result);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	e001      	b.n	80014d0 <arm_absmax_q15+0x1e8>
 80014cc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80014d0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    if (cur_absmax > out)                                                                         \
 80014d4:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80014d8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80014dc:	429a      	cmp	r2, r3
 80014de:	dd07      	ble.n	80014f0 <arm_absmax_q15+0x208>
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80014e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80014e4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      outIndex = blockSize - blkCnt;                                                                        \
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	667b      	str	r3, [r7, #100]	@ 0x64
    }                                                                                                       \
                                                                                                            \
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
 80014f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014f2:	3b01      	subs	r3, #1
 80014f4:	66bb      	str	r3, [r7, #104]	@ 0x68
  while (blkCnt > 0U)                                                                                       \
 80014f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1d0      	bne.n	800149e <arm_absmax_q15+0x1b6>
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001502:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001508:	601a      	str	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	3774      	adds	r7, #116	@ 0x74
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_DMA_Init+0x38>)
 8001520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001522:	4a0b      	ldr	r2, [pc, #44]	@ (8001550 <MX_DMA_Init+0x38>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6493      	str	r3, [r2, #72]	@ 0x48
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_DMA_Init+0x38>)
 800152c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2101      	movs	r1, #1
 800153a:	200b      	movs	r0, #11
 800153c:	f003 fed1 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001540:	200b      	movs	r0, #11
 8001542:	f003 feea 	bl	800531a <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000

08001554 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08e      	sub	sp, #56	@ 0x38
 8001558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156a:	4bb8      	ldr	r3, [pc, #736]	@ (800184c <MX_GPIO_Init+0x2f8>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	4ab7      	ldr	r2, [pc, #732]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001576:	4bb5      	ldr	r3, [pc, #724]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	623b      	str	r3, [r7, #32]
 8001580:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	4bb2      	ldr	r3, [pc, #712]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	4ab1      	ldr	r2, [pc, #708]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158e:	4baf      	ldr	r3, [pc, #700]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800159a:	4bac      	ldr	r3, [pc, #688]	@ (800184c <MX_GPIO_Init+0x2f8>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4aab      	ldr	r2, [pc, #684]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015a0:	f043 0320 	orr.w	r3, r3, #32
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4ba9      	ldr	r3, [pc, #676]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0320 	and.w	r3, r3, #32
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b2:	4ba6      	ldr	r3, [pc, #664]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4aa5      	ldr	r2, [pc, #660]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4ba3      	ldr	r3, [pc, #652]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4ba0      	ldr	r3, [pc, #640]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	4a9f      	ldr	r2, [pc, #636]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d6:	4b9d      	ldr	r3, [pc, #628]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b9a      	ldr	r3, [pc, #616]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	4a99      	ldr	r2, [pc, #612]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ee:	4b97      	ldr	r3, [pc, #604]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fa:	4b94      	ldr	r3, [pc, #592]	@ (800184c <MX_GPIO_Init+0x2f8>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fe:	4a93      	ldr	r2, [pc, #588]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001606:	4b91      	ldr	r3, [pc, #580]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	4b8e      	ldr	r3, [pc, #568]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001616:	4a8d      	ldr	r2, [pc, #564]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161e:	4b8b      	ldr	r3, [pc, #556]	@ (800184c <MX_GPIO_Init+0x2f8>)
 8001620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800162a:	f004 faed 	bl	8005c08 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2101      	movs	r1, #1
 8001632:	4887      	ldr	r0, [pc, #540]	@ (8001850 <MX_GPIO_Init+0x2fc>)
 8001634:	f004 fa54 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800163e:	4885      	ldr	r0, [pc, #532]	@ (8001854 <MX_GPIO_Init+0x300>)
 8001640:	f004 fa4e 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8001644:	2201      	movs	r2, #1
 8001646:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800164a:	4883      	ldr	r0, [pc, #524]	@ (8001858 <MX_GPIO_Init+0x304>)
 800164c:	f004 fa48 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001656:	4881      	ldr	r0, [pc, #516]	@ (800185c <MX_GPIO_Init+0x308>)
 8001658:	f004 fa42 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	2140      	movs	r1, #64	@ 0x40
 8001660:	487f      	ldr	r0, [pc, #508]	@ (8001860 <MX_GPIO_Init+0x30c>)
 8001662:	f004 fa3d 	bl	8005ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE12 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001666:	f24d 73ff 	movw	r3, #55295	@ 0xd7ff
 800166a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166c:	2303      	movs	r3, #3
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	4877      	ldr	r0, [pc, #476]	@ (8001858 <MX_GPIO_Init+0x304>)
 800167c:	f004 f89e 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001680:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001684:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001686:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800168a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	486e      	ldr	r0, [pc, #440]	@ (8001850 <MX_GPIO_Init+0x2fc>)
 8001698:	f004 f890 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800169c:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a2:	2303      	movs	r3, #3
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	4868      	ldr	r0, [pc, #416]	@ (8001854 <MX_GPIO_Init+0x300>)
 80016b2:	f004 f883 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80016b6:	2309      	movs	r3, #9
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ba:	2303      	movs	r3, #3
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	4866      	ldr	r0, [pc, #408]	@ (8001864 <MX_GPIO_Init+0x310>)
 80016ca:	f004 f877 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 80016ce:	2301      	movs	r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e2:	4619      	mov	r1, r3
 80016e4:	485a      	ldr	r0, [pc, #360]	@ (8001850 <MX_GPIO_Init+0x2fc>)
 80016e6:	f004 f869 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80016ea:	f641 73fe 	movw	r3, #8190	@ 0x1ffe
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f0:	2303      	movs	r3, #3
 80016f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4854      	ldr	r0, [pc, #336]	@ (8001850 <MX_GPIO_Init+0x2fc>)
 8001700:	f004 f85c 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8001704:	f248 0336 	movw	r3, #32822	@ 0x8036
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800170a:	2303      	movs	r3, #3
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171c:	f004 f84e 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8001720:	2308      	movs	r3, #8
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001724:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001738:	f004 f840 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800173c:	f64b 7377 	movw	r3, #49015	@ 0xbf77
 8001740:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001742:	2303      	movs	r3, #3
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174e:	4619      	mov	r1, r3
 8001750:	4842      	ldr	r0, [pc, #264]	@ (800185c <MX_GPIO_Init+0x308>)
 8001752:	f004 f833 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8001756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	4839      	ldr	r0, [pc, #228]	@ (8001854 <MX_GPIO_Init+0x300>)
 8001770:	f004 f824 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001774:	f64f 631f 	movw	r3, #65055	@ 0xfe1f
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177a:	2303      	movs	r3, #3
 800177c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4835      	ldr	r0, [pc, #212]	@ (8001860 <MX_GPIO_Init+0x30c>)
 800178a:	f004 f817 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 800178e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001794:	2301      	movs	r3, #1
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a4:	4619      	mov	r1, r3
 80017a6:	482c      	ldr	r0, [pc, #176]	@ (8001858 <MX_GPIO_Init+0x304>)
 80017a8:	f004 f808 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80017ac:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	4825      	ldr	r0, [pc, #148]	@ (800185c <MX_GPIO_Init+0x308>)
 80017c6:	f003 fff9 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80017ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d0:	2303      	movs	r3, #3
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017dc:	4619      	mov	r1, r3
 80017de:	4822      	ldr	r0, [pc, #136]	@ (8001868 <MX_GPIO_Init+0x314>)
 80017e0:	f003 ffec 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017e4:	2320      	movs	r3, #32
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	481a      	ldr	r0, [pc, #104]	@ (8001860 <MX_GPIO_Init+0x30c>)
 80017f8:	f003 ffe0 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017fc:	2340      	movs	r3, #64	@ 0x40
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001800:	2301      	movs	r3, #1
 8001802:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4813      	ldr	r0, [pc, #76]	@ (8001860 <MX_GPIO_Init+0x30c>)
 8001814:	f003 ffd2 	bl	80057bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001818:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800182a:	230a      	movs	r3, #10
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001838:	f003 ffc0 	bl	80057bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2009      	movs	r0, #9
 8001842:	f003 fd4e 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001846:	2009      	movs	r0, #9
 8001848:	e010      	b.n	800186c <MX_GPIO_Init+0x318>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	48000800 	.word	0x48000800
 8001854:	48001400 	.word	0x48001400
 8001858:	48001000 	.word	0x48001000
 800185c:	48000400 	.word	0x48000400
 8001860:	48001800 	.word	0x48001800
 8001864:	48001c00 	.word	0x48001c00
 8001868:	48000c00 	.word	0x48000c00
 800186c:	f003 fd55 	bl	800531a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	2028      	movs	r0, #40	@ 0x28
 8001876:	f003 fd34 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800187a:	2028      	movs	r0, #40	@ 0x28
 800187c:	f003 fd4d 	bl	800531a <HAL_NVIC_EnableIRQ>

}
 8001880:	bf00      	nop
 8001882:	3738      	adds	r7, #56	@ 0x38
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) {
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001898:	d103      	bne.n	80018a2 <HAL_GPIO_EXTI_Callback+0x1a>
		btn_press = 1;
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_GPIO_EXTI_Callback+0x2c>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
		S2LP_IRQ_Handler();
}
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == RADIO_INT_Pin)
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d101      	bne.n	80018ac <HAL_GPIO_EXTI_Callback+0x24>
		S2LP_IRQ_Handler();
 80018a8:	f001 fb30 	bl	8002f0c <S2LP_IRQ_Handler>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20003bf4 	.word	0x20003bf4

080018b8 <acquire_and_send_packet>:

static void acquire_and_send_packet() {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 80018bc:	2014      	movs	r0, #20
 80018be:	f7fe ff61 	bl	8000784 <StartADCAcq>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <acquire_and_send_packet+0x1a>
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 80018c8:	4806      	ldr	r0, [pc, #24]	@ (80018e4 <acquire_and_send_packet+0x2c>)
 80018ca:	f008 fecf 	bl	800a66c <puts>
	}
	while (!IsADCFinished()) {
 80018ce:	e000      	b.n	80018d2 <acquire_and_send_packet+0x1a>
		__WFI();
 80018d0:	bf30      	wfi
	while (!IsADCFinished()) {
 80018d2:	f7fe ff7b 	bl	80007cc <IsADCFinished>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f9      	beq.n	80018d0 <acquire_and_send_packet+0x18>
	}
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	0800b59c 	.word	0x0800b59c

080018e8 <run>:

void run(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	btn_press = 0;
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <run+0x54>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]

	while (1)
	{
	  while (!btn_press) {
 80018f2:	e00f      	b.n	8001914 <run+0x2c>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	2180      	movs	r1, #128	@ 0x80
 80018f8:	4811      	ldr	r0, [pc, #68]	@ (8001940 <run+0x58>)
 80018fa:	f004 f8f1 	bl	8005ae0 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 80018fe:	20c8      	movs	r0, #200	@ 0xc8
 8001900:	f001 ff9a 	bl	8003838 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	2180      	movs	r1, #128	@ 0x80
 8001908:	480d      	ldr	r0, [pc, #52]	@ (8001940 <run+0x58>)
 800190a:	f004 f8e9 	bl	8005ae0 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 800190e:	20c8      	movs	r0, #200	@ 0xc8
 8001910:	f001 ff92 	bl	8003838 <HAL_Delay>
	  while (!btn_press) {
 8001914:	4b09      	ldr	r3, [pc, #36]	@ (800193c <run+0x54>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0ea      	beq.n	80018f4 <run+0xc>
	  }
	  btn_press = 0;
 800191e:	4b07      	ldr	r3, [pc, #28]	@ (800193c <run+0x54>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
#if (CONTINUOUS_ACQ == 1)
	  while (!btn_press) {
 8001924:	e001      	b.n	800192a <run+0x42>
		  acquire_and_send_packet();
 8001926:	f7ff ffc7 	bl	80018b8 <acquire_and_send_packet>
	  while (!btn_press) {
 800192a:	4b04      	ldr	r3, [pc, #16]	@ (800193c <run+0x54>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f8      	beq.n	8001926 <run+0x3e>
	  }
	  btn_press = 0;
 8001934:	4b01      	ldr	r3, [pc, #4]	@ (800193c <run+0x54>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
	  while (!btn_press) {
 800193a:	e7eb      	b.n	8001914 <run+0x2c>
 800193c:	20003bf4 	.word	0x20003bf4
 8001940:	48000400 	.word	0x48000400

08001944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194a:	f001 ff00 	bl	800374e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800194e:	f000 f855 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001952:	f7ff fdff 	bl	8001554 <MX_GPIO_Init>
  MX_DMA_Init();
 8001956:	f7ff fddf 	bl	8001518 <MX_DMA_Init>
  MX_SPI1_Init();
 800195a:	f001 fbc3 	bl	80030e4 <MX_SPI1_Init>
  MX_TIM3_Init();
 800195e:	f001 fd3f 	bl	80033e0 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001962:	f7fe fe0d 	bl	8000580 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  if (ENABLE_UART) {
	  MX_LPUART1_UART_Init();
 8001966:	f001 fdaf 	bl	80034c8 <MX_LPUART1_UART_Init>
  }

  RetargetInit(&hlpuart1);
 800196a:	481b      	ldr	r0, [pc, #108]	@ (80019d8 <main+0x94>)
 800196c:	f000 f972 	bl	8001c54 <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 8001970:	481a      	ldr	r0, [pc, #104]	@ (80019dc <main+0x98>)
 8001972:	f008 fe7b 	bl	800a66c <puts>

#if ENABLE_RADIO
  // Enable S2LP Radio
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8001976:	481a      	ldr	r0, [pc, #104]	@ (80019e0 <main+0x9c>)
 8001978:	f001 fa26 	bl	8002dc8 <S2LP_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  if (err)  {
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <main+0x52>
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4619      	mov	r1, r3
 800198a:	4816      	ldr	r0, [pc, #88]	@ (80019e4 <main+0xa0>)
 800198c:	f008 fe06 	bl	800a59c <iprintf>
	  Error_Handler();
 8001990:	f000 f87a 	bl	8001a88 <Error_Handler>
 8001994:	e002      	b.n	800199c <main+0x58>
  } else {
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 8001996:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <main+0xa4>)
 8001998:	f008 fe68 	bl	800a66c <puts>
  }
#endif

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 800199c:	217f      	movs	r1, #127	@ 0x7f
 800199e:	4813      	ldr	r0, [pc, #76]	@ (80019ec <main+0xa8>)
 80019a0:	f003 fab4 	bl	8004f0c <HAL_ADCEx_Calibration_Start>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <main+0x70>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 80019aa:	4811      	ldr	r0, [pc, #68]	@ (80019f0 <main+0xac>)
 80019ac:	f008 fe5e 	bl	800a66c <puts>
	  Error_Handler();
 80019b0:	f000 f86a 	bl	8001a88 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 80019b4:	480f      	ldr	r0, [pc, #60]	@ (80019f4 <main+0xb0>)
 80019b6:	f006 f8bd 	bl	8007b34 <HAL_TIM_Base_Start>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <main+0x86>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 80019c0:	480d      	ldr	r0, [pc, #52]	@ (80019f8 <main+0xb4>)
 80019c2:	f008 fe53 	bl	800a66c <puts>
	  Error_Handler();
 80019c6:	f000 f85f 	bl	8001a88 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if (RUN_CONFIG == MAIN_APP)
  run();
 80019ca:	f7ff ff8d 	bl	80018e8 <run>
 80019ce:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20004ab8 	.word	0x20004ab8
 80019dc:	0800b5bc 	.word	0x0800b5bc
 80019e0:	20004a04 	.word	0x20004a04
 80019e4:	0800b5cc 	.word	0x0800b5cc
 80019e8:	0800b5f4 	.word	0x0800b5f4
 80019ec:	20003018 	.word	0x20003018
 80019f0:	0800b604 	.word	0x0800b604
 80019f4:	20004a6c 	.word	0x20004a6c
 80019f8:	0800b628 	.word	0x0800b628

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b096      	sub	sp, #88	@ 0x58
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	2244      	movs	r2, #68	@ 0x44
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f008 ffc2 	bl	800a994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	463b      	mov	r3, r7
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a22:	f004 f89b 	bl	8005b5c <HAL_PWREx_ControlVoltageScaling>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001a2c:	f000 f82c 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a30:	2310      	movs	r3, #16
 8001a32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a34:	2301      	movs	r3, #1
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001a3c:	23b0      	movs	r3, #176	@ 0xb0
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 f8ed 	bl	8005c28 <HAL_RCC_OscConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001a54:	f000 f818 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a58:	230f      	movs	r3, #15
 8001a5a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f004 fcf3 	bl	800645c <HAL_RCC_ClockConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a7c:	f000 f804 	bl	8001a88 <Error_Handler>
  }
}
 8001a80:	bf00      	nop
 8001a82:	3758      	adds	r7, #88	@ 0x58
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8e:	b672      	cpsid	i
}
 8001a90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 8001a92:	4817      	ldr	r0, [pc, #92]	@ (8001af0 <Error_Handler+0x68>)
 8001a94:	f008 fdea 	bl	800a66c <puts>
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a9e:	4815      	ldr	r0, [pc, #84]	@ (8001af4 <Error_Handler+0x6c>)
 8001aa0:	f004 f81e 	bl	8005ae0 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	e002      	b.n	8001ab0 <Error_Handler+0x28>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3301      	adds	r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <Error_Handler+0x70>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a11      	ldr	r2, [pc, #68]	@ (8001afc <Error_Handler+0x74>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	099b      	lsrs	r3, r3, #6
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d8f3      	bhi.n	8001aaa <Error_Handler+0x22>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ac8:	480a      	ldr	r0, [pc, #40]	@ (8001af4 <Error_Handler+0x6c>)
 8001aca:	f004 f809 	bl	8005ae0 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	e002      	b.n	8001ada <Error_Handler+0x52>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <Error_Handler+0x70>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <Error_Handler+0x74>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d8f3      	bhi.n	8001ad4 <Error_Handler+0x4c>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001aec:	e7d4      	b.n	8001a98 <Error_Handler+0x10>
 8001aee:	bf00      	nop
 8001af0:	0800b64c 	.word	0x0800b64c
 8001af4:	48000400 	.word	0x48000400
 8001af8:	20002f94 	.word	0x20002f94
 8001afc:	51eb851f 	.word	0x51eb851f

08001b00 <tag_cbc_mac>:
                            0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00};

void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	@ 0x38
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
	// Allocate a buffer of the key size to store the input and result of AES
	// uint32_t[4] is 4*(32/8)= 16 bytes long
	uint32_t statew[4] = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
	// state is a pointer to the start of the buffer
	uint8_t *state = (uint8_t*) statew;
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28

    // AES128_encrypt (block, key)
    // TO DO : Complete the CBC-MAC_AES

    // Copy the result of CBC-MAC-AES to the tag.
    for (i = 0; i < (msg_len + 15) / 16; i++) {
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b24:	e026      	b.n	8001b74 <tag_cbc_mac+0x74>
		// XOR the message portion to the state
		for (size_t j = 0; j < 16; j++) {
 8001b26:	2300      	movs	r3, #0
 8001b28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b2a:	e019      	b.n	8001b60 <tag_cbc_mac+0x60>
			size_t msg_index = (i * 16) + j;
 8001b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b32:	4413      	add	r3, r2
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
			if (msg_index < msg_len) {  // Ensure within bounds
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d20d      	bcs.n	8001b5a <tag_cbc_mac+0x5a>
				state[j] ^= msg[msg_index];
 8001b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b42:	4413      	add	r3, r2
 8001b44:	7819      	ldrb	r1, [r3, #0]
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	4413      	add	r3, r2
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b52:	4403      	add	r3, r0
 8001b54:	404a      	eors	r2, r1
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	701a      	strb	r2, [r3, #0]
		for (size_t j = 0; j < 16; j++) {
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b62:	2b0f      	cmp	r3, #15
 8001b64:	d9e2      	bls.n	8001b2c <tag_cbc_mac+0x2c>
			}
		}

		// Encrypt the state with AES
		AES128_encrypt(state, AES_Key);
 8001b66:	4911      	ldr	r1, [pc, #68]	@ (8001bac <tag_cbc_mac+0xac>)
 8001b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b6a:	f7ff fb17 	bl	800119c <AES128_encrypt>
    for (i = 0; i < (msg_len + 15) / 16; i++) {
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b70:	3301      	adds	r3, #1
 8001b72:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	330f      	adds	r3, #15
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d3d2      	bcc.n	8001b26 <tag_cbc_mac+0x26>
	}
    // Transfer the state to the tag
    for (size_t j=0; j<16; j++) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b84:	e00a      	b.n	8001b9c <tag_cbc_mac+0x9c>
    	tag[j] = state[j];
 8001b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b8a:	441a      	add	r2, r3
 8001b8c:	68f9      	ldr	r1, [r7, #12]
 8001b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b90:	440b      	add	r3, r1
 8001b92:	7812      	ldrb	r2, [r2, #0]
 8001b94:	701a      	strb	r2, [r3, #0]
    for (size_t j=0; j<16; j++) {
 8001b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b98:	3301      	adds	r3, #1
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9e:	2b0f      	cmp	r3, #15
 8001ba0:	d9f1      	bls.n	8001b86 <tag_cbc_mac+0x86>
    }
}
 8001ba2:	bf00      	nop
 8001ba4:	bf00      	nop
 8001ba6:	3738      	adds	r7, #56	@ 0x38
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	0800b998 	.word	0x0800b998

08001bb0 <make_packet>:

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	71fb      	strb	r3, [r7, #7]
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	617b      	str	r3, [r7, #20]
    // Initially, the whole packet header is set to 0s
    memset(packet, 0, PACKET_HEADER_LENGTH);
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	2100      	movs	r1, #0
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f008 fee2 	bl	800a994 <memset>
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	2210      	movs	r2, #16
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f008 fed9 	bl	800a994 <memset>

	// TO DO :  replace the two previous command by properly

	// Set the reserved field to 0
	packet[0] = 0x00;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
	// Set the emitter_id field
	packet[1] = sender_id;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	79fa      	ldrb	r2, [r7, #7]
 8001bee:	701a      	strb	r2, [r3, #0]
	// Set the payload_length field
	packet[2] = (payload_len >> 8) & 0xFF;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	0a1a      	lsrs	r2, r3, #8
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
	packet[3] = payload_len & 0xFF;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3303      	adds	r3, #3
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]
	// Set the packet_serial field
	packet[4] = (serial >> 24) & 0xFF;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	0e1a      	lsrs	r2, r3, #24
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]
	packet[5] = (serial >> 16) & 0xFF;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	0c1a      	lsrs	r2, r3, #16
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3305      	adds	r3, #5
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]
	packet[6] = (serial >> 8) & 0xFF;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	0a1a      	lsrs	r2, r3, #8
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3306      	adds	r3, #6
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
	packet[7] = serial & 0xFF;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3307      	adds	r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]
	 *		 	This will be helpful when setting fields that are on multiple bytes.
	*/

	// For the tag field, you have to calculate the tag. The function call below is correct but
	// tag_cbc_mac function, calculating the tag, is not implemented.
    tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	3308      	adds	r3, #8
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	18d0      	adds	r0, r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3308      	adds	r3, #8
 8001c40:	461a      	mov	r2, r3
 8001c42:	68f9      	ldr	r1, [r7, #12]
 8001c44:	f7ff ff5c 	bl	8001b00 <tag_cbc_mac>

    return packet_len;
 8001c48:	697b      	ldr	r3, [r7, #20]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001c5c:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <RetargetInit+0x28>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001c62:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <RetargetInit+0x2c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6898      	ldr	r0, [r3, #8]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	f008 fd05 	bl	800a67c <setvbuf>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20003bf8 	.word	0x20003bf8
 8001c80:	20002fac 	.word	0x20002fac

08001c84 <_isatty>:

int _isatty(int fd) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db04      	blt.n	8001c9c <_isatty+0x18>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	dc01      	bgt.n	8001c9c <_isatty+0x18>
    return 1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e005      	b.n	8001ca8 <_isatty+0x24>

  errno = EBADF;
 8001c9c:	f008 fec8 	bl	800aa30 <__errno>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2209      	movs	r2, #9
 8001ca4:	601a      	str	r2, [r3, #0]
  return 0;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <_write>:

int _write(int fd, char* ptr, int len) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d002      	beq.n	8001cc8 <_write+0x18>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d111      	bne.n	8001cec <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <_write+0x54>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	f006 fbcb 	bl	8008470 <HAL_UART_Transmit>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <_write+0x38>
      return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	e008      	b.n	8001cfa <_write+0x4a>
    else
      return EIO;
 8001ce8:	2305      	movs	r3, #5
 8001cea:	e006      	b.n	8001cfa <_write+0x4a>
  }
  errno = EBADF;
 8001cec:	f008 fea0 	bl	800aa30 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2209      	movs	r2, #9
 8001cf4:	601a      	str	r2, [r3, #0]
  return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20003bf8 	.word	0x20003bf8

08001d08 <_close>:

int _close(int fd) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db04      	blt.n	8001d20 <_close+0x18>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	dc01      	bgt.n	8001d20 <_close+0x18>
    return 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e006      	b.n	8001d2e <_close+0x26>

  errno = EBADF;
 8001d20:	f008 fe86 	bl	800aa30 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2209      	movs	r2, #9
 8001d28:	601a      	str	r2, [r3, #0]
  return -1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001d42:	f008 fe75 	bl	800aa30 <__errno>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2209      	movs	r2, #9
 8001d4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <_read>:

int _read(int fd, char* ptr, int len) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d110      	bne.n	8001d8c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <_read+0x4c>)
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	2201      	movs	r2, #1
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	f006 fc04 	bl	8008582 <HAL_UART_Receive>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <_read+0x30>
      return 1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e008      	b.n	8001d9a <_read+0x42>
    else
      return EIO;
 8001d88:	2305      	movs	r3, #5
 8001d8a:	e006      	b.n	8001d9a <_read+0x42>
  }
  errno = EBADF;
 8001d8c:	f008 fe50 	bl	800aa30 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2209      	movs	r2, #9
 8001d94:	601a      	str	r2, [r3, #0]
  return -1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20003bf8 	.word	0x20003bf8

08001da8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db08      	blt.n	8001dca <_fstat+0x22>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	dc05      	bgt.n	8001dca <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc4:	605a      	str	r2, [r3, #4]
    return 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e005      	b.n	8001dd6 <_fstat+0x2e>
  }

  errno = EBADF;
 8001dca:	f008 fe31 	bl	800aa30 <__errno>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2209      	movs	r2, #9
 8001dd2:	601a      	str	r2, [r3, #0]
  return 0;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af02      	add	r7, sp, #8
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	733b      	strb	r3, [r7, #12]
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	737b      	strb	r3, [r7, #13]
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	480f      	ldr	r0, [pc, #60]	@ (8001e3c <S2LP_Command+0x5c>)
 8001dfe:	f003 fe6f 	bl	8005ae0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <S2LP_Command+0x60>)
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	f107 0208 	add.w	r2, r7, #8
 8001e0a:	f107 010c 	add.w	r1, r7, #12
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2302      	movs	r3, #2
 8001e16:	f005 fab2 	bl	800737e <HAL_SPI_TransmitReceive>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2101      	movs	r1, #1
 8001e22:	4806      	ldr	r0, [pc, #24]	@ (8001e3c <S2LP_Command+0x5c>)
 8001e24:	f003 fe5c 	bl	8005ae0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e28:	b662      	cpsie	i
}
 8001e2a:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001e2c:	893a      	ldrh	r2, [r7, #8]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	801a      	strh	r2, [r3, #0]
	return err;
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	48000800 	.word	0x48000800
 8001e40:	20003bfc 	.word	0x20003bfc

08001e44 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af02      	add	r7, sp, #8
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 8001e52:	2301      	movs	r3, #1
 8001e54:	753b      	strb	r3, [r7, #20]
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	757b      	strb	r3, [r7, #21]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5e:	b672      	cpsid	i
}
 8001e60:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2101      	movs	r1, #1
 8001e66:	4814      	ldr	r0, [pc, #80]	@ (8001eb8 <S2LP_ReadReg+0x74>)
 8001e68:	f003 fe3a 	bl	8005ae0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <S2LP_ReadReg+0x78>)
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	f107 0210 	add.w	r2, r7, #16
 8001e74:	f107 0114 	add.w	r1, r7, #20
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2303      	movs	r3, #3
 8001e80:	f005 fa7d 	bl	800737e <HAL_SPI_TransmitReceive>
 8001e84:	4603      	mov	r3, r0
 8001e86:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	480a      	ldr	r0, [pc, #40]	@ (8001eb8 <S2LP_ReadReg+0x74>)
 8001e8e:	f003 fe27 	bl	8005ae0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e92:	b662      	cpsie	i
}
 8001e94:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 8001e9c:	8a3a      	ldrh	r2, [r7, #16]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 8001ea8:	7cba      	ldrb	r2, [r7, #18]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	701a      	strb	r2, [r3, #0]
	return err;
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	48000800 	.word	0x48000800
 8001ebc:	20003bfc 	.word	0x20003bfc

08001ec0 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	603a      	str	r2, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	733b      	strb	r3, [r7, #12]
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	737b      	strb	r3, [r7, #13]
 8001ed8:	79bb      	ldrb	r3, [r7, #6]
 8001eda:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4811      	ldr	r0, [pc, #68]	@ (8001f2c <S2LP_WriteReg+0x6c>)
 8001ee6:	f003 fdfb 	bl	8005ae0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001eea:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <S2LP_WriteReg+0x70>)
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	f107 0208 	add.w	r2, r7, #8
 8001ef2:	f107 010c 	add.w	r1, r7, #12
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2303      	movs	r3, #3
 8001efe:	f005 fa3e 	bl	800737e <HAL_SPI_TransmitReceive>
 8001f02:	4603      	mov	r3, r0
 8001f04:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4808      	ldr	r0, [pc, #32]	@ (8001f2c <S2LP_WriteReg+0x6c>)
 8001f0c:	f003 fde8 	bl	8005ae0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 8001f1a:	893a      	ldrh	r2, [r7, #8]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	801a      	strh	r2, [r3, #0]
	return err;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	20003bfc 	.word	0x20003bfc

08001f34 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b08d      	sub	sp, #52	@ 0x34
 8001f38:	af02      	add	r7, sp, #8
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 8001f46:	23ff      	movs	r3, #255	@ 0xff
 8001f48:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 8001f4a:	7afa      	ldrb	r2, [r7, #11]
 8001f4c:	f107 031c 	add.w	r3, r7, #28
 8001f50:	3302      	adds	r3, #2
 8001f52:	68f9      	ldr	r1, [r7, #12]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f008 fd98 	bl	800aa8a <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5a:	b672      	cpsid	i
}
 8001f5c:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2101      	movs	r1, #1
 8001f62:	4814      	ldr	r0, [pc, #80]	@ (8001fb4 <S2LP_WriteTxFIFO+0x80>)
 8001f64:	f003 fdbc 	bl	8005ae0 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 8001f68:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <S2LP_WriteTxFIFO+0x84>)
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3302      	adds	r3, #2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	f107 0210 	add.w	r2, r7, #16
 8001f78:	f107 011c 	add.w	r1, r7, #28
 8001f7c:	f04f 34ff 	mov.w	r4, #4294967295
 8001f80:	9400      	str	r4, [sp, #0]
 8001f82:	f005 f9fc 	bl	800737e <HAL_SPI_TransmitReceive>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4808      	ldr	r0, [pc, #32]	@ (8001fb4 <S2LP_WriteTxFIFO+0x80>)
 8001f92:	f003 fda5 	bl	8005ae0 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001f96:	b662      	cpsie	i
}
 8001f98:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d002      	beq.n	8001fa6 <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 8001fa0:	8a3a      	ldrh	r2, [r7, #16]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	801a      	strh	r2, [r3, #0]
	return err;
 8001fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	372c      	adds	r7, #44	@ 0x2c
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	48000800 	.word	0x48000800
 8001fb8:	20003bfc 	.word	0x20003bfc

08001fbc <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	4619      	mov	r1, r3
 8001fce:	2072      	movs	r0, #114	@ 0x72
 8001fd0:	f7ff ff06 	bl	8001de0 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001fd4:	7b7b      	ldrb	r3, [r7, #13]
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d004      	beq.n	8001fea <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 8001fe0:	4864      	ldr	r0, [pc, #400]	@ (8002174 <S2LP_Send+0x1b8>)
 8001fe2:	f008 fb43 	bl	800a66c <puts>
		return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e0c0      	b.n	800216c <S2LP_Send+0x1b0>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8001fea:	4b63      	ldr	r3, [pc, #396]	@ (8002178 <S2LP_Send+0x1bc>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 8001ff0:	4b62      	ldr	r3, [pc, #392]	@ (800217c <S2LP_Send+0x1c0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8001ff6:	4b62      	ldr	r3, [pc, #392]	@ (8002180 <S2LP_Send+0x1c4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	0a1b      	lsrs	r3, r3, #8
 8002000:	b29b      	uxth	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	2031      	movs	r0, #49	@ 0x31
 800200a:	f7ff ff59 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2200      	movs	r2, #0
 8002014:	4619      	mov	r1, r3
 8002016:	2032      	movs	r0, #50	@ 0x32
 8002018:	f7ff ff52 	bl	8001ec0 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 800201c:	e00f      	b.n	800203e <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	4619      	mov	r1, r3
 8002024:	2066      	movs	r0, #102	@ 0x66
 8002026:	f7ff fedb 	bl	8001de0 <S2LP_Command>
 800202a:	4603      	mov	r3, r0
 800202c:	73bb      	strb	r3, [r7, #14]
		if (err) {
 800202e:	7bbb      	ldrb	r3, [r7, #14]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d004      	beq.n	800203e <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 8002034:	4853      	ldr	r0, [pc, #332]	@ (8002184 <S2LP_Send+0x1c8>)
 8002036:	f008 fb19 	bl	800a66c <puts>
			return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e096      	b.n	800216c <S2LP_Send+0x1b0>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 800203e:	7b7b      	ldrb	r3, [r7, #13]
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b18      	cmp	r3, #24
 8002048:	d1e9      	bne.n	800201e <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	08db      	lsrs	r3, r3, #3
 8002052:	b29b      	uxth	r3, r3
 8002054:	887a      	ldrh	r2, [r7, #2]
 8002056:	f002 0207 	and.w	r2, r2, #7
 800205a:	b292      	uxth	r2, r2
 800205c:	2a00      	cmp	r2, #0
 800205e:	bf14      	ite	ne
 8002060:	2201      	movne	r2, #1
 8002062:	2200      	moveq	r2, #0
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	4413      	add	r3, r2
 8002068:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 800206a:	2310      	movs	r3, #16
 800206c:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 800206e:	2300      	movs	r3, #0
 8002070:	827b      	strh	r3, [r7, #18]
 8002072:	e063      	b.n	800213c <S2LP_Send+0x180>
		if (underflow) {
 8002074:	4b41      	ldr	r3, [pc, #260]	@ (800217c <S2LP_Send+0x1c0>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d02f      	beq.n	80020de <S2LP_Send+0x122>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 800207e:	4842      	ldr	r0, [pc, #264]	@ (8002188 <S2LP_Send+0x1cc>)
 8002080:	f008 faf4 	bl	800a66c <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	461a      	mov	r2, r3
 800208a:	2100      	movs	r1, #0
 800208c:	2000      	movs	r0, #0
 800208e:	f7ff fed9 	bl	8001e44 <S2LP_ReadReg>
 8002092:	4603      	mov	r3, r0
 8002094:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8002096:	7bbb      	ldrb	r3, [r7, #14]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <S2LP_Send+0xec>
				S2LP_PrintStatus(&radio_status);
 800209c:	f107 030c 	add.w	r3, r7, #12
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 f879 	bl	8002198 <S2LP_PrintStatus>
 80020a6:	e002      	b.n	80020ae <S2LP_Send+0xf2>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 80020a8:	4838      	ldr	r0, [pc, #224]	@ (800218c <S2LP_Send+0x1d0>)
 80020aa:	f008 fadf 	bl	800a66c <puts>
			}
			return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e05c      	b.n	800216c <S2LP_Send+0x1b0>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d107      	bne.n	80020c8 <S2LP_Send+0x10c>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	2060      	movs	r0, #96	@ 0x60
 80020c0:	f7ff fe8e 	bl	8001de0 <S2LP_Command>
				sending = 1;
 80020c4:	2301      	movs	r3, #1
 80020c6:	75fb      	strb	r3, [r7, #23]
			}

			__WFI();
 80020c8:	bf30      	wfi
			if (fifo_almost_empty) {
 80020ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002180 <S2LP_Send+0x1c4>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <S2LP_Send+0x122>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 80020d4:	230c      	movs	r3, #12
 80020d6:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 80020d8:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <S2LP_Send+0x1c4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 80020de:	8abb      	ldrh	r3, [r7, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0e6      	beq.n	80020b2 <S2LP_Send+0xf6>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 80020e4:	8a7a      	ldrh	r2, [r7, #18]
 80020e6:	8a3b      	ldrh	r3, [r7, #16]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d109      	bne.n	8002102 <S2LP_Send+0x146>
 80020ee:	887b      	ldrh	r3, [r7, #2]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	8a3b      	ldrh	r3, [r7, #16]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	e000      	b.n	8002104 <S2LP_Send+0x148>
 8002102:	2308      	movs	r3, #8
 8002104:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 8002106:	8a7b      	ldrh	r3, [r7, #18]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	f107 020c 	add.w	r2, r7, #12
 8002114:	7bf9      	ldrb	r1, [r7, #15]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff0c 	bl	8001f34 <S2LP_WriteTxFIFO>
 800211c:	4603      	mov	r3, r0
 800211e:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <S2LP_Send+0x174>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 8002126:	481a      	ldr	r0, [pc, #104]	@ (8002190 <S2LP_Send+0x1d4>)
 8002128:	f008 faa0 	bl	800a66c <puts>
			return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e01d      	b.n	800216c <S2LP_Send+0x1b0>
		}
		free_chunks--;
 8002130:	8abb      	ldrh	r3, [r7, #20]
 8002132:	3b01      	subs	r3, #1
 8002134:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 8002136:	8a7b      	ldrh	r3, [r7, #18]
 8002138:	3301      	adds	r3, #1
 800213a:	827b      	strh	r3, [r7, #18]
 800213c:	8a7a      	ldrh	r2, [r7, #18]
 800213e:	8a3b      	ldrh	r3, [r7, #16]
 8002140:	429a      	cmp	r2, r3
 8002142:	d397      	bcc.n	8002074 <S2LP_Send+0xb8>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8002144:	7dfb      	ldrb	r3, [r7, #23]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <S2LP_Send+0x19e>
		S2LP_Command(CMD_TX, &radio_status);
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4619      	mov	r1, r3
 8002150:	2060      	movs	r0, #96	@ 0x60
 8002152:	f7ff fe45 	bl	8001de0 <S2LP_Command>
	}

	while (!packet_sent) {
 8002156:	e000      	b.n	800215a <S2LP_Send+0x19e>
		__WFI(); // wait until packet has been fully transmitted
 8002158:	bf30      	wfi
	while (!packet_sent) {
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <S2LP_Send+0x1bc>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f9      	beq.n	8002158 <S2LP_Send+0x19c>
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 8002164:	480b      	ldr	r0, [pc, #44]	@ (8002194 <S2LP_Send+0x1d8>)
 8002166:	f008 fa81 	bl	800a66c <puts>
	return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	0800b664 	.word	0x0800b664
 8002178:	20003c00 	.word	0x20003c00
 800217c:	20003c02 	.word	0x20003c02
 8002180:	20003c01 	.word	0x20003c01
 8002184:	0800b688 	.word	0x0800b688
 8002188:	0800b6ac 	.word	0x0800b6ac
 800218c:	0800b6dc 	.word	0x0800b6dc
 8002190:	0800b70c 	.word	0x0800b70c
 8002194:	0800b730 	.word	0x0800b730

08002198 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af02      	add	r7, sp, #8
 800219e:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 80021a0:	486f      	ldr	r0, [pc, #444]	@ (8002360 <S2LP_PrintStatus+0x1c8>)
 80021a2:	f008 fa63 	bl	800a66c <puts>
	DEBUG_PRINT("  MC_STATE: ");
 80021a6:	486f      	ldr	r0, [pc, #444]	@ (8002364 <S2LP_PrintStatus+0x1cc>)
 80021a8:	f008 f9f8 	bl	800a59c <iprintf>
	switch (status->MC_STATE) {
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b5c      	cmp	r3, #92	@ 0x5c
 80021b8:	f000 808f 	beq.w	80022da <S2LP_PrintStatus+0x142>
 80021bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80021be:	f300 8094 	bgt.w	80022ea <S2LP_PrintStatus+0x152>
 80021c2:	2b30      	cmp	r3, #48	@ 0x30
 80021c4:	dc6a      	bgt.n	800229c <S2LP_PrintStatus+0x104>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f2c0 808f 	blt.w	80022ea <S2LP_PrintStatus+0x152>
 80021cc:	2b30      	cmp	r3, #48	@ 0x30
 80021ce:	f200 808c 	bhi.w	80022ea <S2LP_PrintStatus+0x152>
 80021d2:	a201      	add	r2, pc, #4	@ (adr r2, 80021d8 <S2LP_PrintStatus+0x40>)
 80021d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d8:	080022a3 	.word	0x080022a3
 80021dc:	080022bb 	.word	0x080022bb
 80021e0:	080022ab 	.word	0x080022ab
 80021e4:	080022b3 	.word	0x080022b3
 80021e8:	080022eb 	.word	0x080022eb
 80021ec:	080022eb 	.word	0x080022eb
 80021f0:	080022eb 	.word	0x080022eb
 80021f4:	080022eb 	.word	0x080022eb
 80021f8:	080022eb 	.word	0x080022eb
 80021fc:	080022eb 	.word	0x080022eb
 8002200:	080022eb 	.word	0x080022eb
 8002204:	080022eb 	.word	0x080022eb
 8002208:	080022c3 	.word	0x080022c3
 800220c:	080022eb 	.word	0x080022eb
 8002210:	080022eb 	.word	0x080022eb
 8002214:	080022eb 	.word	0x080022eb
 8002218:	080022eb 	.word	0x080022eb
 800221c:	080022eb 	.word	0x080022eb
 8002220:	080022eb 	.word	0x080022eb
 8002224:	080022eb 	.word	0x080022eb
 8002228:	080022d3 	.word	0x080022d3
 800222c:	080022eb 	.word	0x080022eb
 8002230:	080022eb 	.word	0x080022eb
 8002234:	080022eb 	.word	0x080022eb
 8002238:	080022eb 	.word	0x080022eb
 800223c:	080022eb 	.word	0x080022eb
 8002240:	080022eb 	.word	0x080022eb
 8002244:	080022eb 	.word	0x080022eb
 8002248:	080022eb 	.word	0x080022eb
 800224c:	080022eb 	.word	0x080022eb
 8002250:	080022eb 	.word	0x080022eb
 8002254:	080022eb 	.word	0x080022eb
 8002258:	080022eb 	.word	0x080022eb
 800225c:	080022eb 	.word	0x080022eb
 8002260:	080022eb 	.word	0x080022eb
 8002264:	080022eb 	.word	0x080022eb
 8002268:	080022eb 	.word	0x080022eb
 800226c:	080022eb 	.word	0x080022eb
 8002270:	080022eb 	.word	0x080022eb
 8002274:	080022eb 	.word	0x080022eb
 8002278:	080022eb 	.word	0x080022eb
 800227c:	080022eb 	.word	0x080022eb
 8002280:	080022eb 	.word	0x080022eb
 8002284:	080022eb 	.word	0x080022eb
 8002288:	080022eb 	.word	0x080022eb
 800228c:	080022eb 	.word	0x080022eb
 8002290:	080022eb 	.word	0x080022eb
 8002294:	080022eb 	.word	0x080022eb
 8002298:	080022cb 	.word	0x080022cb
 800229c:	2b50      	cmp	r3, #80	@ 0x50
 800229e:	d020      	beq.n	80022e2 <S2LP_PrintStatus+0x14a>
 80022a0:	e023      	b.n	80022ea <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 80022a2:	4831      	ldr	r0, [pc, #196]	@ (8002368 <S2LP_PrintStatus+0x1d0>)
 80022a4:	f008 f97a 	bl	800a59c <iprintf>
			break;
 80022a8:	e023      	b.n	80022f2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 80022aa:	4830      	ldr	r0, [pc, #192]	@ (800236c <S2LP_PrintStatus+0x1d4>)
 80022ac:	f008 f976 	bl	800a59c <iprintf>
			break;
 80022b0:	e01f      	b.n	80022f2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 80022b2:	482f      	ldr	r0, [pc, #188]	@ (8002370 <S2LP_PrintStatus+0x1d8>)
 80022b4:	f008 f972 	bl	800a59c <iprintf>
			break;
 80022b8:	e01b      	b.n	80022f2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 80022ba:	482d      	ldr	r0, [pc, #180]	@ (8002370 <S2LP_PrintStatus+0x1d8>)
 80022bc:	f008 f96e 	bl	800a59c <iprintf>
			break;
 80022c0:	e017      	b.n	80022f2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 80022c2:	482c      	ldr	r0, [pc, #176]	@ (8002374 <S2LP_PrintStatus+0x1dc>)
 80022c4:	f008 f96a 	bl	800a59c <iprintf>
			break;
 80022c8:	e013      	b.n	80022f2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 80022ca:	482b      	ldr	r0, [pc, #172]	@ (8002378 <S2LP_PrintStatus+0x1e0>)
 80022cc:	f008 f966 	bl	800a59c <iprintf>
			break;
 80022d0:	e00f      	b.n	80022f2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 80022d2:	482a      	ldr	r0, [pc, #168]	@ (800237c <S2LP_PrintStatus+0x1e4>)
 80022d4:	f008 f962 	bl	800a59c <iprintf>
			break;
 80022d8:	e00b      	b.n	80022f2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 80022da:	4829      	ldr	r0, [pc, #164]	@ (8002380 <S2LP_PrintStatus+0x1e8>)
 80022dc:	f008 f95e 	bl	800a59c <iprintf>
			break;
 80022e0:	e007      	b.n	80022f2 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 80022e2:	4828      	ldr	r0, [pc, #160]	@ (8002384 <S2LP_PrintStatus+0x1ec>)
 80022e4:	f008 f95a 	bl	800a59c <iprintf>
			break;
 80022e8:	e003      	b.n	80022f2 <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 80022ea:	4827      	ldr	r0, [pc, #156]	@ (8002388 <S2LP_PrintStatus+0x1f0>)
 80022ec:	f008 f956 	bl	800a59c <iprintf>
			break;
 80022f0:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 80022f2:	4826      	ldr	r0, [pc, #152]	@ (800238c <S2LP_PrintStatus+0x1f4>)
 80022f4:	f008 f9ba 	bl	800a66c <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4618      	mov	r0, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	4603      	mov	r3, r0
 800232a:	4819      	ldr	r0, [pc, #100]	@ (8002390 <S2LP_PrintStatus+0x1f8>)
 800232c:	f008 f936 	bl	800a59c <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	4619      	mov	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4810      	ldr	r0, [pc, #64]	@ (8002394 <S2LP_PrintStatus+0x1fc>)
 8002354:	f008 f922 	bl	800a59c <iprintf>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	0800b74c 	.word	0x0800b74c
 8002364:	0800b764 	.word	0x0800b764
 8002368:	0800b774 	.word	0x0800b774
 800236c:	0800b77c 	.word	0x0800b77c
 8002370:	0800b784 	.word	0x0800b784
 8002374:	0800b78c 	.word	0x0800b78c
 8002378:	0800b794 	.word	0x0800b794
 800237c:	0800b798 	.word	0x0800b798
 8002380:	0800b7a0 	.word	0x0800b7a0
 8002384:	0800b7a4 	.word	0x0800b7a4
 8002388:	0800b7b0 	.word	0x0800b7b0
 800238c:	0800b7b8 	.word	0x0800b7b8
 8002390:	0800b7bc 	.word	0x0800b7bc
 8002394:	0800b7fc 	.word	0x0800b7fc

08002398 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8002398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800239c:	b09e      	sub	sp, #120	@ 0x78
 800239e:	af00      	add	r7, sp, #0
 80023a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 80023a2:	2304      	movs	r3, #4
 80023a4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 80023a8:	2301      	movs	r3, #1
 80023aa:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 80023ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023b0:	17da      	asrs	r2, r3, #31
 80023b2:	469a      	mov	sl, r3
 80023b4:	4693      	mov	fp, r2
 80023b6:	ea4f 396a 	mov.w	r9, sl, asr #13
 80023ba:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 80023be:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80023c2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	17da      	asrs	r2, r3, #31
 80023cc:	623b      	str	r3, [r7, #32]
 80023ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80023d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023d4:	4603      	mov	r3, r0
 80023d6:	fb03 f209 	mul.w	r2, r3, r9
 80023da:	460b      	mov	r3, r1
 80023dc:	fb08 f303 	mul.w	r3, r8, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	4602      	mov	r2, r0
 80023e4:	fba8 4502 	umull	r4, r5, r8, r2
 80023e8:	442b      	add	r3, r5
 80023ea:	461d      	mov	r5, r3
 80023ec:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 80023f0:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 80023f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023f8:	a374      	add	r3, pc, #464	@ (adr r3, 80025cc <S2LP_PLLConf+0x234>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fd ff47 	bl	8000290 <__aeabi_uldivmod>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4613      	mov	r3, r2
 8002408:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 800240a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800240c:	2200      	movs	r2, #0
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	61fa      	str	r2, [r7, #28]
 8002412:	4b6b      	ldr	r3, [pc, #428]	@ (80025c0 <S2LP_PLLConf+0x228>)
 8002414:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002418:	462a      	mov	r2, r5
 800241a:	fb03 f202 	mul.w	r2, r3, r2
 800241e:	2300      	movs	r3, #0
 8002420:	4621      	mov	r1, r4
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	4a65      	ldr	r2, [pc, #404]	@ (80025c0 <S2LP_PLLConf+0x228>)
 800242a:	4621      	mov	r1, r4
 800242c:	fba1 1202 	umull	r1, r2, r1, r2
 8002430:	637a      	str	r2, [r7, #52]	@ 0x34
 8002432:	460a      	mov	r2, r1
 8002434:	633a      	str	r2, [r7, #48]	@ 0x30
 8002436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002438:	4413      	add	r3, r2
 800243a:	637b      	str	r3, [r7, #52]	@ 0x34
 800243c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002440:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 8002444:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8002448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800244a:	3301      	adds	r3, #1
 800244c:	2200      	movs	r2, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	617a      	str	r2, [r7, #20]
 8002452:	4b5b      	ldr	r3, [pc, #364]	@ (80025c0 <S2LP_PLLConf+0x228>)
 8002454:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002458:	462a      	mov	r2, r5
 800245a:	fb03 f202 	mul.w	r2, r3, r2
 800245e:	2300      	movs	r3, #0
 8002460:	4621      	mov	r1, r4
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	4a55      	ldr	r2, [pc, #340]	@ (80025c0 <S2LP_PLLConf+0x228>)
 800246a:	4621      	mov	r1, r4
 800246c:	fba1 1202 	umull	r1, r2, r1, r2
 8002470:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002472:	460a      	mov	r2, r1
 8002474:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002478:	4413      	add	r3, r2
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002480:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 8002484:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8002488:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800248c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002490:	1a84      	subs	r4, r0, r2
 8002492:	60bc      	str	r4, [r7, #8]
 8002494:	eb61 0303 	sbc.w	r3, r1, r3
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800249e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024a2:	1a84      	subs	r4, r0, r2
 80024a4:	603c      	str	r4, [r7, #0]
 80024a6:	eb61 0303 	sbc.w	r3, r1, r3
 80024aa:	607b      	str	r3, [r7, #4]
 80024ac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024b0:	4623      	mov	r3, r4
 80024b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024b6:	4602      	mov	r2, r0
 80024b8:	4293      	cmp	r3, r2
 80024ba:	462b      	mov	r3, r5
 80024bc:	460a      	mov	r2, r1
 80024be:	4193      	sbcs	r3, r2
 80024c0:	d202      	bcs.n	80024c8 <S2LP_PLLConf+0x130>
 80024c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024c4:	3301      	adds	r3, #1
 80024c6:	e000      	b.n	80024ca <S2LP_PLLConf+0x132>
 80024c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024ca:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 80024cc:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80024d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 80024d8:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80024dc:	4a38      	ldr	r2, [pc, #224]	@ (80025c0 <S2LP_PLLConf+0x228>)
 80024de:	fb92 f3f3 	sdiv	r3, r2, r3
 80024e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 80024e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024e6:	4a37      	ldr	r2, [pc, #220]	@ (80025c4 <S2LP_PLLConf+0x22c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d911      	bls.n	8002510 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80024ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ee:	4a36      	ldr	r2, [pc, #216]	@ (80025c8 <S2LP_PLLConf+0x230>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d906      	bls.n	8002502 <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 80024f4:	2302      	movs	r3, #2
 80024f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002500:	e017      	b.n	8002532 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8002508:	2301      	movs	r3, #1
 800250a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800250e:	e010      	b.n	8002532 <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002512:	4a2d      	ldr	r2, [pc, #180]	@ (80025c8 <S2LP_PLLConf+0x230>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d906      	bls.n	8002526 <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8002518:	2303      	movs	r3, #3
 800251a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002524:	e005      	b.n	8002532 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 8002526:	2302      	movs	r3, #2
 8002528:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 8002532:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002536:	015b      	lsls	r3, r3, #5
 8002538:	b2da      	uxtb	r2, r3
 800253a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800253c:	0e1b      	lsrs	r3, r3, #24
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4313      	orrs	r3, r2
 8002542:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 8002546:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 800254e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 8002556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002558:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 800255c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	b2db      	uxtb	r3, r3
 8002564:	3b30      	subs	r3, #48	@ 0x30
 8002566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 800256a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800256e:	2200      	movs	r2, #0
 8002570:	4619      	mov	r1, r3
 8002572:	2005      	movs	r0, #5
 8002574:	f7ff fca4 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8002578:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	2006      	movs	r0, #6
 8002582:	f7ff fc9d 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 8002586:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800258a:	2200      	movs	r2, #0
 800258c:	4619      	mov	r1, r3
 800258e:	2007      	movs	r0, #7
 8002590:	f7ff fc96 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 8002594:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002598:	2200      	movs	r2, #0
 800259a:	4619      	mov	r1, r3
 800259c:	2008      	movs	r0, #8
 800259e:	f7ff fc8f 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 80025a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80025a6:	2200      	movs	r2, #0
 80025a8:	4619      	mov	r1, r3
 80025aa:	2065      	movs	r0, #101	@ 0x65
 80025ac:	f7ff fc88 	bl	8001ec0 <S2LP_WriteReg>
}
 80025b0:	bf00      	nop
 80025b2:	3778      	adds	r7, #120	@ 0x78
 80025b4:	46bd      	mov	sp, r7
 80025b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ba:	bf00      	nop
 80025bc:	f3af 8000 	nop.w
 80025c0:	02faf080 	.word	0x02faf080
 80025c4:	d693a3ff 	.word	0xd693a3ff
 80025c8:	01c9c380 	.word	0x01c9c380
 80025cc:	02faf080 	.word	0x02faf080
 80025d0:	00000000 	.word	0x00000000

080025d4 <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 80025d4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80025d8:	b091      	sub	sp, #68	@ 0x44
 80025da:	af00      	add	r7, sp, #0
 80025dc:	4603      	mov	r3, r0
 80025de:	460a      	mov	r2, r1
 80025e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80025e2:	4613      	mov	r3, r2
 80025e4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 80025e8:	4b3f      	ldr	r3, [pc, #252]	@ (80026e8 <ComputeDatarate+0x114>)
 80025ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80025ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025ee:	4b3f      	ldr	r3, [pc, #252]	@ (80026ec <ComputeDatarate+0x118>)
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d902      	bls.n	80025fa <ComputeDatarate+0x26>
    f_dig >>= 1;
 80025f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 80025fa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d128      	bne.n	8002654 <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 8002602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002604:	2200      	movs	r2, #0
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	61fa      	str	r2, [r7, #28]
 800260a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800260c:	2200      	movs	r2, #0
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	617a      	str	r2, [r7, #20]
 8002612:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002616:	462b      	mov	r3, r5
 8002618:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800261c:	4642      	mov	r2, r8
 800261e:	fb02 f203 	mul.w	r2, r2, r3
 8002622:	464b      	mov	r3, r9
 8002624:	4621      	mov	r1, r4
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	4622      	mov	r2, r4
 800262e:	4641      	mov	r1, r8
 8002630:	fba2 ab01 	umull	sl, fp, r2, r1
 8002634:	445b      	add	r3, fp
 8002636:	469b      	mov	fp, r3
 8002638:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 800263c:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 8002640:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	000a      	movs	r2, r1
 800264e:	2300      	movs	r3, #0
 8002650:	4613      	mov	r3, r2
 8002652:	e043      	b.n	80026dc <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 8002654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002656:	2200      	movs	r2, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	60fa      	str	r2, [r7, #12]
 800265c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800265e:	2200      	movs	r2, #0
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002668:	460b      	mov	r3, r1
 800266a:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 800266e:	623b      	str	r3, [r7, #32]
 8002670:	4613      	mov	r3, r2
 8002672:	f143 0300 	adc.w	r3, r3, #0
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
 8002678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800267c:	460b      	mov	r3, r1
 800267e:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8002682:	4652      	mov	r2, sl
 8002684:	fb02 f203 	mul.w	r2, r2, r3
 8002688:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 800268c:	465b      	mov	r3, fp
 800268e:	4682      	mov	sl, r0
 8002690:	468b      	mov	fp, r1
 8002692:	4651      	mov	r1, sl
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	4652      	mov	r2, sl
 800269c:	6a39      	ldr	r1, [r7, #32]
 800269e:	fba2 4501 	umull	r4, r5, r2, r1
 80026a2:	442b      	add	r3, r5
 80026a4:	461d      	mov	r5, r3
 80026a6:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 80026aa:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 80026ae:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80026b2:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 80026b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80026ba:	f1c1 0420 	rsb	r4, r1, #32
 80026be:	f1a1 0020 	sub.w	r0, r1, #32
 80026c2:	fa22 f801 	lsr.w	r8, r2, r1
 80026c6:	fa03 f404 	lsl.w	r4, r3, r4
 80026ca:	ea48 0804 	orr.w	r8, r8, r4
 80026ce:	fa23 f000 	lsr.w	r0, r3, r0
 80026d2:	ea48 0800 	orr.w	r8, r8, r0
 80026d6:	fa23 f901 	lsr.w	r9, r3, r1
 80026da:	4643      	mov	r3, r8
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3744      	adds	r7, #68	@ 0x44
 80026e0:	46bd      	mov	sp, r7
 80026e2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026e6:	4770      	bx	lr
 80026e8:	02faf080 	.word	0x02faf080
 80026ec:	01c9c380 	.word	0x01c9c380

080026f0 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b0ae      	sub	sp, #184	@ 0xb8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80026fc:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002700:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 8002704:	4ba5      	ldr	r3, [pc, #660]	@ (800299c <SearchDatarateME+0x2ac>)
 8002706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 800270a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800270e:	4ba4      	ldr	r3, [pc, #656]	@ (80029a0 <SearchDatarateME+0x2b0>)
 8002710:	429a      	cmp	r2, r3
 8002712:	d904      	bls.n	800271e <SearchDatarateME+0x2e>
    f_dig >>= 1;
 8002714:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 800271e:	2300      	movs	r3, #0
 8002720:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8002724:	e013      	b.n	800274e <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 8002726:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800272a:	4619      	mov	r1, r3
 800272c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002730:	f7ff ff50 	bl	80025d4 <ComputeDatarate>
 8002734:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8002738:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800273c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002740:	429a      	cmp	r2, r3
 8002742:	d909      	bls.n	8002758 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8002744:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002748:	3301      	adds	r3, #1
 800274a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800274e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d1e7      	bne.n	8002726 <SearchDatarateME+0x36>
 8002756:	e000      	b.n	800275a <SearchDatarateME+0x6a>
      break;
 8002758:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 800275a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800275e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002762:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 8002764:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d16b      	bne.n	8002844 <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 800276c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002770:	2200      	movs	r2, #0
 8002772:	663b      	str	r3, [r7, #96]	@ 0x60
 8002774:	667a      	str	r2, [r7, #100]	@ 0x64
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002780:	000b      	movs	r3, r1
 8002782:	2200      	movs	r2, #0
 8002784:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8002788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800278c:	2200      	movs	r2, #0
 800278e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002790:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002792:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002796:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800279a:	f7fd fd79 	bl	8000290 <__aeabi_uldivmod>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	b293      	uxth	r3, r2
 80027a4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80027a8:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 80027aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027ae:	2200      	movs	r2, #0
 80027b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80027b2:	657a      	str	r2, [r7, #84]	@ 0x54
 80027b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2200      	movs	r2, #0
 80027be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027c2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80027c6:	462b      	mov	r3, r5
 80027c8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80027cc:	4642      	mov	r2, r8
 80027ce:	fb02 f203 	mul.w	r2, r2, r3
 80027d2:	464b      	mov	r3, r9
 80027d4:	4621      	mov	r1, r4
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	4622      	mov	r2, r4
 80027de:	4641      	mov	r1, r8
 80027e0:	fba2 1201 	umull	r1, r2, r2, r1
 80027e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027e6:	460a      	mov	r2, r1
 80027e8:	67ba      	str	r2, [r7, #120]	@ 0x78
 80027ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80027ec:	4413      	add	r3, r2
 80027ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027f0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80027f4:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 80027f8:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 80027fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002800:	2200      	movs	r2, #0
 8002802:	643b      	str	r3, [r7, #64]	@ 0x40
 8002804:	647a      	str	r2, [r7, #68]	@ 0x44
 8002806:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	17da      	asrs	r2, r3, #31
 8002810:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002812:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002814:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002818:	462b      	mov	r3, r5
 800281a:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800281e:	4642      	mov	r2, r8
 8002820:	fb02 f203 	mul.w	r2, r2, r3
 8002824:	464b      	mov	r3, r9
 8002826:	4621      	mov	r1, r4
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	4622      	mov	r2, r4
 8002830:	4641      	mov	r1, r8
 8002832:	fba2 ab01 	umull	sl, fp, r2, r1
 8002836:	445b      	add	r3, fp
 8002838:	469b      	mov	fp, r3
 800283a:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 800283e:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8002842:	e07d      	b.n	8002940 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8002844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002848:	2200      	movs	r2, #0
 800284a:	4698      	mov	r8, r3
 800284c:	4691      	mov	r9, r2
 800284e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002852:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8002856:	f1a1 0320 	sub.w	r3, r1, #32
 800285a:	f1c1 0220 	rsb	r2, r1, #32
 800285e:	fa09 f501 	lsl.w	r5, r9, r1
 8002862:	fa08 f303 	lsl.w	r3, r8, r3
 8002866:	431d      	orrs	r5, r3
 8002868:	fa28 f202 	lsr.w	r2, r8, r2
 800286c:	4315      	orrs	r5, r2
 800286e:	fa08 f401 	lsl.w	r4, r8, r1
 8002872:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 8002876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800287a:	2200      	movs	r2, #0
 800287c:	633b      	str	r3, [r7, #48]	@ 0x30
 800287e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002880:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002888:	f7fd fd02 	bl	8000290 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	b293      	uxth	r3, r2
 8002892:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002896:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8002898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800289c:	2200      	movs	r2, #0
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80028ac:	17da      	asrs	r2, r3, #31
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80028b2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80028b6:	462b      	mov	r3, r5
 80028b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028bc:	4642      	mov	r2, r8
 80028be:	fb02 f203 	mul.w	r2, r2, r3
 80028c2:	464b      	mov	r3, r9
 80028c4:	4621      	mov	r1, r4
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	4622      	mov	r2, r4
 80028ce:	4641      	mov	r1, r8
 80028d0:	fba2 1201 	umull	r1, r2, r2, r1
 80028d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80028d6:	460a      	mov	r2, r1
 80028d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80028da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80028dc:	4413      	add	r3, r2
 80028de:	677b      	str	r3, [r7, #116]	@ 0x74
 80028e0:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 80028e4:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 80028e8:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 80028ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028f0:	2200      	movs	r2, #0
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	61fa      	str	r2, [r7, #28]
 80028f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8002900:	17da      	asrs	r2, r3, #31
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	617a      	str	r2, [r7, #20]
 8002906:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800290a:	462b      	mov	r3, r5
 800290c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002910:	4642      	mov	r2, r8
 8002912:	fb02 f203 	mul.w	r2, r2, r3
 8002916:	464b      	mov	r3, r9
 8002918:	4621      	mov	r1, r4
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	4622      	mov	r2, r4
 8002922:	4641      	mov	r1, r8
 8002924:	fba2 1201 	umull	r1, r2, r2, r1
 8002928:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800292a:	460a      	mov	r2, r1
 800292c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800292e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002930:	4413      	add	r3, r2
 8002932:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002934:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8002938:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 800293c:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002940:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002944:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002948:	1a84      	subs	r4, r0, r2
 800294a:	60bc      	str	r4, [r7, #8]
 800294c:	eb61 0303 	sbc.w	r3, r1, r3
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002956:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800295a:	1a84      	subs	r4, r0, r2
 800295c:	603c      	str	r4, [r7, #0]
 800295e:	eb61 0303 	sbc.w	r3, r1, r3
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002968:	4623      	mov	r3, r4
 800296a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800296e:	4602      	mov	r2, r0
 8002970:	4293      	cmp	r3, r2
 8002972:	462b      	mov	r3, r5
 8002974:	460a      	mov	r2, r1
 8002976:	4193      	sbcs	r3, r2
 8002978:	d205      	bcs.n	8002986 <SearchDatarateME+0x296>
 800297a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	b29b      	uxth	r3, r3
 8002984:	e002      	b.n	800298c <SearchDatarateME+0x29c>
 8002986:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002990:	8013      	strh	r3, [r2, #0]

}
 8002992:	bf00      	nop
 8002994:	37b8      	adds	r7, #184	@ 0xb8
 8002996:	46bd      	mov	sp, r7
 8002998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299c:	02faf080 	.word	0x02faf080
 80029a0:	01c9c380 	.word	0x01c9c380

080029a4 <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 80029a4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029a8:	b08c      	sub	sp, #48	@ 0x30
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	461e      	mov	r6, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80029b4:	460b      	mov	r3, r1
 80029b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80029ba:	4613      	mov	r3, r2
 80029bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80029c0:	4633      	mov	r3, r6
 80029c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 80029c6:	4b35      	ldr	r3, [pc, #212]	@ (8002a9c <ComputeFreqDeviation+0xf8>)
 80029c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 80029ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d127      	bne.n	8002a22 <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 80029d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d4:	2200      	movs	r2, #0
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	617a      	str	r2, [r7, #20]
 80029da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029de:	2200      	movs	r2, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	60fa      	str	r2, [r7, #12]
 80029e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029e8:	462b      	mov	r3, r5
 80029ea:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80029ee:	4642      	mov	r2, r8
 80029f0:	fb02 f203 	mul.w	r2, r2, r3
 80029f4:	464b      	mov	r3, r9
 80029f6:	4621      	mov	r1, r4
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	4622      	mov	r2, r4
 8002a00:	4641      	mov	r1, r8
 8002a02:	fba2 ab01 	umull	sl, fp, r2, r1
 8002a06:	445b      	add	r3, fp
 8002a08:	469b      	mov	fp, r3
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	ea4f 529a 	mov.w	r2, sl, lsr #22
 8002a16:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 8002a1a:	ea4f 539b 	mov.w	r3, fp, lsr #22
 8002a1e:	4613      	mov	r3, r2
 8002a20:	e036      	b.n	8002a90 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 8002a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a24:	2200      	movs	r2, #0
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a2e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a32:	17da      	asrs	r2, r3, #31
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	61fa      	str	r2, [r7, #28]
 8002a38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a42:	4652      	mov	r2, sl
 8002a44:	fb02 f203 	mul.w	r2, r2, r3
 8002a48:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8002a4c:	465b      	mov	r3, fp
 8002a4e:	4682      	mov	sl, r0
 8002a50:	468b      	mov	fp, r1
 8002a52:	4651      	mov	r1, sl
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	4652      	mov	r2, sl
 8002a5c:	69b9      	ldr	r1, [r7, #24]
 8002a5e:	fba2 4501 	umull	r4, r5, r2, r1
 8002a62:	442b      	add	r3, r5
 8002a64:	461d      	mov	r5, r3
 8002a66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a6a:	f1c3 0317 	rsb	r3, r3, #23
 8002a6e:	f1c3 0120 	rsb	r1, r3, #32
 8002a72:	f1a3 0220 	sub.w	r2, r3, #32
 8002a76:	fa24 f803 	lsr.w	r8, r4, r3
 8002a7a:	fa05 f101 	lsl.w	r1, r5, r1
 8002a7e:	ea48 0801 	orr.w	r8, r8, r1
 8002a82:	fa25 f202 	lsr.w	r2, r5, r2
 8002a86:	ea48 0802 	orr.w	r8, r8, r2
 8002a8a:	fa25 f903 	lsr.w	r9, r5, r3
 8002a8e:	4643      	mov	r3, r8
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3730      	adds	r7, #48	@ 0x30
 8002a94:	46bd      	mov	sp, r7
 8002a96:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a9a:	4770      	bx	lr
 8002a9c:	02faf080 	.word	0x02faf080

08002aa0 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8002aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa4:	b0a2      	sub	sp, #136	@ 0x88
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8002aaa:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002aac:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002ac0:	e012      	b.n	8002ae8 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 8002ac2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8002ac6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8002aca:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8002ace:	20ff      	movs	r0, #255	@ 0xff
 8002ad0:	f7ff ff68 	bl	80029a4 <ComputeFreqDeviation>
 8002ad4:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 8002ad6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ad8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d309      	bcc.n	8002af2 <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8002ade:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002ae8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002aec:	2b0c      	cmp	r3, #12
 8002aee:	d1e8      	bne.n	8002ac2 <SearchFreqDevME+0x22>
 8002af0:	e000      	b.n	8002af4 <SearchFreqDevME+0x54>
      break;
 8002af2:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 8002af4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002af6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002afa:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 8002afc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d155      	bne.n	8002bb0 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 8002b04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b06:	2200      	movs	r2, #0
 8002b08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002b18:	4629      	mov	r1, r5
 8002b1a:	058b      	lsls	r3, r1, #22
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8002b22:	4621      	mov	r1, r4
 8002b24:	058a      	lsls	r2, r1, #22
 8002b26:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8002b2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b2e:	a36e      	add	r3, pc, #440	@ (adr r3, 8002ce8 <SearchFreqDevME+0x248>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	f7fd fbac 	bl	8000290 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	b2d3      	uxtb	r3, r2
 8002b3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b40:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 8002b42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b4c:	637a      	str	r2, [r7, #52]	@ 0x34
 8002b4e:	4b68      	ldr	r3, [pc, #416]	@ (8002cf0 <SearchFreqDevME+0x250>)
 8002b50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b54:	462a      	mov	r2, r5
 8002b56:	fb03 f202 	mul.w	r2, r3, r2
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	4a62      	ldr	r2, [pc, #392]	@ (8002cf0 <SearchFreqDevME+0x250>)
 8002b66:	4621      	mov	r1, r4
 8002b68:	fba1 ab02 	umull	sl, fp, r1, r2
 8002b6c:	445b      	add	r3, fp
 8002b6e:	469b      	mov	fp, r3
 8002b70:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8002b74:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8002b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	17da      	asrs	r2, r3, #31
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b84:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf0 <SearchFreqDevME+0x250>)
 8002b86:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002b8a:	462a      	mov	r2, r5
 8002b8c:	fb03 f202 	mul.w	r2, r3, r2
 8002b90:	2300      	movs	r3, #0
 8002b92:	4621      	mov	r1, r4
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	4a55      	ldr	r2, [pc, #340]	@ (8002cf0 <SearchFreqDevME+0x250>)
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	fba1 8902 	umull	r8, r9, r1, r2
 8002ba2:	444b      	add	r3, r9
 8002ba4:	4699      	mov	r9, r3
 8002ba6:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8002baa:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8002bae:	e06d      	b.n	8002c8c <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8002bb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	623b      	str	r3, [r7, #32]
 8002bb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bb8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002bbc:	f1c3 0117 	rsb	r1, r3, #23
 8002bc0:	f1a1 0320 	sub.w	r3, r1, #32
 8002bc4:	f1c1 0220 	rsb	r2, r1, #32
 8002bc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bcc:	4648      	mov	r0, r9
 8002bce:	fa00 f501 	lsl.w	r5, r0, r1
 8002bd2:	4640      	mov	r0, r8
 8002bd4:	fa00 f303 	lsl.w	r3, r0, r3
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	4643      	mov	r3, r8
 8002bdc:	fa23 f202 	lsr.w	r2, r3, r2
 8002be0:	4315      	orrs	r5, r2
 8002be2:	4643      	mov	r3, r8
 8002be4:	408b      	lsls	r3, r1
 8002be6:	461c      	mov	r4, r3
 8002be8:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 8002bec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bf0:	a33d      	add	r3, pc, #244	@ (adr r3, 8002ce8 <SearchFreqDevME+0x248>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fb4b 	bl	8000290 <__aeabi_uldivmod>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	b2d3      	uxtb	r3, r2
 8002c00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c02:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 8002c04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002c0c:	17da      	asrs	r2, r3, #31
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	61fa      	str	r2, [r7, #28]
 8002c12:	4b37      	ldr	r3, [pc, #220]	@ (8002cf0 <SearchFreqDevME+0x250>)
 8002c14:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002c18:	462a      	mov	r2, r5
 8002c1a:	fb03 f202 	mul.w	r2, r3, r2
 8002c1e:	2300      	movs	r3, #0
 8002c20:	4621      	mov	r1, r4
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	4a31      	ldr	r2, [pc, #196]	@ (8002cf0 <SearchFreqDevME+0x250>)
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	fba1 1202 	umull	r1, r2, r1, r2
 8002c30:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c32:	460a      	mov	r2, r1
 8002c34:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002c36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c38:	4413      	add	r3, r2
 8002c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c3c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002c40:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8002c44:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8002c48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8002c50:	17da      	asrs	r2, r3, #31
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	617a      	str	r2, [r7, #20]
 8002c56:	4b26      	ldr	r3, [pc, #152]	@ (8002cf0 <SearchFreqDevME+0x250>)
 8002c58:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c5c:	462a      	mov	r2, r5
 8002c5e:	fb03 f202 	mul.w	r2, r3, r2
 8002c62:	2300      	movs	r3, #0
 8002c64:	4621      	mov	r1, r4
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a20      	ldr	r2, [pc, #128]	@ (8002cf0 <SearchFreqDevME+0x250>)
 8002c6e:	4621      	mov	r1, r4
 8002c70:	fba1 1202 	umull	r1, r2, r1, r2
 8002c74:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c76:	460a      	mov	r2, r1
 8002c78:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c7c:	4413      	add	r3, r2
 8002c7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c80:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002c84:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8002c88:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002c8c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002c90:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002c94:	1a84      	subs	r4, r0, r2
 8002c96:	60bc      	str	r4, [r7, #8]
 8002c98:	eb61 0303 	sbc.w	r3, r1, r3
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ca2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002ca6:	1a84      	subs	r4, r0, r2
 8002ca8:	603c      	str	r4, [r7, #0]
 8002caa:	eb61 0303 	sbc.w	r3, r1, r3
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cba:	4602      	mov	r2, r0
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	462b      	mov	r3, r5
 8002cc0:	460a      	mov	r2, r1
 8002cc2:	4193      	sbcs	r3, r2
 8002cc4:	d204      	bcs.n	8002cd0 <SearchFreqDevME+0x230>
 8002cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e001      	b.n	8002cd4 <SearchFreqDevME+0x234>
 8002cd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cd6:	7013      	strb	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	3788      	adds	r7, #136	@ 0x88
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	f3af 8000 	nop.w
 8002ce8:	02faf080 	.word	0x02faf080
 8002cec:	00000000 	.word	0x00000000
 8002cf0:	02faf080 	.word	0x02faf080

08002cf4 <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 8002d02:	f107 0217 	add.w	r2, r7, #23
 8002d06:	f107 0314 	add.w	r3, r7, #20
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	68b8      	ldr	r0, [r7, #8]
 8002d0e:	f7ff fcef 	bl	80026f0 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 8002d12:	f107 0212 	add.w	r2, r7, #18
 8002d16:	f107 0313 	add.w	r3, r7, #19
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff febf 	bl	8002aa0 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 8002d22:	8abb      	ldrh	r3, [r7, #20]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	200e      	movs	r0, #14
 8002d30:	f7ff f8c6 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 8002d34:	8abb      	ldrh	r3, [r7, #20]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	200f      	movs	r0, #15
 8002d3e:	f7ff f8bf 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 8002d42:	7dfa      	ldrb	r2, [r7, #23]
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	2010      	movs	r0, #16
 8002d50:	f7ff f8b6 	bl	8001ec0 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	2200      	movs	r2, #0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	2012      	movs	r0, #18
 8002d5c:	f7ff f8b0 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8002d60:	7cbb      	ldrb	r3, [r7, #18]
 8002d62:	2200      	movs	r2, #0
 8002d64:	4619      	mov	r1, r3
 8002d66:	2011      	movs	r0, #17
 8002d68:	f7ff f8aa 	bl	8001ec0 <S2LP_WriteReg>
}
 8002d6c:	bf00      	nop
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b0e      	cmp	r3, #14
 8002d80:	dd02      	ble.n	8002d88 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	e006      	b.n	8002d96 <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f1c3 031d 	rsb	r3, r3, #29
 8002d94:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 8002d96:	2200      	movs	r2, #0
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2062      	movs	r0, #98	@ 0x62
 8002d9c:	f7ff f890 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8002da0:	2200      	movs	r2, #0
 8002da2:	2100      	movs	r1, #0
 8002da4:	2064      	movs	r0, #100	@ 0x64
 8002da6:	f7ff f88b 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2063      	movs	r0, #99	@ 0x63
 8002db0:	f7ff f886 	bl	8001ec0 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	2200      	movs	r2, #0
 8002db8:	4619      	mov	r1, r3
 8002dba:	2061      	movs	r0, #97	@ 0x61
 8002dbc:	f7ff f880 	bl	8001ec0 <S2LP_WriteReg>
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8002dd0:	4a48      	ldr	r2, [pc, #288]	@ (8002ef4 <S2LP_Init+0x12c>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 8002dd6:	f003 fccd 	bl	8006774 <HAL_RCC_GetHCLKFreq>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4a46      	ldr	r2, [pc, #280]	@ (8002ef8 <S2LP_Init+0x130>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002de6:	b672      	cpsid	i
}
 8002de8:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 8002dea:	2200      	movs	r2, #0
 8002dec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002df0:	4842      	ldr	r0, [pc, #264]	@ (8002efc <S2LP_Init+0x134>)
 8002df2:	f002 fe75 	bl	8005ae0 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e003      	b.n	8002e04 <S2LP_Init+0x3c>
		asm volatile("nop");
 8002dfc:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d3f7      	bcc.n	8002dfc <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8002e0c:	b662      	cpsie	i
}
 8002e0e:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 8002e10:	2200      	movs	r2, #0
 8002e12:	2103      	movs	r1, #3
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7ff f853 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	21a4      	movs	r1, #164	@ 0xa4
 8002e1e:	2053      	movs	r0, #83	@ 0x53
 8002e20:	f7ff f84e 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 8002e24:	2200      	movs	r2, #0
 8002e26:	2101      	movs	r1, #1
 8002e28:	2052      	movs	r0, #82	@ 0x52
 8002e2a:	f7ff f849 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2051      	movs	r0, #81	@ 0x51
 8002e34:	f7ff f844 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2050      	movs	r0, #80	@ 0x50
 8002e3e:	f7ff f83f 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2120      	movs	r1, #32
 8002e46:	203f      	movs	r0, #63	@ 0x3f
 8002e48:	f7ff f83a 	bl	8001ec0 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	21b7      	movs	r1, #183	@ 0xb7
 8002e50:	2033      	movs	r0, #51	@ 0x33
 8002e52:	f7ff f835 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2154      	movs	r1, #84	@ 0x54
 8002e5a:	2034      	movs	r0, #52	@ 0x34
 8002e5c:	f7ff f830 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8002e60:	2200      	movs	r2, #0
 8002e62:	212a      	movs	r1, #42	@ 0x2a
 8002e64:	2035      	movs	r0, #53	@ 0x35
 8002e66:	f7ff f82b 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	213e      	movs	r1, #62	@ 0x3e
 8002e6e:	2036      	movs	r0, #54	@ 0x36
 8002e70:	f7ff f826 	bl	8001ec0 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 8002e74:	4822      	ldr	r0, [pc, #136]	@ (8002f00 <S2LP_Init+0x138>)
 8002e76:	f7ff fa8f 	bl	8002398 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f7ff ff7a 	bl	8002d74 <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8002e80:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8002e84:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7ff ff33 	bl	8002cf4 <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2120      	movs	r1, #32
 8002e92:	2030      	movs	r0, #48	@ 0x30
 8002e94:	f7ff f814 	bl	8001ec0 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	202e      	movs	r0, #46	@ 0x2e
 8002e9e:	f7ff f80f 	bl	8001ec0 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 8002ea2:	f107 020c 	add.w	r2, r7, #12
 8002ea6:	f107 030b 	add.w	r3, r7, #11
 8002eaa:	4619      	mov	r1, r3
 8002eac:	206c      	movs	r0, #108	@ 0x6c
 8002eae:	f7fe ffc9 	bl	8001e44 <S2LP_ReadReg>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	73fb      	strb	r3, [r7, #15]
	if (err) {
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <S2LP_Init+0xf8>
		return err;
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	e015      	b.n	8002eec <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 8002ec0:	7afb      	ldrb	r3, [r7, #11]
 8002ec2:	2b45      	cmp	r3, #69	@ 0x45
 8002ec4:	d006      	beq.n	8002ed4 <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 8002ec6:	7afb      	ldrb	r3, [r7, #11]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	480e      	ldr	r0, [pc, #56]	@ (8002f04 <S2LP_Init+0x13c>)
 8002ecc:	f007 fb66 	bl	800a59c <iprintf>
		return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e00b      	b.n	8002eec <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 8002ed4:	7b7b      	ldrb	r3, [r7, #13]
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d004      	beq.n	8002eea <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 8002ee0:	4809      	ldr	r0, [pc, #36]	@ (8002f08 <S2LP_Init+0x140>)
 8002ee2:	f007 fbc3 	bl	800a66c <puts>
		return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <S2LP_Init+0x124>
	}

	return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20003bfc 	.word	0x20003bfc
 8002ef8:	1b4e81b5 	.word	0x1b4e81b5
 8002efc:	48001400 	.word	0x48001400
 8002f00:	33bca100 	.word	0x33bca100
 8002f04:	0800b874 	.word	0x0800b874
 8002f08:	0800b8d0 	.word	0x0800b8d0

08002f0c <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	2200      	movs	r2, #0
 8002f16:	4619      	mov	r1, r3
 8002f18:	20fc      	movs	r0, #252	@ 0xfc
 8002f1a:	f7fe ff93 	bl	8001e44 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 8002f1e:	1dbb      	adds	r3, r7, #6
 8002f20:	2200      	movs	r2, #0
 8002f22:	4619      	mov	r1, r3
 8002f24:	20fd      	movs	r0, #253	@ 0xfd
 8002f26:	f7fe ff8d 	bl	8001e44 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <S2LP_IRQ_Handler+0x58>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 8002f3a:	79bb      	ldrb	r3, [r7, #6]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 8002f44:	4b08      	ldr	r3, [pc, #32]	@ (8002f68 <S2LP_IRQ_Handler+0x5c>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 8002f4a:	79bb      	ldrb	r3, [r7, #6]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 8002f54:	4b05      	ldr	r3, [pc, #20]	@ (8002f6c <S2LP_IRQ_Handler+0x60>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	701a      	strb	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20003c01 	.word	0x20003c01
 8002f68:	20003c02 	.word	0x20003c02
 8002f6c:	20003c00 	.word	0x20003c00

08002f70 <Spectrogram_Format>:
    }
}

// Convert 12-bit DC ADC samples to Q1.15 fixed point signal and remove DC component
void Spectrogram_Format(q15_t *buf)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	// That way, the value of buf[i] is in [0 , 2**15 - 1]

	// /!\ When multiplying/dividing by a power 2, always prefer shifting left/right instead, ARM instructions to do so are more efficient.
	// Here we should shift left by 3.

	arm_shift_q15(buf, 3, buf, SAMPLES_PER_MELVEC);
 8002f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	2103      	movs	r1, #3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f006 fcc9 	bl	8009918 <arm_shift_q15>
	//            Number of cycles: <TODO>

	// Since we use a signed representation, we should now center the value around zero, we can do this by substracting 2**14.
	// Now the value of buf[i] is in [-2**14 , 2**14 - 1]

	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
 8002f86:	2300      	movs	r3, #0
 8002f88:	81fb      	strh	r3, [r7, #14]
 8002f8a:	e012      	b.n	8002fb2 <Spectrogram_Format+0x42>
		buf[i] -= (1 << 14);
 8002f8c:	89fb      	ldrh	r3, [r7, #14]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	4413      	add	r3, r2
 8002f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8002f9e:	b299      	uxth	r1, r3
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	b20a      	sxth	r2, r1
 8002faa:	801a      	strh	r2, [r3, #0]
	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
 8002fac:	89fb      	ldrh	r3, [r7, #14]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	81fb      	strh	r3, [r7, #14]
 8002fb2:	89fb      	ldrh	r3, [r7, #14]
 8002fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb8:	d3e8      	bcc.n	8002f8c <Spectrogram_Format+0x1c>
	}
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <Spectrogram_Compute>:

// Compute spectrogram of samples and transform into MEL vectors.
void Spectrogram_Compute(q15_t *samples, q15_t *melvec)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b092      	sub	sp, #72	@ 0x48
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
	// STEP 1  : Windowing of input samples
	//           --> Pointwise product
	//           Complexity: O(N)
	//           Number of cycles: <TODO>
	arm_mult_q15(samples, hamming_window, buf, SAMPLES_PER_MELVEC);
 8002fce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80030cc <Spectrogram_Compute+0x108>)
 8002fd4:	493e      	ldr	r1, [pc, #248]	@ (80030d0 <Spectrogram_Compute+0x10c>)
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f006 fd30 	bl	8009a3c <arm_mult_q15>
	//           Number of cycles: <TODO>

	// Since the FFT is a recursive algorithm, the values are rescaled in the function to ensure that overflow cannot happen.
	arm_rfft_instance_q15 rfft_inst;

	arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 8002fdc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002fe8:	f006 f96a 	bl	80092c0 <arm_rfft_init_q15>

	arm_rfft_q15(&rfft_inst, buf, buf_fft);
 8002fec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ff0:	4a38      	ldr	r2, [pc, #224]	@ (80030d4 <Spectrogram_Compute+0x110>)
 8002ff2:	4936      	ldr	r1, [pc, #216]	@ (80030cc <Spectrogram_Compute+0x108>)
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f006 f8e7 	bl	80091c8 <arm_rfft_q15>
	// STEP 3.1: Find the extremum value (maximum of absolute values)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	q15_t vmax;
	uint32_t pIndex=0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	623b      	str	r3, [r7, #32]

	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 8002ffe:	f107 0320 	add.w	r3, r7, #32
 8003002:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 8003006:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800300a:	4832      	ldr	r0, [pc, #200]	@ (80030d4 <Spectrogram_Compute+0x110>)
 800300c:	f7fe f96c 	bl	80012e8 <arm_absmax_q15>

	// STEP 3.2: Normalize the vector - Dynamic range increase
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8003010:	2300      	movs	r3, #0
 8003012:	647b      	str	r3, [r7, #68]	@ 0x44
 8003014:	e010      	b.n	8003038 <Spectrogram_Compute+0x74>
	{
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 8003016:	4a2f      	ldr	r2, [pc, #188]	@ (80030d4 <Spectrogram_Compute+0x110>)
 8003018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800301a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800301e:	03db      	lsls	r3, r3, #15
 8003020:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8003024:	fb93 f3f2 	sdiv	r3, r3, r2
 8003028:	b219      	sxth	r1, r3
 800302a:	4a28      	ldr	r2, [pc, #160]	@ (80030cc <Spectrogram_Compute+0x108>)
 800302c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8003032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003034:	3301      	adds	r3, #1
 8003036:	647b      	str	r3, [r7, #68]	@ 0x44
 8003038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800303a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800303e:	dbea      	blt.n	8003016 <Spectrogram_Compute+0x52>
	// STEP 3.3: Compute the complex magnitude
	//           --> The output buffer is now two times smaller because (real|imag) --> (mag)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	arm_cmplx_mag_q15(buf, buf, SAMPLES_PER_MELVEC/2);
 8003040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003044:	4921      	ldr	r1, [pc, #132]	@ (80030cc <Spectrogram_Compute+0x108>)
 8003046:	4821      	ldr	r0, [pc, #132]	@ (80030cc <Spectrogram_Compute+0x108>)
 8003048:	f006 fbbc 	bl	80097c4 <arm_cmplx_mag_q15>

	// STEP 3.4: Denormalize the vector
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 800304c:	2300      	movs	r3, #0
 800304e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003050:	e010      	b.n	8003074 <Spectrogram_Compute+0xb0>
	{
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 8003052:	4a1e      	ldr	r2, [pc, #120]	@ (80030cc <Spectrogram_Compute+0x108>)
 8003054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003056:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800305a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	13db      	asrs	r3, r3, #15
 8003064:	b219      	sxth	r1, r3
 8003066:	4a19      	ldr	r2, [pc, #100]	@ (80030cc <Spectrogram_Compute+0x108>)
 8003068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800306a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 800306e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003070:	3301      	adds	r3, #1
 8003072:	643b      	str	r3, [r7, #64]	@ 0x40
 8003074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003076:	2bff      	cmp	r3, #255	@ 0xff
 8003078:	ddeb      	ble.n	8003052 <Spectrogram_Compute+0x8e>
	// less precision since it discards the low 16 bits of each multiplication result.

	// /!\ In order to avoid overflows completely the input signals should be scaled down. Scale down one of the input matrices by log2(numColsA) bits to avoid overflows,
	// as a total of numColsA additions are computed internally for each output element. Because our hz2mel_mat matrix contains lots of zeros in its rows, this is not necessary.
	
	START_CYCLE_COUNT();
 800307a:	f000 fab3 	bl	80035e4 <start_cycle_count>
		mel_filter_apply(buf, melvec, SAMPLES_PER_MELVEC, MELVEC_LENGTH);
		STOP_CYCLE_COUNT("Mel filter bank");
	#elif MEL_MODE == MEL_MODE_MATRIX
		arm_matrix_instance_q15 hz2mel_inst, fftmag_inst, melvec_inst;

		arm_mat_init_q15(&hz2mel_inst, MELVEC_LENGTH, SAMPLES_PER_MELVEC/2, hz2mel_mat);
 800307e:	f107 0018 	add.w	r0, r7, #24
 8003082:	4b15      	ldr	r3, [pc, #84]	@ (80030d8 <Spectrogram_Compute+0x114>)
 8003084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003088:	2114      	movs	r1, #20
 800308a:	f006 fb97 	bl	80097bc <arm_mat_init_q15>
		arm_mat_init_q15(&fftmag_inst, SAMPLES_PER_MELVEC/2, 1, buf);
 800308e:	f107 0010 	add.w	r0, r7, #16
 8003092:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <Spectrogram_Compute+0x108>)
 8003094:	2201      	movs	r2, #1
 8003096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800309a:	f006 fb8f 	bl	80097bc <arm_mat_init_q15>
		arm_mat_init_q15(&melvec_inst, MELVEC_LENGTH, 1, melvec);
 800309e:	f107 0008 	add.w	r0, r7, #8
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2201      	movs	r2, #1
 80030a6:	2114      	movs	r1, #20
 80030a8:	f006 fb88 	bl	80097bc <arm_mat_init_q15>

		arm_mat_mult_fast_q15(&hz2mel_inst, &fftmag_inst, &melvec_inst, buf_tmp);
 80030ac:	f107 0208 	add.w	r2, r7, #8
 80030b0:	f107 0110 	add.w	r1, r7, #16
 80030b4:	f107 0018 	add.w	r0, r7, #24
 80030b8:	4b08      	ldr	r3, [pc, #32]	@ (80030dc <Spectrogram_Compute+0x118>)
 80030ba:	f006 f97d 	bl	80093b8 <arm_mat_mult_fast_q15>
		STOP_CYCLE_COUNT("Mel matrix");
 80030be:	4808      	ldr	r0, [pc, #32]	@ (80030e0 <Spectrogram_Compute+0x11c>)
 80030c0:	f000 fac0 	bl	8003644 <stop_cycle_count>
	#endif
	
}
 80030c4:	bf00      	nop
 80030c6:	3748      	adds	r7, #72	@ 0x48
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20003c04 	.word	0x20003c04
 80030d0:	20002b94 	.word	0x20002b94
 80030d4:	20004004 	.word	0x20004004
 80030d8:	20000394 	.word	0x20000394
 80030dc:	20004804 	.word	0x20004804
 80030e0:	0800b93c 	.word	0x0800b93c

080030e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <MX_SPI1_Init+0x74>)
 80030ea:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <MX_SPI1_Init+0x78>)
 80030ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003158 <MX_SPI1_Init+0x74>)
 80030f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80030f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030f6:	4b18      	ldr	r3, [pc, #96]	@ (8003158 <MX_SPI1_Init+0x74>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030fc:	4b16      	ldr	r3, [pc, #88]	@ (8003158 <MX_SPI1_Init+0x74>)
 80030fe:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003102:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003104:	4b14      	ldr	r3, [pc, #80]	@ (8003158 <MX_SPI1_Init+0x74>)
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800310a:	4b13      	ldr	r3, [pc, #76]	@ (8003158 <MX_SPI1_Init+0x74>)
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003110:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <MX_SPI1_Init+0x74>)
 8003112:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003116:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003118:	4b0f      	ldr	r3, [pc, #60]	@ (8003158 <MX_SPI1_Init+0x74>)
 800311a:	2208      	movs	r2, #8
 800311c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800311e:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <MX_SPI1_Init+0x74>)
 8003120:	2200      	movs	r2, #0
 8003122:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <MX_SPI1_Init+0x74>)
 8003126:	2200      	movs	r2, #0
 8003128:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312a:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <MX_SPI1_Init+0x74>)
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <MX_SPI1_Init+0x74>)
 8003132:	2207      	movs	r2, #7
 8003134:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003136:	4b08      	ldr	r3, [pc, #32]	@ (8003158 <MX_SPI1_Init+0x74>)
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800313c:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <MX_SPI1_Init+0x74>)
 800313e:	2208      	movs	r2, #8
 8003140:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003142:	4805      	ldr	r0, [pc, #20]	@ (8003158 <MX_SPI1_Init+0x74>)
 8003144:	f004 f878 	bl	8007238 <HAL_SPI_Init>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800314e:	f7fe fc9b 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20004a04 	.word	0x20004a04
 800315c:	40013000 	.word	0x40013000

08003160 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	@ 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a26      	ldr	r2, [pc, #152]	@ (8003218 <HAL_SPI_MspInit+0xb8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d145      	bne.n	800320e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003182:	4b26      	ldr	r3, [pc, #152]	@ (800321c <HAL_SPI_MspInit+0xbc>)
 8003184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003186:	4a25      	ldr	r2, [pc, #148]	@ (800321c <HAL_SPI_MspInit+0xbc>)
 8003188:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800318c:	6613      	str	r3, [r2, #96]	@ 0x60
 800318e:	4b23      	ldr	r3, [pc, #140]	@ (800321c <HAL_SPI_MspInit+0xbc>)
 8003190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003192:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	4b20      	ldr	r3, [pc, #128]	@ (800321c <HAL_SPI_MspInit+0xbc>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800319e:	4a1f      	ldr	r2, [pc, #124]	@ (800321c <HAL_SPI_MspInit+0xbc>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031a6:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <HAL_SPI_MspInit+0xbc>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031b2:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <HAL_SPI_MspInit+0xbc>)
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b6:	4a19      	ldr	r2, [pc, #100]	@ (800321c <HAL_SPI_MspInit+0xbc>)
 80031b8:	f043 0310 	orr.w	r3, r3, #16
 80031bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031be:	4b17      	ldr	r3, [pc, #92]	@ (800321c <HAL_SPI_MspInit+0xbc>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PE13     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031ca:	23c0      	movs	r3, #192	@ 0xc0
 80031cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ce:	2302      	movs	r3, #2
 80031d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	2303      	movs	r3, #3
 80031d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031da:	2305      	movs	r3, #5
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	4619      	mov	r1, r3
 80031e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031e8:	f002 fae8 	bl	80057bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80031ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031fa:	2303      	movs	r3, #3
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031fe:	2305      	movs	r3, #5
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003202:	f107 0314 	add.w	r3, r7, #20
 8003206:	4619      	mov	r1, r3
 8003208:	4805      	ldr	r0, [pc, #20]	@ (8003220 <HAL_SPI_MspInit+0xc0>)
 800320a:	f002 fad7 	bl	80057bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800320e:	bf00      	nop
 8003210:	3728      	adds	r7, #40	@ 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40013000 	.word	0x40013000
 800321c:	40021000 	.word	0x40021000
 8003220:	48001000 	.word	0x48001000

08003224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <HAL_MspInit+0x44>)
 800322c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322e:	4a0e      	ldr	r2, [pc, #56]	@ (8003268 <HAL_MspInit+0x44>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6613      	str	r3, [r2, #96]	@ 0x60
 8003236:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <HAL_MspInit+0x44>)
 8003238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b09      	ldr	r3, [pc, #36]	@ (8003268 <HAL_MspInit+0x44>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	4a08      	ldr	r2, [pc, #32]	@ (8003268 <HAL_MspInit+0x44>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6593      	str	r3, [r2, #88]	@ 0x58
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_MspInit+0x44>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000

0800326c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003270:	bf00      	nop
 8003272:	e7fd      	b.n	8003270 <NMI_Handler+0x4>

08003274 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <HardFault_Handler+0x4>

0800327c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <MemManage_Handler+0x4>

08003284 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <BusFault_Handler+0x4>

0800328c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <UsageFault_Handler+0x4>

08003294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c2:	f000 fa99 	bl	80037f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}

080032ca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 80032ce:	2008      	movs	r0, #8
 80032d0:	f002 fc1e 	bl	8005b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032dc:	4802      	ldr	r0, [pc, #8]	@ (80032e8 <DMA1_Channel1_IRQHandler+0x10>)
 80032de:	f002 f98d 	bl	80055fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20003080 	.word	0x20003080

080032ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032f0:	4802      	ldr	r0, [pc, #8]	@ (80032fc <TIM3_IRQHandler+0x10>)
 80032f2:	f004 fc87 	bl	8007c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20004a6c 	.word	0x20004a6c

08003300 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003304:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003308:	f002 fc02 	bl	8005b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}

08003310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003318:	4a14      	ldr	r2, [pc, #80]	@ (800336c <_sbrk+0x5c>)
 800331a:	4b15      	ldr	r3, [pc, #84]	@ (8003370 <_sbrk+0x60>)
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003324:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <_sbrk+0x64>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800332c:	4b11      	ldr	r3, [pc, #68]	@ (8003374 <_sbrk+0x64>)
 800332e:	4a12      	ldr	r2, [pc, #72]	@ (8003378 <_sbrk+0x68>)
 8003330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003332:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <_sbrk+0x64>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	429a      	cmp	r2, r3
 800333e:	d207      	bcs.n	8003350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003340:	f007 fb76 	bl	800aa30 <__errno>
 8003344:	4603      	mov	r3, r0
 8003346:	220c      	movs	r2, #12
 8003348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800334a:	f04f 33ff 	mov.w	r3, #4294967295
 800334e:	e009      	b.n	8003364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003350:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <_sbrk+0x64>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003356:	4b07      	ldr	r3, [pc, #28]	@ (8003374 <_sbrk+0x64>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	4a05      	ldr	r2, [pc, #20]	@ (8003374 <_sbrk+0x64>)
 8003360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20050000 	.word	0x20050000
 8003370:	00000400 	.word	0x00000400
 8003374:	20004a68 	.word	0x20004a68
 8003378:	20004c98 	.word	0x20004c98

0800337c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003380:	4b15      	ldr	r3, [pc, #84]	@ (80033d8 <SystemInit+0x5c>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003386:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <SystemInit+0x5c>)
 8003388:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800338c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003390:	4b12      	ldr	r3, [pc, #72]	@ (80033dc <SystemInit+0x60>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a11      	ldr	r2, [pc, #68]	@ (80033dc <SystemInit+0x60>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800339c:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <SystemInit+0x60>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80033a2:	4b0e      	ldr	r3, [pc, #56]	@ (80033dc <SystemInit+0x60>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a0d      	ldr	r2, [pc, #52]	@ (80033dc <SystemInit+0x60>)
 80033a8:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80033ac:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80033b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80033b2:	4b0a      	ldr	r3, [pc, #40]	@ (80033dc <SystemInit+0x60>)
 80033b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033ba:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <SystemInit+0x60>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a07      	ldr	r2, [pc, #28]	@ (80033dc <SystemInit+0x60>)
 80033c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80033c6:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <SystemInit+0x60>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000ed00 	.word	0xe000ed00
 80033dc:	40021000 	.word	0x40021000

080033e0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033e6:	f107 0310 	add.w	r3, r7, #16
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]
 80033fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <MX_TIM3_Init+0x94>)
 8003400:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <MX_TIM3_Init+0x98>)
 8003402:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <MX_TIM3_Init+0x94>)
 8003406:	2217      	movs	r2, #23
 8003408:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340a:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <MX_TIM3_Init+0x94>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 195;
 8003410:	4b18      	ldr	r3, [pc, #96]	@ (8003474 <MX_TIM3_Init+0x94>)
 8003412:	22c3      	movs	r2, #195	@ 0xc3
 8003414:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003416:	4b17      	ldr	r3, [pc, #92]	@ (8003474 <MX_TIM3_Init+0x94>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800341c:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <MX_TIM3_Init+0x94>)
 800341e:	2200      	movs	r2, #0
 8003420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003422:	4814      	ldr	r0, [pc, #80]	@ (8003474 <MX_TIM3_Init+0x94>)
 8003424:	f004 fb2e 	bl	8007a84 <HAL_TIM_Base_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800342e:	f7fe fb2b 	bl	8001a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003432:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	4619      	mov	r1, r3
 800343e:	480d      	ldr	r0, [pc, #52]	@ (8003474 <MX_TIM3_Init+0x94>)
 8003440:	f004 fce7 	bl	8007e12 <HAL_TIM_ConfigClockSource>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800344a:	f7fe fb1d 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800344e:	2320      	movs	r3, #32
 8003450:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	4619      	mov	r1, r3
 800345a:	4806      	ldr	r0, [pc, #24]	@ (8003474 <MX_TIM3_Init+0x94>)
 800345c:	f004 ff14 	bl	8008288 <HAL_TIMEx_MasterConfigSynchronization>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003466:	f7fe fb0f 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800346a:	bf00      	nop
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20004a6c 	.word	0x20004a6c
 8003478:	40000400 	.word	0x40000400

0800347c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0d      	ldr	r2, [pc, #52]	@ (80034c0 <HAL_TIM_Base_MspInit+0x44>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d113      	bne.n	80034b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <HAL_TIM_Base_MspInit+0x48>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	4a0c      	ldr	r2, [pc, #48]	@ (80034c4 <HAL_TIM_Base_MspInit+0x48>)
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	6593      	str	r3, [r2, #88]	@ 0x58
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <HAL_TIM_Base_MspInit+0x48>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	201d      	movs	r0, #29
 80034ac:	f001 ff19 	bl	80052e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034b0:	201d      	movs	r0, #29
 80034b2:	f001 ff32 	bl	800531a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40021000 	.word	0x40021000

080034c8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 80034ce:	4a13      	ldr	r2, [pc, #76]	@ (800351c <MX_LPUART1_UART_Init+0x54>)
 80034d0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80034d2:	4b11      	ldr	r3, [pc, #68]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 80034d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034d8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034da:	4b0f      	ldr	r3, [pc, #60]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 80034dc:	2200      	movs	r2, #0
 80034de:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80034e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80034e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80034ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 80034ee:	220c      	movs	r2, #12
 80034f0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034f2:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034f8:	4b07      	ldr	r3, [pc, #28]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034fe:	4b06      	ldr	r3, [pc, #24]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 8003500:	2200      	movs	r2, #0
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003504:	4804      	ldr	r0, [pc, #16]	@ (8003518 <MX_LPUART1_UART_Init+0x50>)
 8003506:	f004 ff65 	bl	80083d4 <HAL_UART_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8003510:	f7fe faba 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20004ab8 	.word	0x20004ab8
 800351c:	40008000 	.word	0x40008000

08003520 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0ac      	sub	sp, #176	@ 0xb0
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	228c      	movs	r2, #140	@ 0x8c
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f007 fa27 	bl	800a994 <memset>
  if(uartHandle->Instance==LPUART1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a23      	ldr	r2, [pc, #140]	@ (80035d8 <HAL_UART_MspInit+0xb8>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d13e      	bne.n	80035ce <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003550:	2320      	movs	r3, #32
 8003552:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8003554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003558:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800355a:	f107 0310 	add.w	r3, r7, #16
 800355e:	4618      	mov	r0, r3
 8003560:	f003 f9a0 	bl	80068a4 <HAL_RCCEx_PeriphCLKConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800356a:	f7fe fa8d 	bl	8001a88 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800356e:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <HAL_UART_MspInit+0xbc>)
 8003570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003572:	4a1a      	ldr	r2, [pc, #104]	@ (80035dc <HAL_UART_MspInit+0xbc>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800357a:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <HAL_UART_MspInit+0xbc>)
 800357c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003586:	4b15      	ldr	r3, [pc, #84]	@ (80035dc <HAL_UART_MspInit+0xbc>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358a:	4a14      	ldr	r2, [pc, #80]	@ (80035dc <HAL_UART_MspInit+0xbc>)
 800358c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003592:	4b12      	ldr	r3, [pc, #72]	@ (80035dc <HAL_UART_MspInit+0xbc>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800359e:	f002 fb33 	bl	8005c08 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80035a2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80035a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b6:	2303      	movs	r3, #3
 80035b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80035bc:	2308      	movs	r3, #8
 80035be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035c2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035c6:	4619      	mov	r1, r3
 80035c8:	4805      	ldr	r0, [pc, #20]	@ (80035e0 <HAL_UART_MspInit+0xc0>)
 80035ca:	f002 f8f7 	bl	80057bc <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80035ce:	bf00      	nop
 80035d0:	37b0      	adds	r7, #176	@ 0xb0
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40008000 	.word	0x40008000
 80035dc:	40021000 	.word	0x40021000
 80035e0:	48001800 	.word	0x48001800

080035e4 <start_cycle_count>:

#if (PERF_COUNT == 1)

volatile uint8_t counting_cycles = 0;

void start_cycle_count() {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ea:	f3ef 8310 	mrs	r3, PRIMASK
 80035ee:	603b      	str	r3, [r7, #0]
  return(result);
 80035f0:	683b      	ldr	r3, [r7, #0]
	uint32_t prim = __get_PRIMASK();
 80035f2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80035f4:	b672      	cpsid	i
}
 80035f6:	bf00      	nop
	__disable_irq();
	if (counting_cycles) {
 80035f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003638 <start_cycle_count+0x54>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <start_cycle_count+0x2a>
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
 8003602:	480e      	ldr	r0, [pc, #56]	@ (800363c <start_cycle_count+0x58>)
 8003604:	f007 f832 	bl	800a66c <puts>
		Error_Handler();
 8003608:	f7fe fa3e 	bl	8001a88 <Error_Handler>
 800360c:	e002      	b.n	8003614 <start_cycle_count+0x30>
	} else {
		counting_cycles = 1;
 800360e:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <start_cycle_count+0x54>)
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
	}
	if (!prim) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <start_cycle_count+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 800361a:	b662      	cpsie	i
}
 800361c:	bf00      	nop
		__enable_irq();
	}
	DWT->CTRL |= 1 ; // enable the counter
 800361e:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <start_cycle_count+0x5c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a07      	ldr	r2, [pc, #28]	@ (8003640 <start_cycle_count+0x5c>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0; // reset the counter
 800362a:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <start_cycle_count+0x5c>)
 800362c:	2200      	movs	r2, #0
 800362e:	605a      	str	r2, [r3, #4]
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20004b40 	.word	0x20004b40
 800363c:	0800b948 	.word	0x0800b948
 8003640:	e0001000 	.word	0xe0001000

08003644 <stop_cycle_count>:
void stop_cycle_count(char *s) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	uint32_t res = DWT->CYCCNT;
 800364c:	4b09      	ldr	r3, [pc, #36]	@ (8003674 <stop_cycle_count+0x30>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	60fb      	str	r3, [r7, #12]
	counting_cycles = 0;
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <stop_cycle_count+0x34>)
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
	printf("[PERF] ");
 8003658:	4808      	ldr	r0, [pc, #32]	@ (800367c <stop_cycle_count+0x38>)
 800365a:	f006 ff9f 	bl	800a59c <iprintf>
	printf(s);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f006 ff9c 	bl	800a59c <iprintf>
	printf(" %lu cycles.\r\n", res);
 8003664:	68f9      	ldr	r1, [r7, #12]
 8003666:	4806      	ldr	r0, [pc, #24]	@ (8003680 <stop_cycle_count+0x3c>)
 8003668:	f006 ff98 	bl	800a59c <iprintf>
}
 800366c:	bf00      	nop
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	e0001000 	.word	0xe0001000
 8003678:	20004b40 	.word	0x20004b40
 800367c:	0800b96c 	.word	0x0800b96c
 8003680:	0800b974 	.word	0x0800b974

08003684 <hex_encode>:
#endif // PERF_COUNT


// Encode the binary buffer buf of length len in the null-terminated string s
// (which must have length at least 2*len+1).
void hex_encode(char* s, const uint8_t* buf, size_t len) {
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
    s[2*len] = '\0';
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
    for (size_t i=0; i<len; i++) {
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e01e      	b.n	80036e0 <hex_encode+0x5c>
        s[i*2] = "0123456789abcdef"[buf[i] >> 4];
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	4413      	add	r3, r2
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	4619      	mov	r1, r3
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4413      	add	r3, r2
 80036b8:	4a0f      	ldr	r2, [pc, #60]	@ (80036f8 <hex_encode+0x74>)
 80036ba:	5c52      	ldrb	r2, [r2, r1]
 80036bc:	701a      	strb	r2, [r3, #0]
        s[i*2+1] = "0123456789abcdef"[buf[i] & 0xF];
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	3301      	adds	r3, #1
 80036d0:	68f9      	ldr	r1, [r7, #12]
 80036d2:	440b      	add	r3, r1
 80036d4:	4908      	ldr	r1, [pc, #32]	@ (80036f8 <hex_encode+0x74>)
 80036d6:	5c8a      	ldrb	r2, [r1, r2]
 80036d8:	701a      	strb	r2, [r3, #0]
    for (size_t i=0; i<len; i++) {
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	3301      	adds	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d3dc      	bcc.n	80036a2 <hex_encode+0x1e>
    }
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	371c      	adds	r7, #28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	0800b984 	.word	0x0800b984

080036fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003734 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003700:	f7ff fe3c 	bl	800337c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003704:	480c      	ldr	r0, [pc, #48]	@ (8003738 <LoopForever+0x6>)
  ldr r1, =_edata
 8003706:	490d      	ldr	r1, [pc, #52]	@ (800373c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003708:	4a0d      	ldr	r2, [pc, #52]	@ (8003740 <LoopForever+0xe>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800370c:	e002      	b.n	8003714 <LoopCopyDataInit>

0800370e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003712:	3304      	adds	r3, #4

08003714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003718:	d3f9      	bcc.n	800370e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371a:	4a0a      	ldr	r2, [pc, #40]	@ (8003744 <LoopForever+0x12>)
  ldr r4, =_ebss
 800371c:	4c0a      	ldr	r4, [pc, #40]	@ (8003748 <LoopForever+0x16>)
  movs r3, #0
 800371e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003720:	e001      	b.n	8003726 <LoopFillZerobss>

08003722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003724:	3204      	adds	r2, #4

08003726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003728:	d3fb      	bcc.n	8003722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800372a:	f007 f987 	bl	800aa3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800372e:	f7fe f909 	bl	8001944 <main>

08003732 <LoopForever>:

LoopForever:
    b LoopForever
 8003732:	e7fe      	b.n	8003732 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003734:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800373c:	20002ffc 	.word	0x20002ffc
  ldr r2, =_sidata
 8003740:	0801d88c 	.word	0x0801d88c
  ldr r2, =_sbss
 8003744:	20002ffc 	.word	0x20002ffc
  ldr r4, =_ebss
 8003748:	20004c94 	.word	0x20004c94

0800374c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800374c:	e7fe      	b.n	800374c <ADC1_2_IRQHandler>

0800374e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003758:	2003      	movs	r0, #3
 800375a:	f001 fdb7 	bl	80052cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800375e:	2000      	movs	r0, #0
 8003760:	f000 f80e 	bl	8003780 <HAL_InitTick>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	71fb      	strb	r3, [r7, #7]
 800376e:	e001      	b.n	8003774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003770:	f7ff fd58 	bl	8003224 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003774:	79fb      	ldrb	r3, [r7, #7]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003788:	2300      	movs	r3, #0
 800378a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800378c:	4b17      	ldr	r3, [pc, #92]	@ (80037ec <HAL_InitTick+0x6c>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d023      	beq.n	80037dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003794:	4b16      	ldr	r3, [pc, #88]	@ (80037f0 <HAL_InitTick+0x70>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b14      	ldr	r3, [pc, #80]	@ (80037ec <HAL_InitTick+0x6c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	4619      	mov	r1, r3
 800379e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fdc3 	bl	8005336 <HAL_SYSTICK_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d809      	bhi.n	80037d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037bc:	2200      	movs	r2, #0
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f001 fd8d 	bl	80052e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037c8:	4a0a      	ldr	r2, [pc, #40]	@ (80037f4 <HAL_InitTick+0x74>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e007      	b.n	80037e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	e004      	b.n	80037e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e001      	b.n	80037e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20002f9c 	.word	0x20002f9c
 80037f0:	20002f94 	.word	0x20002f94
 80037f4:	20002f98 	.word	0x20002f98

080037f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_IncTick+0x20>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_IncTick+0x24>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4413      	add	r3, r2
 8003808:	4a04      	ldr	r2, [pc, #16]	@ (800381c <HAL_IncTick+0x24>)
 800380a:	6013      	str	r3, [r2, #0]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20002f9c 	.word	0x20002f9c
 800381c:	20004b44 	.word	0x20004b44

08003820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return uwTick;
 8003824:	4b03      	ldr	r3, [pc, #12]	@ (8003834 <HAL_GetTick+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20004b44 	.word	0x20004b44

08003838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003840:	f7ff ffee 	bl	8003820 <HAL_GetTick>
 8003844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d005      	beq.n	800385e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003852:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <HAL_Delay+0x44>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800385e:	bf00      	nop
 8003860:	f7ff ffde 	bl	8003820 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	429a      	cmp	r2, r3
 800386e:	d8f7      	bhi.n	8003860 <HAL_Delay+0x28>
  {
  }
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20002f9c 	.word	0x20002f9c

08003880 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	609a      	str	r2, [r3, #8]
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3360      	adds	r3, #96	@ 0x60
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b08      	ldr	r3, [pc, #32]	@ (800392c <LL_ADC_SetOffset+0x44>)
 800390a:	4013      	ands	r3, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	03fff000 	.word	0x03fff000

08003930 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3360      	adds	r3, #96	@ 0x60
 800393e:	461a      	mov	r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3360      	adds	r3, #96	@ 0x60
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	431a      	orrs	r2, r3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003986:	bf00      	nop
 8003988:	371c      	adds	r7, #28
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	615a      	str	r2, [r3, #20]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039de:	b480      	push	{r7}
 80039e0:	b087      	sub	sp, #28
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3330      	adds	r3, #48	@ 0x30
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	4413      	add	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	211f      	movs	r1, #31
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	401a      	ands	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0e9b      	lsrs	r3, r3, #26
 8003a16:	f003 011f 	and.w	r1, r3, #31
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	431a      	orrs	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a2a:	bf00      	nop
 8003a2c:	371c      	adds	r7, #28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b087      	sub	sp, #28
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	3314      	adds	r3, #20
 8003a46:	461a      	mov	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	0e5b      	lsrs	r3, r3, #25
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	4413      	add	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	0d1b      	lsrs	r3, r3, #20
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2107      	movs	r1, #7
 8003a64:	fa01 f303 	lsl.w	r3, r1, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	401a      	ands	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	0d1b      	lsrs	r3, r3, #20
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 0318 	and.w	r3, r3, #24
 8003aae:	4908      	ldr	r1, [pc, #32]	@ (8003ad0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ab0:	40d9      	lsrs	r1, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	0007ffff 	.word	0x0007ffff

08003ad4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003b00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6093      	str	r3, [r2, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b28:	d101      	bne.n	8003b2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003b4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b78:	d101      	bne.n	8003b7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ba0:	f043 0201 	orr.w	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003bc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bc8:	f043 0202 	orr.w	r2, r3, #2
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <LL_ADC_IsEnabled+0x18>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <LL_ADC_IsEnabled+0x1a>
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d101      	bne.n	8003c1a <LL_ADC_IsDisableOngoing+0x18>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <LL_ADC_IsDisableOngoing+0x1a>
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c3c:	f043 0204 	orr.w	r2, r3, #4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c64:	f043 0210 	orr.w	r2, r3, #16
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d101      	bne.n	8003c90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cb2:	f043 0220 	orr.w	r2, r3, #32
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d101      	bne.n	8003cde <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cec:	b590      	push	{r4, r7, lr}
 8003cee:	b089      	sub	sp, #36	@ 0x24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e133      	b.n	8003f6e <HAL_ADC_Init+0x282>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7fc fcad 	bl	8000674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fef1 	bl	8003b14 <LL_ADC_IsDeepPowerDownEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fed7 	bl	8003af0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ff0c 	bl	8003b64 <LL_ADC_IsInternalRegulatorEnabled>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d115      	bne.n	8003d7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fef0 	bl	8003b3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d5c:	4b86      	ldr	r3, [pc, #536]	@ (8003f78 <HAL_ADC_Init+0x28c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	099b      	lsrs	r3, r3, #6
 8003d62:	4a86      	ldr	r2, [pc, #536]	@ (8003f7c <HAL_ADC_Init+0x290>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	099b      	lsrs	r3, r3, #6
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d70:	e002      	b.n	8003d78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f9      	bne.n	8003d72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff feee 	bl	8003b64 <LL_ADC_IsInternalRegulatorEnabled>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d92:	f043 0210 	orr.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff ff62 	bl	8003c78 <LL_ADC_REG_IsConversionOngoing>
 8003db4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f040 80cc 	bne.w	8003f5c <HAL_ADC_Init+0x270>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 80c8 	bne.w	8003f5c <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003dd4:	f043 0202 	orr.w	r2, r3, #2
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fefb 	bl	8003bdc <LL_ADC_IsEnabled>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d115      	bne.n	8003e18 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dec:	4864      	ldr	r0, [pc, #400]	@ (8003f80 <HAL_ADC_Init+0x294>)
 8003dee:	f7ff fef5 	bl	8003bdc <LL_ADC_IsEnabled>
 8003df2:	4604      	mov	r4, r0
 8003df4:	4863      	ldr	r0, [pc, #396]	@ (8003f84 <HAL_ADC_Init+0x298>)
 8003df6:	f7ff fef1 	bl	8003bdc <LL_ADC_IsEnabled>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	431c      	orrs	r4, r3
 8003dfe:	4862      	ldr	r0, [pc, #392]	@ (8003f88 <HAL_ADC_Init+0x29c>)
 8003e00:	f7ff feec 	bl	8003bdc <LL_ADC_IsEnabled>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4323      	orrs	r3, r4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d105      	bne.n	8003e18 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4619      	mov	r1, r3
 8003e12:	485e      	ldr	r0, [pc, #376]	@ (8003f8c <HAL_ADC_Init+0x2a0>)
 8003e14:	f7ff fd34 	bl	8003880 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	7e5b      	ldrb	r3, [r3, #25]
 8003e1c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e22:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003e28:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003e2e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e36:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d106      	bne.n	8003e54 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	045b      	lsls	r3, r3, #17
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d009      	beq.n	8003e70 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	4b46      	ldr	r3, [pc, #280]	@ (8003f90 <HAL_ADC_Init+0x2a4>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	69b9      	ldr	r1, [r7, #24]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff1c 	bl	8003cc6 <LL_ADC_INJ_IsConversionOngoing>
 8003e8e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d140      	bne.n	8003f18 <HAL_ADC_Init+0x22c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d13d      	bne.n	8003f18 <HAL_ADC_Init+0x22c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	7e1b      	ldrb	r3, [r3, #24]
 8003ea4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ea6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003eae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ebe:	f023 0306 	bic.w	r3, r3, #6
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6812      	ldr	r2, [r2, #0]
 8003ec6:	69b9      	ldr	r1, [r7, #24]
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d118      	bne.n	8003f08 <HAL_ADC_Init+0x21c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003ee0:	f023 0304 	bic.w	r3, r3, #4
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003eec:	4311      	orrs	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ef2:	4311      	orrs	r1, r2
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	611a      	str	r2, [r3, #16]
 8003f06:	e007      	b.n	8003f18 <HAL_ADC_Init+0x22c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d10c      	bne.n	8003f3a <HAL_ADC_Init+0x24e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	f023 010f 	bic.w	r1, r3, #15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	1e5a      	subs	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f38:	e007      	b.n	8003f4a <HAL_ADC_Init+0x25e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 020f 	bic.w	r2, r2, #15
 8003f48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4e:	f023 0303 	bic.w	r3, r3, #3
 8003f52:	f043 0201 	orr.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f5a:	e007      	b.n	8003f6c <HAL_ADC_Init+0x280>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	f043 0210 	orr.w	r2, r3, #16
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3724      	adds	r7, #36	@ 0x24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20002f94 	.word	0x20002f94
 8003f7c:	053e2d63 	.word	0x053e2d63
 8003f80:	50040000 	.word	0x50040000
 8003f84:	50040100 	.word	0x50040100
 8003f88:	50040200 	.word	0x50040200
 8003f8c:	50040300 	.word	0x50040300
 8003f90:	fff0c007 	.word	0xfff0c007

08003f94 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fa0:	4853      	ldr	r0, [pc, #332]	@ (80040f0 <HAL_ADC_Start_DMA+0x15c>)
 8003fa2:	f7ff fd97 	bl	8003ad4 <LL_ADC_GetMultimode>
 8003fa6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fe63 	bl	8003c78 <LL_ADC_REG_IsConversionOngoing>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 8093 	bne.w	80040e0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_ADC_Start_DMA+0x34>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e08e      	b.n	80040e6 <HAL_ADC_Start_DMA+0x152>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a47      	ldr	r2, [pc, #284]	@ (80040f4 <HAL_ADC_Start_DMA+0x160>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d008      	beq.n	8003fec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d002      	beq.n	8003fec <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b09      	cmp	r3, #9
 8003fea:	d172      	bne.n	80040d2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fdc1 	bl	8004b74 <ADC_Enable>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d165      	bne.n	80040c8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	659a      	str	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a38      	ldr	r2, [pc, #224]	@ (80040f8 <HAL_ADC_Start_DMA+0x164>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d002      	beq.n	8004020 <HAL_ADC_Start_DMA+0x8c>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	e000      	b.n	8004022 <HAL_ADC_Start_DMA+0x8e>
 8004020:	4b36      	ldr	r3, [pc, #216]	@ (80040fc <HAL_ADC_Start_DMA+0x168>)
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	4293      	cmp	r3, r2
 8004028:	d002      	beq.n	8004030 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004034:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d006      	beq.n	8004056 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	f023 0206 	bic.w	r2, r3, #6
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004054:	e002      	b.n	800405c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004060:	4a27      	ldr	r2, [pc, #156]	@ (8004100 <HAL_ADC_Start_DMA+0x16c>)
 8004062:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004068:	4a26      	ldr	r2, [pc, #152]	@ (8004104 <HAL_ADC_Start_DMA+0x170>)
 800406a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004070:	4a25      	ldr	r2, [pc, #148]	@ (8004108 <HAL_ADC_Start_DMA+0x174>)
 8004072:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	221c      	movs	r2, #28
 800407a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0210 	orr.w	r2, r2, #16
 8004092:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3340      	adds	r3, #64	@ 0x40
 80040ae:	4619      	mov	r1, r3
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f001 fa04 	bl	80054c0 <HAL_DMA_Start_IT>
 80040b8:	4603      	mov	r3, r0
 80040ba:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fdb1 	bl	8003c28 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80040c6:	e00d      	b.n	80040e4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      if (tmp_hal_status == HAL_OK)
 80040d0:	e008      	b.n	80040e4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80040de:	e001      	b.n	80040e4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
 80040e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	50040300 	.word	0x50040300
 80040f4:	50040200 	.word	0x50040200
 80040f8:	50040100 	.word	0x50040100
 80040fc:	50040000 	.word	0x50040000
 8004100:	08004d3f 	.word	0x08004d3f
 8004104:	08004e17 	.word	0x08004e17
 8004108:	08004e33 	.word	0x08004e33

0800410c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_ADC_Stop_DMA+0x16>
 800411e:	2302      	movs	r3, #2
 8004120:	e051      	b.n	80041c6 <HAL_ADC_Stop_DMA+0xba>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800412a:	2103      	movs	r1, #3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 fc65 	bl	80049fc <ADC_ConversionStop>
 8004132:	4603      	mov	r3, r0
 8004134:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d13f      	bne.n	80041bc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004150:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d10f      	bne.n	800417a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415e:	4618      	mov	r0, r3
 8004160:	f001 fa0e 	bl	8005580 <HAL_DMA_Abort>
 8004164:	4603      	mov	r3, r0
 8004166:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0210 	bic.w	r2, r2, #16
 8004188:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fd75 	bl	8004c80 <ADC_Disable>
 8004196:	4603      	mov	r3, r0
 8004198:	73fb      	strb	r3, [r7, #15]
 800419a:	e002      	b.n	80041a2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fd6f 	bl	8004c80 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041b0:	f023 0301 	bic.w	r3, r3, #1
 80041b4:	f043 0201 	orr.w	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b0b6      	sub	sp, #216	@ 0xd8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_ADC_ConfigChannel+0x22>
 8004202:	2302      	movs	r3, #2
 8004204:	e3e3      	b.n	80049ce <HAL_ADC_ConfigChannel+0x7ea>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fd30 	bl	8003c78 <LL_ADC_REG_IsConversionOngoing>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 83c4 	bne.w	80049a8 <HAL_ADC_ConfigChannel+0x7c4>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b05      	cmp	r3, #5
 800422e:	d824      	bhi.n	800427a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	3b02      	subs	r3, #2
 8004236:	2b03      	cmp	r3, #3
 8004238:	d81b      	bhi.n	8004272 <HAL_ADC_ConfigChannel+0x8e>
 800423a:	a201      	add	r2, pc, #4	@ (adr r2, 8004240 <HAL_ADC_ConfigChannel+0x5c>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004251 	.word	0x08004251
 8004244:	08004259 	.word	0x08004259
 8004248:	08004261 	.word	0x08004261
 800424c:	08004269 	.word	0x08004269
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004250:	230c      	movs	r3, #12
 8004252:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004256:	e010      	b.n	800427a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004258:	2312      	movs	r3, #18
 800425a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800425e:	e00c      	b.n	800427a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004260:	2318      	movs	r3, #24
 8004262:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004266:	e008      	b.n	800427a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800426c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004270:	e003      	b.n	800427a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004272:	2306      	movs	r3, #6
 8004274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004278:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004288:	f7ff fba9 	bl	80039de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fcf1 	bl	8003c78 <LL_ADC_REG_IsConversionOngoing>
 8004296:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fd11 	bl	8003cc6 <LL_ADC_INJ_IsConversionOngoing>
 80042a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f040 81bf 	bne.w	8004630 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80042b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f040 81ba 	bne.w	8004630 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042c4:	d10f      	bne.n	80042e6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	4619      	mov	r1, r3
 80042d2:	f7ff fbb0 	bl	8003a36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff fb57 	bl	8003992 <LL_ADC_SetSamplingTimeCommonConfig>
 80042e4:	e00e      	b.n	8004304 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6819      	ldr	r1, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f7ff fb9f 	bl	8003a36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2100      	movs	r1, #0
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff fb47 	bl	8003992 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	08db      	lsrs	r3, r3, #3
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b04      	cmp	r3, #4
 8004324:	d00a      	beq.n	800433c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6919      	ldr	r1, [r3, #16]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004336:	f7ff fad7 	bl	80038e8 <LL_ADC_SetOffset>
 800433a:	e179      	b.n	8004630 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f7ff faf4 	bl	8003930 <LL_ADC_GetOffsetChannel>
 8004348:	4603      	mov	r3, r0
 800434a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x184>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff fae9 	bl	8003930 <LL_ADC_GetOffsetChannel>
 800435e:	4603      	mov	r3, r0
 8004360:	0e9b      	lsrs	r3, r3, #26
 8004362:	f003 021f 	and.w	r2, r3, #31
 8004366:	e01e      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1c2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff fade 	bl	8003930 <LL_ADC_GetOffsetChannel>
 8004374:	4603      	mov	r3, r0
 8004376:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8004386:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800438a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800438e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_ADC_ConfigChannel+0x1b6>
    return 32U;
 8004396:	2320      	movs	r3, #32
 8004398:	e004      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x1c0>
  return __builtin_clz(value);
 800439a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <HAL_ADC_ConfigChannel+0x1da>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	0e9b      	lsrs	r3, r3, #26
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	e018      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x20c>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043ca:	fa93 f3a3 	rbit	r3, r3
 80043ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80043d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80043d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80043da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80043e2:	2320      	movs	r3, #32
 80043e4:	e004      	b.n	80043f0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80043e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d106      	bne.n	8004402 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff faad 	bl	800395c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fa91 	bl	8003930 <LL_ADC_GetOffsetChannel>
 800440e:	4603      	mov	r3, r0
 8004410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <HAL_ADC_ConfigChannel+0x24a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2101      	movs	r1, #1
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fa86 	bl	8003930 <LL_ADC_GetOffsetChannel>
 8004424:	4603      	mov	r3, r0
 8004426:	0e9b      	lsrs	r3, r3, #26
 8004428:	f003 021f 	and.w	r2, r3, #31
 800442c:	e01e      	b.n	800446c <HAL_ADC_ConfigChannel+0x288>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fa7b 	bl	8003930 <LL_ADC_GetOffsetChannel>
 800443a:	4603      	mov	r3, r0
 800443c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004440:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004444:	fa93 f3a3 	rbit	r3, r3
 8004448:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800444c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004450:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800445c:	2320      	movs	r3, #32
 800445e:	e004      	b.n	800446a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004460:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004464:	fab3 f383 	clz	r3, r3
 8004468:	b2db      	uxtb	r3, r3
 800446a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x2a0>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	0e9b      	lsrs	r3, r3, #26
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	e018      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x2d2>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800449c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80044a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80044a8:	2320      	movs	r3, #32
 80044aa:	e004      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80044ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d106      	bne.n	80044c8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	2101      	movs	r1, #1
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7ff fa4a 	bl	800395c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2102      	movs	r1, #2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fa2e 	bl	8003930 <LL_ADC_GetOffsetChannel>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_ADC_ConfigChannel+0x310>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2102      	movs	r1, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fa23 	bl	8003930 <LL_ADC_GetOffsetChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	f003 021f 	and.w	r2, r3, #31
 80044f2:	e01e      	b.n	8004532 <HAL_ADC_ConfigChannel+0x34e>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2102      	movs	r1, #2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fa18 	bl	8003930 <LL_ADC_GetOffsetChannel>
 8004500:	4603      	mov	r3, r0
 8004502:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004512:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004516:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800451a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e004      	b.n	8004530 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800453a:	2b00      	cmp	r3, #0
 800453c:	d105      	bne.n	800454a <HAL_ADC_ConfigChannel+0x366>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	0e9b      	lsrs	r3, r3, #26
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	e014      	b.n	8004574 <HAL_ADC_ConfigChannel+0x390>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800455a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800455e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004566:	2320      	movs	r3, #32
 8004568:	e004      	b.n	8004574 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800456a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800456e:	fab3 f383 	clz	r3, r3
 8004572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004574:	429a      	cmp	r2, r3
 8004576:	d106      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2200      	movs	r2, #0
 800457e:	2102      	movs	r1, #2
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff f9eb 	bl	800395c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2103      	movs	r1, #3
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff f9cf 	bl	8003930 <LL_ADC_GetOffsetChannel>
 8004592:	4603      	mov	r3, r0
 8004594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10a      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x3ce>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2103      	movs	r1, #3
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff f9c4 	bl	8003930 <LL_ADC_GetOffsetChannel>
 80045a8:	4603      	mov	r3, r0
 80045aa:	0e9b      	lsrs	r3, r3, #26
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	e017      	b.n	80045e2 <HAL_ADC_ConfigChannel+0x3fe>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2103      	movs	r1, #3
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff f9b9 	bl	8003930 <LL_ADC_GetOffsetChannel>
 80045be:	4603      	mov	r3, r0
 80045c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80045ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045cc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80045ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80045d4:	2320      	movs	r3, #32
 80045d6:	e003      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80045d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d105      	bne.n	80045fa <HAL_ADC_ConfigChannel+0x416>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0e9b      	lsrs	r3, r3, #26
 80045f4:	f003 031f 	and.w	r3, r3, #31
 80045f8:	e011      	b.n	800461e <HAL_ADC_ConfigChannel+0x43a>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004602:	fa93 f3a3 	rbit	r3, r3
 8004606:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800460a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800460c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004612:	2320      	movs	r3, #32
 8004614:	e003      	b.n	800461e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004616:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800461e:	429a      	cmp	r2, r3
 8004620:	d106      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2200      	movs	r2, #0
 8004628:	2103      	movs	r1, #3
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff f996 	bl	800395c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff fad1 	bl	8003bdc <LL_ADC_IsEnabled>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	f040 813f 	bne.w	80048c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6819      	ldr	r1, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	461a      	mov	r2, r3
 8004650:	f7ff fa1c 	bl	8003a8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a8e      	ldr	r2, [pc, #568]	@ (8004894 <HAL_ADC_ConfigChannel+0x6b0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	f040 8130 	bne.w	80048c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x4a4>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0e9b      	lsrs	r3, r3, #26
 8004676:	3301      	adds	r3, #1
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	2b09      	cmp	r3, #9
 800467e:	bf94      	ite	ls
 8004680:	2301      	movls	r3, #1
 8004682:	2300      	movhi	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	e019      	b.n	80046bc <HAL_ADC_ConfigChannel+0x4d8>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004690:	fa93 f3a3 	rbit	r3, r3
 8004694:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004698:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800469a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80046a0:	2320      	movs	r3, #32
 80046a2:	e003      	b.n	80046ac <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80046a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a6:	fab3 f383 	clz	r3, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	3301      	adds	r3, #1
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2b09      	cmp	r3, #9
 80046b4:	bf94      	ite	ls
 80046b6:	2301      	movls	r3, #1
 80046b8:	2300      	movhi	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d079      	beq.n	80047b4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d107      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x4f8>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0e9b      	lsrs	r3, r3, #26
 80046d2:	3301      	adds	r3, #1
 80046d4:	069b      	lsls	r3, r3, #26
 80046d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046da:	e015      	b.n	8004708 <HAL_ADC_ConfigChannel+0x524>
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80046ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80046ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80046f4:	2320      	movs	r3, #32
 80046f6:	e003      	b.n	8004700 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80046f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046fa:	fab3 f383 	clz	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	3301      	adds	r3, #1
 8004702:	069b      	lsls	r3, r3, #26
 8004704:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x544>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	0e9b      	lsrs	r3, r3, #26
 800471a:	3301      	adds	r3, #1
 800471c:	f003 031f 	and.w	r3, r3, #31
 8004720:	2101      	movs	r1, #1
 8004722:	fa01 f303 	lsl.w	r3, r1, r3
 8004726:	e017      	b.n	8004758 <HAL_ADC_ConfigChannel+0x574>
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004730:	fa93 f3a3 	rbit	r3, r3
 8004734:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004738:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800473a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004740:	2320      	movs	r3, #32
 8004742:	e003      	b.n	800474c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004746:	fab3 f383 	clz	r3, r3
 800474a:	b2db      	uxtb	r3, r3
 800474c:	3301      	adds	r3, #1
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	ea42 0103 	orr.w	r1, r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <HAL_ADC_ConfigChannel+0x59a>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	3301      	adds	r3, #1
 8004770:	f003 021f 	and.w	r2, r3, #31
 8004774:	4613      	mov	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4413      	add	r3, r2
 800477a:	051b      	lsls	r3, r3, #20
 800477c:	e018      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x5cc>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004786:	fa93 f3a3 	rbit	r3, r3
 800478a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004796:	2320      	movs	r3, #32
 8004798:	e003      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800479a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b0:	430b      	orrs	r3, r1
 80047b2:	e080      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x5ec>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0e9b      	lsrs	r3, r3, #26
 80047c6:	3301      	adds	r3, #1
 80047c8:	069b      	lsls	r3, r3, #26
 80047ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047ce:	e015      	b.n	80047fc <HAL_ADC_ConfigChannel+0x618>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80047e8:	2320      	movs	r3, #32
 80047ea:	e003      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80047ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3301      	adds	r3, #1
 80047f6:	069b      	lsls	r3, r3, #26
 80047f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_ADC_ConfigChannel+0x638>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	0e9b      	lsrs	r3, r3, #26
 800480e:	3301      	adds	r3, #1
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	e017      	b.n	800484c <HAL_ADC_ConfigChannel+0x668>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	61bb      	str	r3, [r7, #24]
  return result;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004834:	2320      	movs	r3, #32
 8004836:	e003      	b.n	8004840 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2101      	movs	r1, #1
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	ea42 0103 	orr.w	r1, r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10d      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x694>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	3301      	adds	r3, #1
 8004864:	f003 021f 	and.w	r2, r3, #31
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	3b1e      	subs	r3, #30
 8004870:	051b      	lsls	r3, r3, #20
 8004872:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004876:	e01d      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x6d0>
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	60fb      	str	r3, [r7, #12]
  return result;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d103      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8004890:	2320      	movs	r3, #32
 8004892:	e005      	b.n	80048a0 <HAL_ADC_ConfigChannel+0x6bc>
 8004894:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fab3 f383 	clz	r3, r3
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	3301      	adds	r3, #1
 80048a2:	f003 021f 	and.w	r2, r3, #31
 80048a6:	4613      	mov	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	3b1e      	subs	r3, #30
 80048ae:	051b      	lsls	r3, r3, #20
 80048b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ba:	4619      	mov	r1, r3
 80048bc:	f7ff f8bb 	bl	8003a36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b44      	ldr	r3, [pc, #272]	@ (80049d8 <HAL_ADC_ConfigChannel+0x7f4>)
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d07a      	beq.n	80049c2 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048cc:	4843      	ldr	r0, [pc, #268]	@ (80049dc <HAL_ADC_ConfigChannel+0x7f8>)
 80048ce:	f7fe fffd 	bl	80038cc <LL_ADC_GetCommonPathInternalCh>
 80048d2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a41      	ldr	r2, [pc, #260]	@ (80049e0 <HAL_ADC_ConfigChannel+0x7fc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d12c      	bne.n	800493a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80048e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d126      	bne.n	800493a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a3c      	ldr	r2, [pc, #240]	@ (80049e4 <HAL_ADC_ConfigChannel+0x800>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x71c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a3b      	ldr	r2, [pc, #236]	@ (80049e8 <HAL_ADC_ConfigChannel+0x804>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d15d      	bne.n	80049bc <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004904:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004908:	4619      	mov	r1, r3
 800490a:	4834      	ldr	r0, [pc, #208]	@ (80049dc <HAL_ADC_ConfigChannel+0x7f8>)
 800490c:	f7fe ffcb 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004910:	4b36      	ldr	r3, [pc, #216]	@ (80049ec <HAL_ADC_ConfigChannel+0x808>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	099b      	lsrs	r3, r3, #6
 8004916:	4a36      	ldr	r2, [pc, #216]	@ (80049f0 <HAL_ADC_ConfigChannel+0x80c>)
 8004918:	fba2 2303 	umull	r2, r3, r2, r3
 800491c:	099b      	lsrs	r3, r3, #6
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	4613      	mov	r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800492a:	e002      	b.n	8004932 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3b01      	subs	r3, #1
 8004930:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1f9      	bne.n	800492c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004938:	e040      	b.n	80049bc <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a2d      	ldr	r2, [pc, #180]	@ (80049f4 <HAL_ADC_ConfigChannel+0x810>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d118      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x792>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004944:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d112      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a23      	ldr	r2, [pc, #140]	@ (80049e4 <HAL_ADC_ConfigChannel+0x800>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_ADC_ConfigChannel+0x780>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a22      	ldr	r2, [pc, #136]	@ (80049e8 <HAL_ADC_ConfigChannel+0x804>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d12d      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004968:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800496c:	4619      	mov	r1, r3
 800496e:	481b      	ldr	r0, [pc, #108]	@ (80049dc <HAL_ADC_ConfigChannel+0x7f8>)
 8004970:	f7fe ff99 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004974:	e024      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1f      	ldr	r2, [pc, #124]	@ (80049f8 <HAL_ADC_ConfigChannel+0x814>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d120      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d11a      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a14      	ldr	r2, [pc, #80]	@ (80049e4 <HAL_ADC_ConfigChannel+0x800>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d115      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800499a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800499e:	4619      	mov	r1, r3
 80049a0:	480e      	ldr	r0, [pc, #56]	@ (80049dc <HAL_ADC_ConfigChannel+0x7f8>)
 80049a2:	f7fe ff80 	bl	80038a6 <LL_ADC_SetCommonPathInternalCh>
 80049a6:	e00c      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ac:	f043 0220 	orr.w	r2, r3, #32
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80049ba:	e002      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049bc:	bf00      	nop
 80049be:	e000      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80049ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	37d8      	adds	r7, #216	@ 0xd8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	80080000 	.word	0x80080000
 80049dc:	50040300 	.word	0x50040300
 80049e0:	c7520000 	.word	0xc7520000
 80049e4:	50040000 	.word	0x50040000
 80049e8:	50040200 	.word	0x50040200
 80049ec:	20002f94 	.word	0x20002f94
 80049f0:	053e2d63 	.word	0x053e2d63
 80049f4:	cb840000 	.word	0xcb840000
 80049f8:	80000001 	.word	0x80000001

080049fc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff f930 	bl	8003c78 <LL_ADC_REG_IsConversionOngoing>
 8004a18:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff f951 	bl	8003cc6 <LL_ADC_INJ_IsConversionOngoing>
 8004a24:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 8098 	beq.w	8004b64 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d02a      	beq.n	8004a98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	7e5b      	ldrb	r3, [r3, #25]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d126      	bne.n	8004a98 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	7e1b      	ldrb	r3, [r3, #24]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d122      	bne.n	8004a98 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004a52:	2301      	movs	r3, #1
 8004a54:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004a56:	e014      	b.n	8004a82 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4a45      	ldr	r2, [pc, #276]	@ (8004b70 <ADC_ConversionStop+0x174>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d90d      	bls.n	8004a7c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a64:	f043 0210 	orr.w	r2, r3, #16
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a70:	f043 0201 	orr.w	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e074      	b.n	8004b66 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8c:	2b40      	cmp	r3, #64	@ 0x40
 8004a8e:	d1e3      	bne.n	8004a58 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2240      	movs	r2, #64	@ 0x40
 8004a96:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d014      	beq.n	8004ac8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff f8e8 	bl	8003c78 <LL_ADC_REG_IsConversionOngoing>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff f8a5 	bl	8003c02 <LL_ADC_IsDisableOngoing>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d104      	bne.n	8004ac8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff f8c4 	bl	8003c50 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d014      	beq.n	8004af8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff f8f7 	bl	8003cc6 <LL_ADC_INJ_IsConversionOngoing>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00c      	beq.n	8004af8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff f88d 	bl	8003c02 <LL_ADC_IsDisableOngoing>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff f8d3 	bl	8003c9e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d005      	beq.n	8004b0a <ADC_ConversionStop+0x10e>
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d105      	bne.n	8004b10 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004b04:	230c      	movs	r3, #12
 8004b06:	617b      	str	r3, [r7, #20]
        break;
 8004b08:	e005      	b.n	8004b16 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	617b      	str	r3, [r7, #20]
        break;
 8004b0e:	e002      	b.n	8004b16 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004b10:	2304      	movs	r3, #4
 8004b12:	617b      	str	r3, [r7, #20]
        break;
 8004b14:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004b16:	f7fe fe83 	bl	8003820 <HAL_GetTick>
 8004b1a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004b1c:	e01b      	b.n	8004b56 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004b1e:	f7fe fe7f 	bl	8003820 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b05      	cmp	r3, #5
 8004b2a:	d914      	bls.n	8004b56 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3e:	f043 0210 	orr.w	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4a:	f043 0201 	orr.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e007      	b.n	8004b66 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1dc      	bne.n	8004b1e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	a33fffff 	.word	0xa33fffff

08004b74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff f829 	bl	8003bdc <LL_ADC_IsEnabled>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d169      	bne.n	8004c64 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	4b36      	ldr	r3, [pc, #216]	@ (8004c70 <ADC_Enable+0xfc>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00d      	beq.n	8004bba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba2:	f043 0210 	orr.w	r2, r3, #16
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bae:	f043 0201 	orr.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e055      	b.n	8004c66 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe ffe4 	bl	8003b8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bc4:	482b      	ldr	r0, [pc, #172]	@ (8004c74 <ADC_Enable+0x100>)
 8004bc6:	f7fe fe81 	bl	80038cc <LL_ADC_GetCommonPathInternalCh>
 8004bca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004bcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bd4:	4b28      	ldr	r3, [pc, #160]	@ (8004c78 <ADC_Enable+0x104>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	099b      	lsrs	r3, r3, #6
 8004bda:	4a28      	ldr	r2, [pc, #160]	@ (8004c7c <ADC_Enable+0x108>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	099b      	lsrs	r3, r3, #6
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	4613      	mov	r3, r2
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bee:	e002      	b.n	8004bf6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f9      	bne.n	8004bf0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004bfc:	f7fe fe10 	bl	8003820 <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c02:	e028      	b.n	8004c56 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe ffe7 	bl	8003bdc <LL_ADC_IsEnabled>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d104      	bne.n	8004c1e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fe ffb7 	bl	8003b8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c1e:	f7fe fdff 	bl	8003820 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d914      	bls.n	8004c56 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d00d      	beq.n	8004c56 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3e:	f043 0210 	orr.w	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4a:	f043 0201 	orr.w	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e007      	b.n	8004c66 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d1cf      	bne.n	8004c04 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	8000003f 	.word	0x8000003f
 8004c74:	50040300 	.word	0x50040300
 8004c78:	20002f94 	.word	0x20002f94
 8004c7c:	053e2d63 	.word	0x053e2d63

08004c80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fe ffb8 	bl	8003c02 <LL_ADC_IsDisableOngoing>
 8004c92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe ff9f 	bl	8003bdc <LL_ADC_IsEnabled>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d047      	beq.n	8004d34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d144      	bne.n	8004d34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 030d 	and.w	r3, r3, #13
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d10c      	bne.n	8004cd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fe ff79 	bl	8003bb4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cca:	f7fe fda9 	bl	8003820 <HAL_GetTick>
 8004cce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cd0:	e029      	b.n	8004d26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd6:	f043 0210 	orr.w	r2, r3, #16
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce2:	f043 0201 	orr.w	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e023      	b.n	8004d36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004cee:	f7fe fd97 	bl	8003820 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d914      	bls.n	8004d26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0e:	f043 0210 	orr.w	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e007      	b.n	8004d36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1dc      	bne.n	8004cee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d50:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d14b      	bne.n	8004df0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d021      	beq.n	8004db6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe fe1e 	bl	80039b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d032      	beq.n	8004de8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d12b      	bne.n	8004de8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d11f      	bne.n	8004de8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dac:	f043 0201 	orr.w	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	659a      	str	r2, [r3, #88]	@ 0x58
 8004db4:	e018      	b.n	8004de8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d111      	bne.n	8004de8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d105      	bne.n	8004de8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de0:	f043 0201 	orr.w	r2, r3, #1
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7fb fe1d 	bl	8000a28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004dee:	e00e      	b.n	8004e0e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff f9e6 	bl	80041ce <HAL_ADC_ErrorCallback>
}
 8004e02:	e004      	b.n	8004e0e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
}
 8004e0e:	bf00      	nop
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7fb fe0a 	bl	8000a3e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e50:	f043 0204 	orr.w	r2, r3, #4
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff f9b8 	bl	80041ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <LL_ADC_IsEnabled>:
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <LL_ADC_IsEnabled+0x18>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <LL_ADC_IsEnabled+0x1a>
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <LL_ADC_StartCalibration>:
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004e9e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_ADC_IsCalibrationOnGoing>:
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b083      	sub	sp, #12
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ed2:	d101      	bne.n	8004ed8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d101      	bne.n	8004efe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_ADCEx_Calibration_Start+0x1c>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e04d      	b.n	8004fc4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff fea5 	bl	8004c80 <ADC_Disable>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d136      	bne.n	8004fae <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f48:	f023 0302 	bic.w	r3, r3, #2
 8004f4c:	f043 0202 	orr.w	r2, r3, #2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6839      	ldr	r1, [r7, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ff96 	bl	8004e8c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f60:	e014      	b.n	8004f8c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8004f6e:	d30d      	bcc.n	8004f8c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f74:	f023 0312 	bic.w	r3, r3, #18
 8004f78:	f043 0210 	orr.w	r2, r3, #16
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e01b      	b.n	8004fc4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff ff94 	bl	8004ebe <LL_ADC_IsCalibrationOnGoing>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e2      	bne.n	8004f62 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa0:	f023 0303 	bic.w	r3, r3, #3
 8004fa4:	f043 0201 	orr.w	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fac:	e005      	b.n	8004fba <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb2:	f043 0210 	orr.w	r2, r3, #16
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b0a1      	sub	sp, #132	@ 0x84
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e093      	b.n	8005112 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a47      	ldr	r2, [pc, #284]	@ (800511c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d102      	bne.n	800500a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005004:	4b46      	ldr	r3, [pc, #280]	@ (8005120 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e001      	b.n	800500e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10b      	bne.n	800502c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e072      	b.n	8005112 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff ff59 	bl	8004ee6 <LL_ADC_REG_IsConversionOngoing>
 8005034:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff ff53 	bl	8004ee6 <LL_ADC_REG_IsConversionOngoing>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d154      	bne.n	80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005046:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005048:	2b00      	cmp	r3, #0
 800504a:	d151      	bne.n	80050f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800504c:	4b35      	ldr	r3, [pc, #212]	@ (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800504e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02c      	beq.n	80050b2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005058:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6859      	ldr	r1, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800506a:	035b      	lsls	r3, r3, #13
 800506c:	430b      	orrs	r3, r1
 800506e:	431a      	orrs	r2, r3
 8005070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005072:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005074:	4829      	ldr	r0, [pc, #164]	@ (800511c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005076:	f7ff fef6 	bl	8004e66 <LL_ADC_IsEnabled>
 800507a:	4604      	mov	r4, r0
 800507c:	4828      	ldr	r0, [pc, #160]	@ (8005120 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800507e:	f7ff fef2 	bl	8004e66 <LL_ADC_IsEnabled>
 8005082:	4603      	mov	r3, r0
 8005084:	431c      	orrs	r4, r3
 8005086:	4828      	ldr	r0, [pc, #160]	@ (8005128 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005088:	f7ff feed 	bl	8004e66 <LL_ADC_IsEnabled>
 800508c:	4603      	mov	r3, r0
 800508e:	4323      	orrs	r3, r4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d137      	bne.n	8005104 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005094:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800509c:	f023 030f 	bic.w	r3, r3, #15
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	6811      	ldr	r1, [r2, #0]
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	6892      	ldr	r2, [r2, #8]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	431a      	orrs	r2, r3
 80050ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050ae:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050b0:	e028      	b.n	8005104 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050be:	4817      	ldr	r0, [pc, #92]	@ (800511c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80050c0:	f7ff fed1 	bl	8004e66 <LL_ADC_IsEnabled>
 80050c4:	4604      	mov	r4, r0
 80050c6:	4816      	ldr	r0, [pc, #88]	@ (8005120 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80050c8:	f7ff fecd 	bl	8004e66 <LL_ADC_IsEnabled>
 80050cc:	4603      	mov	r3, r0
 80050ce:	431c      	orrs	r4, r3
 80050d0:	4815      	ldr	r0, [pc, #84]	@ (8005128 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80050d2:	f7ff fec8 	bl	8004e66 <LL_ADC_IsEnabled>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4323      	orrs	r3, r4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d112      	bne.n	8005104 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80050e6:	f023 030f 	bic.w	r3, r3, #15
 80050ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80050ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050ee:	e009      	b.n	8005104 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005102:	e000      	b.n	8005106 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005104:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800510e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005112:	4618      	mov	r0, r3
 8005114:	3784      	adds	r7, #132	@ 0x84
 8005116:	46bd      	mov	sp, r7
 8005118:	bd90      	pop	{r4, r7, pc}
 800511a:	bf00      	nop
 800511c:	50040000 	.word	0x50040000
 8005120:	50040100 	.word	0x50040100
 8005124:	50040300 	.word	0x50040300
 8005128:	50040200 	.word	0x50040200

0800512c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800513c:	4b0c      	ldr	r3, [pc, #48]	@ (8005170 <__NVIC_SetPriorityGrouping+0x44>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005148:	4013      	ands	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800515c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800515e:	4a04      	ldr	r2, [pc, #16]	@ (8005170 <__NVIC_SetPriorityGrouping+0x44>)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	60d3      	str	r3, [r2, #12]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005178:	4b04      	ldr	r3, [pc, #16]	@ (800518c <__NVIC_GetPriorityGrouping+0x18>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	0a1b      	lsrs	r3, r3, #8
 800517e:	f003 0307 	and.w	r3, r3, #7
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	e000ed00 	.word	0xe000ed00

08005190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800519a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	db0b      	blt.n	80051ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	f003 021f 	and.w	r2, r3, #31
 80051a8:	4907      	ldr	r1, [pc, #28]	@ (80051c8 <__NVIC_EnableIRQ+0x38>)
 80051aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	2001      	movs	r0, #1
 80051b2:	fa00 f202 	lsl.w	r2, r0, r2
 80051b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	e000e100 	.word	0xe000e100

080051cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	6039      	str	r1, [r7, #0]
 80051d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	db0a      	blt.n	80051f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	490c      	ldr	r1, [pc, #48]	@ (8005218 <__NVIC_SetPriority+0x4c>)
 80051e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ea:	0112      	lsls	r2, r2, #4
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	440b      	add	r3, r1
 80051f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051f4:	e00a      	b.n	800520c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	4908      	ldr	r1, [pc, #32]	@ (800521c <__NVIC_SetPriority+0x50>)
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	3b04      	subs	r3, #4
 8005204:	0112      	lsls	r2, r2, #4
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	440b      	add	r3, r1
 800520a:	761a      	strb	r2, [r3, #24]
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	e000e100 	.word	0xe000e100
 800521c:	e000ed00 	.word	0xe000ed00

08005220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	@ 0x24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f1c3 0307 	rsb	r3, r3, #7
 800523a:	2b04      	cmp	r3, #4
 800523c:	bf28      	it	cs
 800523e:	2304      	movcs	r3, #4
 8005240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3304      	adds	r3, #4
 8005246:	2b06      	cmp	r3, #6
 8005248:	d902      	bls.n	8005250 <NVIC_EncodePriority+0x30>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3b03      	subs	r3, #3
 800524e:	e000      	b.n	8005252 <NVIC_EncodePriority+0x32>
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005254:	f04f 32ff 	mov.w	r2, #4294967295
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43da      	mvns	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	401a      	ands	r2, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005268:	f04f 31ff 	mov.w	r1, #4294967295
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	fa01 f303 	lsl.w	r3, r1, r3
 8005272:	43d9      	mvns	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005278:	4313      	orrs	r3, r2
         );
}
 800527a:	4618      	mov	r0, r3
 800527c:	3724      	adds	r7, #36	@ 0x24
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3b01      	subs	r3, #1
 8005294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005298:	d301      	bcc.n	800529e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800529a:	2301      	movs	r3, #1
 800529c:	e00f      	b.n	80052be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800529e:	4a0a      	ldr	r2, [pc, #40]	@ (80052c8 <SysTick_Config+0x40>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052a6:	210f      	movs	r1, #15
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	f7ff ff8e 	bl	80051cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052b0:	4b05      	ldr	r3, [pc, #20]	@ (80052c8 <SysTick_Config+0x40>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052b6:	4b04      	ldr	r3, [pc, #16]	@ (80052c8 <SysTick_Config+0x40>)
 80052b8:	2207      	movs	r2, #7
 80052ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	e000e010 	.word	0xe000e010

080052cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff ff29 	bl	800512c <__NVIC_SetPriorityGrouping>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	4603      	mov	r3, r0
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052f4:	f7ff ff3e 	bl	8005174 <__NVIC_GetPriorityGrouping>
 80052f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	f7ff ff8e 	bl	8005220 <NVIC_EncodePriority>
 8005304:	4602      	mov	r2, r0
 8005306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800530a:	4611      	mov	r1, r2
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff ff5d 	bl	80051cc <__NVIC_SetPriority>
}
 8005312:	bf00      	nop
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	4603      	mov	r3, r0
 8005322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff ff31 	bl	8005190 <__NVIC_EnableIRQ>
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7ff ffa2 	bl	8005288 <SysTick_Config>
 8005344:	4603      	mov	r3, r0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e098      	b.n	8005494 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	4b4d      	ldr	r3, [pc, #308]	@ (80054a0 <HAL_DMA_Init+0x150>)
 800536a:	429a      	cmp	r2, r3
 800536c:	d80f      	bhi.n	800538e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	4b4b      	ldr	r3, [pc, #300]	@ (80054a4 <HAL_DMA_Init+0x154>)
 8005376:	4413      	add	r3, r2
 8005378:	4a4b      	ldr	r2, [pc, #300]	@ (80054a8 <HAL_DMA_Init+0x158>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	009a      	lsls	r2, r3, #2
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a48      	ldr	r2, [pc, #288]	@ (80054ac <HAL_DMA_Init+0x15c>)
 800538a:	641a      	str	r2, [r3, #64]	@ 0x40
 800538c:	e00e      	b.n	80053ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	4b46      	ldr	r3, [pc, #280]	@ (80054b0 <HAL_DMA_Init+0x160>)
 8005396:	4413      	add	r3, r2
 8005398:	4a43      	ldr	r2, [pc, #268]	@ (80054a8 <HAL_DMA_Init+0x158>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	091b      	lsrs	r3, r3, #4
 80053a0:	009a      	lsls	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a42      	ldr	r2, [pc, #264]	@ (80054b4 <HAL_DMA_Init+0x164>)
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80053c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80053d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005406:	d039      	beq.n	800547c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540c:	4a27      	ldr	r2, [pc, #156]	@ (80054ac <HAL_DMA_Init+0x15c>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d11a      	bne.n	8005448 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005412:	4b29      	ldr	r3, [pc, #164]	@ (80054b8 <HAL_DMA_Init+0x168>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	f003 031c 	and.w	r3, r3, #28
 800541e:	210f      	movs	r1, #15
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	43db      	mvns	r3, r3
 8005426:	4924      	ldr	r1, [pc, #144]	@ (80054b8 <HAL_DMA_Init+0x168>)
 8005428:	4013      	ands	r3, r2
 800542a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800542c:	4b22      	ldr	r3, [pc, #136]	@ (80054b8 <HAL_DMA_Init+0x168>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005438:	f003 031c 	and.w	r3, r3, #28
 800543c:	fa01 f303 	lsl.w	r3, r1, r3
 8005440:	491d      	ldr	r1, [pc, #116]	@ (80054b8 <HAL_DMA_Init+0x168>)
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]
 8005446:	e019      	b.n	800547c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005448:	4b1c      	ldr	r3, [pc, #112]	@ (80054bc <HAL_DMA_Init+0x16c>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005450:	f003 031c 	and.w	r3, r3, #28
 8005454:	210f      	movs	r1, #15
 8005456:	fa01 f303 	lsl.w	r3, r1, r3
 800545a:	43db      	mvns	r3, r3
 800545c:	4917      	ldr	r1, [pc, #92]	@ (80054bc <HAL_DMA_Init+0x16c>)
 800545e:	4013      	ands	r3, r2
 8005460:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005462:	4b16      	ldr	r3, [pc, #88]	@ (80054bc <HAL_DMA_Init+0x16c>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6859      	ldr	r1, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	f003 031c 	and.w	r3, r3, #28
 8005472:	fa01 f303 	lsl.w	r3, r1, r3
 8005476:	4911      	ldr	r1, [pc, #68]	@ (80054bc <HAL_DMA_Init+0x16c>)
 8005478:	4313      	orrs	r3, r2
 800547a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	40020407 	.word	0x40020407
 80054a4:	bffdfff8 	.word	0xbffdfff8
 80054a8:	cccccccd 	.word	0xcccccccd
 80054ac:	40020000 	.word	0x40020000
 80054b0:	bffdfbf8 	.word	0xbffdfbf8
 80054b4:	40020400 	.word	0x40020400
 80054b8:	400200a8 	.word	0x400200a8
 80054bc:	400204a8 	.word	0x400204a8

080054c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_DMA_Start_IT+0x20>
 80054dc:	2302      	movs	r3, #2
 80054de:	e04b      	b.n	8005578 <HAL_DMA_Start_IT+0xb8>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d13a      	bne.n	800556a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0201 	bic.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f91e 	bl	800575a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 020e 	orr.w	r2, r2, #14
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e00f      	b.n	8005558 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0204 	bic.w	r2, r2, #4
 8005546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 020a 	orr.w	r2, r2, #10
 8005556:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e005      	b.n	8005576 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005572:	2302      	movs	r3, #2
 8005574:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d008      	beq.n	80055aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2204      	movs	r2, #4
 800559c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e022      	b.n	80055f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 020e 	bic.w	r2, r2, #14
 80055b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0201 	bic.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ce:	f003 021c 	and.w	r2, r3, #28
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	2101      	movs	r1, #1
 80055d8:	fa01 f202 	lsl.w	r2, r1, r2
 80055dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005618:	f003 031c 	and.w	r3, r3, #28
 800561c:	2204      	movs	r2, #4
 800561e:	409a      	lsls	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4013      	ands	r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d026      	beq.n	8005676 <HAL_DMA_IRQHandler+0x7a>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	d021      	beq.n	8005676 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d107      	bne.n	8005650 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0204 	bic.w	r2, r2, #4
 800564e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005654:	f003 021c 	and.w	r2, r3, #28
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	2104      	movs	r1, #4
 800565e:	fa01 f202 	lsl.w	r2, r1, r2
 8005662:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005668:	2b00      	cmp	r3, #0
 800566a:	d071      	beq.n	8005750 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005674:	e06c      	b.n	8005750 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f003 031c 	and.w	r3, r3, #28
 800567e:	2202      	movs	r2, #2
 8005680:	409a      	lsls	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4013      	ands	r3, r2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d02e      	beq.n	80056e8 <HAL_DMA_IRQHandler+0xec>
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d029      	beq.n	80056e8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 020a 	bic.w	r2, r2, #10
 80056b0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	f003 021c 	and.w	r2, r3, #28
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	2102      	movs	r1, #2
 80056c8:	fa01 f202 	lsl.w	r2, r1, r2
 80056cc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d038      	beq.n	8005750 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80056e6:	e033      	b.n	8005750 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ec:	f003 031c 	and.w	r3, r3, #28
 80056f0:	2208      	movs	r2, #8
 80056f2:	409a      	lsls	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d02a      	beq.n	8005752 <HAL_DMA_IRQHandler+0x156>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b00      	cmp	r3, #0
 8005704:	d025      	beq.n	8005752 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 020e 	bic.w	r2, r2, #14
 8005714:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	f003 021c 	and.w	r2, r3, #28
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005722:	2101      	movs	r1, #1
 8005724:	fa01 f202 	lsl.w	r2, r1, r2
 8005728:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005750:	bf00      	nop
 8005752:	bf00      	nop
}
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800575a:	b480      	push	{r7}
 800575c:	b085      	sub	sp, #20
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
 8005766:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800576c:	f003 021c 	and.w	r2, r3, #28
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005774:	2101      	movs	r1, #1
 8005776:	fa01 f202 	lsl.w	r2, r1, r2
 800577a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b10      	cmp	r3, #16
 800578a:	d108      	bne.n	800579e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800579c:	e007      	b.n	80057ae <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	60da      	str	r2, [r3, #12]
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057ca:	e166      	b.n	8005a9a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	2101      	movs	r1, #1
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	fa01 f303 	lsl.w	r3, r1, r3
 80057d8:	4013      	ands	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8158 	beq.w	8005a94 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d005      	beq.n	80057fc <HAL_GPIO_Init+0x40>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d130      	bne.n	800585e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	2203      	movs	r2, #3
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4013      	ands	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005832:	2201      	movs	r2, #1
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43db      	mvns	r3, r3
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4013      	ands	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	f003 0201 	and.w	r2, r3, #1
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b03      	cmp	r3, #3
 8005868:	d017      	beq.n	800589a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	2203      	movs	r2, #3
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4013      	ands	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d123      	bne.n	80058ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	08da      	lsrs	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	3208      	adds	r2, #8
 80058ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	220f      	movs	r2, #15
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	4013      	ands	r3, r2
 80058c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	fa02 f303 	lsl.w	r3, r2, r3
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	08da      	lsrs	r2, r3, #3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3208      	adds	r2, #8
 80058e8:	6939      	ldr	r1, [r7, #16]
 80058ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	2203      	movs	r2, #3
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	43db      	mvns	r3, r3
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4013      	ands	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f003 0203 	and.w	r2, r3, #3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80b2 	beq.w	8005a94 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005930:	4b61      	ldr	r3, [pc, #388]	@ (8005ab8 <HAL_GPIO_Init+0x2fc>)
 8005932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005934:	4a60      	ldr	r2, [pc, #384]	@ (8005ab8 <HAL_GPIO_Init+0x2fc>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6613      	str	r3, [r2, #96]	@ 0x60
 800593c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ab8 <HAL_GPIO_Init+0x2fc>)
 800593e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	60bb      	str	r3, [r7, #8]
 8005946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005948:	4a5c      	ldr	r2, [pc, #368]	@ (8005abc <HAL_GPIO_Init+0x300>)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	089b      	lsrs	r3, r3, #2
 800594e:	3302      	adds	r3, #2
 8005950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	220f      	movs	r2, #15
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	43db      	mvns	r3, r3
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4013      	ands	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005972:	d02b      	beq.n	80059cc <HAL_GPIO_Init+0x210>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a52      	ldr	r2, [pc, #328]	@ (8005ac0 <HAL_GPIO_Init+0x304>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d025      	beq.n	80059c8 <HAL_GPIO_Init+0x20c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a51      	ldr	r2, [pc, #324]	@ (8005ac4 <HAL_GPIO_Init+0x308>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d01f      	beq.n	80059c4 <HAL_GPIO_Init+0x208>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a50      	ldr	r2, [pc, #320]	@ (8005ac8 <HAL_GPIO_Init+0x30c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d019      	beq.n	80059c0 <HAL_GPIO_Init+0x204>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a4f      	ldr	r2, [pc, #316]	@ (8005acc <HAL_GPIO_Init+0x310>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <HAL_GPIO_Init+0x200>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a4e      	ldr	r2, [pc, #312]	@ (8005ad0 <HAL_GPIO_Init+0x314>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00d      	beq.n	80059b8 <HAL_GPIO_Init+0x1fc>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a4d      	ldr	r2, [pc, #308]	@ (8005ad4 <HAL_GPIO_Init+0x318>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d007      	beq.n	80059b4 <HAL_GPIO_Init+0x1f8>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a4c      	ldr	r2, [pc, #304]	@ (8005ad8 <HAL_GPIO_Init+0x31c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d101      	bne.n	80059b0 <HAL_GPIO_Init+0x1f4>
 80059ac:	2307      	movs	r3, #7
 80059ae:	e00e      	b.n	80059ce <HAL_GPIO_Init+0x212>
 80059b0:	2308      	movs	r3, #8
 80059b2:	e00c      	b.n	80059ce <HAL_GPIO_Init+0x212>
 80059b4:	2306      	movs	r3, #6
 80059b6:	e00a      	b.n	80059ce <HAL_GPIO_Init+0x212>
 80059b8:	2305      	movs	r3, #5
 80059ba:	e008      	b.n	80059ce <HAL_GPIO_Init+0x212>
 80059bc:	2304      	movs	r3, #4
 80059be:	e006      	b.n	80059ce <HAL_GPIO_Init+0x212>
 80059c0:	2303      	movs	r3, #3
 80059c2:	e004      	b.n	80059ce <HAL_GPIO_Init+0x212>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e002      	b.n	80059ce <HAL_GPIO_Init+0x212>
 80059c8:	2301      	movs	r3, #1
 80059ca:	e000      	b.n	80059ce <HAL_GPIO_Init+0x212>
 80059cc:	2300      	movs	r3, #0
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	f002 0203 	and.w	r2, r2, #3
 80059d4:	0092      	lsls	r2, r2, #2
 80059d6:	4093      	lsls	r3, r2
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80059de:	4937      	ldr	r1, [pc, #220]	@ (8005abc <HAL_GPIO_Init+0x300>)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	089b      	lsrs	r3, r3, #2
 80059e4:	3302      	adds	r3, #2
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80059ec:	4b3b      	ldr	r3, [pc, #236]	@ (8005adc <HAL_GPIO_Init+0x320>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4013      	ands	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005a10:	4a32      	ldr	r2, [pc, #200]	@ (8005adc <HAL_GPIO_Init+0x320>)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005a16:	4b31      	ldr	r3, [pc, #196]	@ (8005adc <HAL_GPIO_Init+0x320>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4013      	ands	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005a3a:	4a28      	ldr	r2, [pc, #160]	@ (8005adc <HAL_GPIO_Init+0x320>)
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005a40:	4b26      	ldr	r3, [pc, #152]	@ (8005adc <HAL_GPIO_Init+0x320>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a64:	4a1d      	ldr	r2, [pc, #116]	@ (8005adc <HAL_GPIO_Init+0x320>)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8005adc <HAL_GPIO_Init+0x320>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	43db      	mvns	r3, r3
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4013      	ands	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005a86:	693a      	ldr	r2, [r7, #16]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a8e:	4a13      	ldr	r2, [pc, #76]	@ (8005adc <HAL_GPIO_Init+0x320>)
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	3301      	adds	r3, #1
 8005a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f47f ae91 	bne.w	80057cc <HAL_GPIO_Init+0x10>
  }
}
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
 8005aae:	371c      	adds	r7, #28
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	48000400 	.word	0x48000400
 8005ac4:	48000800 	.word	0x48000800
 8005ac8:	48000c00 	.word	0x48000c00
 8005acc:	48001000 	.word	0x48001000
 8005ad0:	48001400 	.word	0x48001400
 8005ad4:	48001800 	.word	0x48001800
 8005ad8:	48001c00 	.word	0x48001c00
 8005adc:	40010400 	.word	0x40010400

08005ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	807b      	strh	r3, [r7, #2]
 8005aec:	4613      	mov	r3, r2
 8005aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005af0:	787b      	ldrb	r3, [r7, #1]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005af6:	887a      	ldrh	r2, [r7, #2]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005afc:	e002      	b.n	8005b04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b1a:	4b08      	ldr	r3, [pc, #32]	@ (8005b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	4013      	ands	r3, r2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d006      	beq.n	8005b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b26:	4a05      	ldr	r2, [pc, #20]	@ (8005b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fb feaa 	bl	8001888 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40010400 	.word	0x40010400

08005b40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b44:	4b04      	ldr	r3, [pc, #16]	@ (8005b58 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	40007000 	.word	0x40007000

08005b5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b6a:	d130      	bne.n	8005bce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b6c:	4b23      	ldr	r3, [pc, #140]	@ (8005bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b78:	d038      	beq.n	8005bec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b7a:	4b20      	ldr	r3, [pc, #128]	@ (8005bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b82:	4a1e      	ldr	r2, [pc, #120]	@ (8005bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2232      	movs	r2, #50	@ 0x32
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
 8005b94:	4a1b      	ldr	r2, [pc, #108]	@ (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	0c9b      	lsrs	r3, r3, #18
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ba0:	e002      	b.n	8005ba8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ba8:	4b14      	ldr	r3, [pc, #80]	@ (8005bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb4:	d102      	bne.n	8005bbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f2      	bne.n	8005ba2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc8:	d110      	bne.n	8005bec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e00f      	b.n	8005bee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bce:	4b0b      	ldr	r3, [pc, #44]	@ (8005bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bda:	d007      	beq.n	8005bec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005bdc:	4b07      	ldr	r3, [pc, #28]	@ (8005bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005be4:	4a05      	ldr	r2, [pc, #20]	@ (8005bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005be6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005bea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40007000 	.word	0x40007000
 8005c00:	20002f94 	.word	0x20002f94
 8005c04:	431bde83 	.word	0x431bde83

08005c08 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005c0c:	4b05      	ldr	r3, [pc, #20]	@ (8005c24 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	4a04      	ldr	r2, [pc, #16]	@ (8005c24 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c16:	6053      	str	r3, [r2, #4]
}
 8005c18:	bf00      	nop
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40007000 	.word	0x40007000

08005c28 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b088      	sub	sp, #32
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d102      	bne.n	8005c3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f000 bc08 	b.w	800644c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c3c:	4b96      	ldr	r3, [pc, #600]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 030c 	and.w	r3, r3, #12
 8005c44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c46:	4b94      	ldr	r3, [pc, #592]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 80e4 	beq.w	8005e26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_RCC_OscConfig+0x4c>
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	f040 808b 	bne.w	8005d82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	f040 8087 	bne.w	8005d82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c74:	4b88      	ldr	r3, [pc, #544]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_RCC_OscConfig+0x64>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e3df      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	4b81      	ldr	r3, [pc, #516]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x7e>
 8005c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ca4:	e005      	b.n	8005cb2 <HAL_RCC_OscConfig+0x8a>
 8005ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d223      	bcs.n	8005cfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fd92 	bl	80067e4 <RCC_SetFlashLatencyFromMSIRange>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e3c0      	b.n	800644c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cca:	4b73      	ldr	r3, [pc, #460]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a72      	ldr	r2, [pc, #456]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005cd0:	f043 0308 	orr.w	r3, r3, #8
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	4b70      	ldr	r3, [pc, #448]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	496d      	ldr	r1, [pc, #436]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	4968      	ldr	r1, [pc, #416]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	604b      	str	r3, [r1, #4]
 8005cfc:	e025      	b.n	8005d4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cfe:	4b66      	ldr	r3, [pc, #408]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a65      	ldr	r2, [pc, #404]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005d04:	f043 0308 	orr.w	r3, r3, #8
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	4b63      	ldr	r3, [pc, #396]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	4960      	ldr	r1, [pc, #384]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d1c:	4b5e      	ldr	r3, [pc, #376]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	495b      	ldr	r1, [pc, #364]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fd52 	bl	80067e4 <RCC_SetFlashLatencyFromMSIRange>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e380      	b.n	800644c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d4a:	f000 fc87 	bl	800665c <HAL_RCC_GetSysClockFreq>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	4b51      	ldr	r3, [pc, #324]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	4950      	ldr	r1, [pc, #320]	@ (8005e9c <HAL_RCC_OscConfig+0x274>)
 8005d5c:	5ccb      	ldrb	r3, [r1, r3]
 8005d5e:	f003 031f 	and.w	r3, r3, #31
 8005d62:	fa22 f303 	lsr.w	r3, r2, r3
 8005d66:	4a4e      	ldr	r2, [pc, #312]	@ (8005ea0 <HAL_RCC_OscConfig+0x278>)
 8005d68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d6a:	4b4e      	ldr	r3, [pc, #312]	@ (8005ea4 <HAL_RCC_OscConfig+0x27c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd fd06 	bl	8003780 <HAL_InitTick>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d052      	beq.n	8005e24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	e364      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d032      	beq.n	8005df0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d8a:	4b43      	ldr	r3, [pc, #268]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a42      	ldr	r2, [pc, #264]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d96:	f7fd fd43 	bl	8003820 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d9e:	f7fd fd3f 	bl	8003820 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e34d      	b.n	800644c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005db0:	4b39      	ldr	r3, [pc, #228]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dbc:	4b36      	ldr	r3, [pc, #216]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a35      	ldr	r2, [pc, #212]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005dc2:	f043 0308 	orr.w	r3, r3, #8
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	4b33      	ldr	r3, [pc, #204]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	4930      	ldr	r1, [pc, #192]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dda:	4b2f      	ldr	r3, [pc, #188]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	492b      	ldr	r1, [pc, #172]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	604b      	str	r3, [r1, #4]
 8005dee:	e01a      	b.n	8005e26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005df0:	4b29      	ldr	r3, [pc, #164]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a28      	ldr	r2, [pc, #160]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005dfc:	f7fd fd10 	bl	8003820 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e04:	f7fd fd0c 	bl	8003820 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e31a      	b.n	800644c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e16:	4b20      	ldr	r3, [pc, #128]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1f0      	bne.n	8005e04 <HAL_RCC_OscConfig+0x1dc>
 8005e22:	e000      	b.n	8005e26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d073      	beq.n	8005f1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d005      	beq.n	8005e44 <HAL_RCC_OscConfig+0x21c>
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	2b0c      	cmp	r3, #12
 8005e3c:	d10e      	bne.n	8005e5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b03      	cmp	r3, #3
 8005e42:	d10b      	bne.n	8005e5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e44:	4b14      	ldr	r3, [pc, #80]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d063      	beq.n	8005f18 <HAL_RCC_OscConfig+0x2f0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d15f      	bne.n	8005f18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e2f7      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e64:	d106      	bne.n	8005e74 <HAL_RCC_OscConfig+0x24c>
 8005e66:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a0b      	ldr	r2, [pc, #44]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	e025      	b.n	8005ec0 <HAL_RCC_OscConfig+0x298>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e7c:	d114      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x280>
 8005e7e:	4b06      	ldr	r3, [pc, #24]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a05      	ldr	r2, [pc, #20]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	4b03      	ldr	r3, [pc, #12]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a02      	ldr	r2, [pc, #8]	@ (8005e98 <HAL_RCC_OscConfig+0x270>)
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e013      	b.n	8005ec0 <HAL_RCC_OscConfig+0x298>
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800b9a8 	.word	0x0800b9a8
 8005ea0:	20002f94 	.word	0x20002f94
 8005ea4:	20002f98 	.word	0x20002f98
 8005ea8:	4ba0      	ldr	r3, [pc, #640]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a9f      	ldr	r2, [pc, #636]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4b9d      	ldr	r3, [pc, #628]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a9c      	ldr	r2, [pc, #624]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d013      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec8:	f7fd fcaa 	bl	8003820 <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ed0:	f7fd fca6 	bl	8003820 <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b64      	cmp	r3, #100	@ 0x64
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e2b4      	b.n	800644c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ee2:	4b92      	ldr	r3, [pc, #584]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x2a8>
 8005eee:	e014      	b.n	8005f1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef0:	f7fd fc96 	bl	8003820 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ef8:	f7fd fc92 	bl	8003820 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b64      	cmp	r3, #100	@ 0x64
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e2a0      	b.n	800644c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f0a:	4b88      	ldr	r3, [pc, #544]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x2d0>
 8005f16:	e000      	b.n	8005f1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d060      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d005      	beq.n	8005f38 <HAL_RCC_OscConfig+0x310>
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	2b0c      	cmp	r3, #12
 8005f30:	d119      	bne.n	8005f66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d116      	bne.n	8005f66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f38:	4b7c      	ldr	r3, [pc, #496]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <HAL_RCC_OscConfig+0x328>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e27d      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f50:	4b76      	ldr	r3, [pc, #472]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	061b      	lsls	r3, r3, #24
 8005f5e:	4973      	ldr	r1, [pc, #460]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f64:	e040      	b.n	8005fe8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d023      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a6e      	ldr	r2, [pc, #440]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7a:	f7fd fc51 	bl	8003820 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f82:	f7fd fc4d 	bl	8003820 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e25b      	b.n	800644c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f94:	4b65      	ldr	r3, [pc, #404]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa0:	4b62      	ldr	r3, [pc, #392]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	061b      	lsls	r3, r3, #24
 8005fae:	495f      	ldr	r1, [pc, #380]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	604b      	str	r3, [r1, #4]
 8005fb4:	e018      	b.n	8005fe8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a5c      	ldr	r2, [pc, #368]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc2:	f7fd fc2d 	bl	8003820 <HAL_GetTick>
 8005fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fca:	f7fd fc29 	bl	8003820 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e237      	b.n	800644c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fdc:	4b53      	ldr	r3, [pc, #332]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1f0      	bne.n	8005fca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d03c      	beq.n	800606e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01c      	beq.n	8006036 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8005ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006002:	4a4a      	ldr	r2, [pc, #296]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600c:	f7fd fc08 	bl	8003820 <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006014:	f7fd fc04 	bl	8003820 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e212      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006026:	4b41      	ldr	r3, [pc, #260]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8006028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0ef      	beq.n	8006014 <HAL_RCC_OscConfig+0x3ec>
 8006034:	e01b      	b.n	800606e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006036:	4b3d      	ldr	r3, [pc, #244]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8006038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800603c:	4a3b      	ldr	r2, [pc, #236]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006046:	f7fd fbeb 	bl	8003820 <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800604c:	e008      	b.n	8006060 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800604e:	f7fd fbe7 	bl	8003820 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e1f5      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006060:	4b32      	ldr	r3, [pc, #200]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8006062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1ef      	bne.n	800604e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80a6 	beq.w	80061c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800607c:	2300      	movs	r3, #0
 800607e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006080:	4b2a      	ldr	r3, [pc, #168]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10d      	bne.n	80060a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800608c:	4b27      	ldr	r3, [pc, #156]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 800608e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006090:	4a26      	ldr	r2, [pc, #152]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8006092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006096:	6593      	str	r3, [r2, #88]	@ 0x58
 8006098:	4b24      	ldr	r3, [pc, #144]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 800609a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800609c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060a4:	2301      	movs	r3, #1
 80060a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060a8:	4b21      	ldr	r3, [pc, #132]	@ (8006130 <HAL_RCC_OscConfig+0x508>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d118      	bne.n	80060e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006130 <HAL_RCC_OscConfig+0x508>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006130 <HAL_RCC_OscConfig+0x508>)
 80060ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060c0:	f7fd fbae 	bl	8003820 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c8:	f7fd fbaa 	bl	8003820 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e1b8      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060da:	4b15      	ldr	r3, [pc, #84]	@ (8006130 <HAL_RCC_OscConfig+0x508>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d0f0      	beq.n	80060c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d108      	bne.n	8006100 <HAL_RCC_OscConfig+0x4d8>
 80060ee:	4b0f      	ldr	r3, [pc, #60]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 80060f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f4:	4a0d      	ldr	r2, [pc, #52]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060fe:	e029      	b.n	8006154 <HAL_RCC_OscConfig+0x52c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b05      	cmp	r3, #5
 8006106:	d115      	bne.n	8006134 <HAL_RCC_OscConfig+0x50c>
 8006108:	4b08      	ldr	r3, [pc, #32]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610e:	4a07      	ldr	r2, [pc, #28]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8006110:	f043 0304 	orr.w	r3, r3, #4
 8006114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006118:	4b04      	ldr	r3, [pc, #16]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611e:	4a03      	ldr	r2, [pc, #12]	@ (800612c <HAL_RCC_OscConfig+0x504>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006128:	e014      	b.n	8006154 <HAL_RCC_OscConfig+0x52c>
 800612a:	bf00      	nop
 800612c:	40021000 	.word	0x40021000
 8006130:	40007000 	.word	0x40007000
 8006134:	4b9d      	ldr	r3, [pc, #628]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613a:	4a9c      	ldr	r2, [pc, #624]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006144:	4b99      	ldr	r3, [pc, #612]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614a:	4a98      	ldr	r2, [pc, #608]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 800614c:	f023 0304 	bic.w	r3, r3, #4
 8006150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d016      	beq.n	800618a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615c:	f7fd fb60 	bl	8003820 <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006162:	e00a      	b.n	800617a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006164:	f7fd fb5c 	bl	8003820 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e168      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800617a:	4b8c      	ldr	r3, [pc, #560]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 800617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0ed      	beq.n	8006164 <HAL_RCC_OscConfig+0x53c>
 8006188:	e015      	b.n	80061b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618a:	f7fd fb49 	bl	8003820 <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006190:	e00a      	b.n	80061a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006192:	f7fd fb45 	bl	8003820 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e151      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061a8:	4b80      	ldr	r3, [pc, #512]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1ed      	bne.n	8006192 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061b6:	7ffb      	ldrb	r3, [r7, #31]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d105      	bne.n	80061c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061bc:	4b7b      	ldr	r3, [pc, #492]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 80061be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c0:	4a7a      	ldr	r2, [pc, #488]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 80061c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d03c      	beq.n	800624e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01c      	beq.n	8006216 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061dc:	4b73      	ldr	r3, [pc, #460]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 80061de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061e2:	4a72      	ldr	r2, [pc, #456]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ec:	f7fd fb18 	bl	8003820 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061f4:	f7fd fb14 	bl	8003820 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e122      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006206:	4b69      	ldr	r3, [pc, #420]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 8006208:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0ef      	beq.n	80061f4 <HAL_RCC_OscConfig+0x5cc>
 8006214:	e01b      	b.n	800624e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006216:	4b65      	ldr	r3, [pc, #404]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 8006218:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800621c:	4a63      	ldr	r2, [pc, #396]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006226:	f7fd fafb 	bl	8003820 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800622e:	f7fd faf7 	bl	8003820 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e105      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006240:	4b5a      	ldr	r3, [pc, #360]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 8006242:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1ef      	bne.n	800622e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 80f9 	beq.w	800644a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625c:	2b02      	cmp	r3, #2
 800625e:	f040 80cf 	bne.w	8006400 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006262:	4b52      	ldr	r3, [pc, #328]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f003 0203 	and.w	r2, r3, #3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	429a      	cmp	r2, r3
 8006274:	d12c      	bne.n	80062d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006280:	3b01      	subs	r3, #1
 8006282:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006284:	429a      	cmp	r2, r3
 8006286:	d123      	bne.n	80062d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006292:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006294:	429a      	cmp	r2, r3
 8006296:	d11b      	bne.n	80062d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d113      	bne.n	80062d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	3b01      	subs	r3, #1
 80062b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d109      	bne.n	80062d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	3b01      	subs	r3, #1
 80062ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d071      	beq.n	80063b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	2b0c      	cmp	r3, #12
 80062d4:	d068      	beq.n	80063a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80062d6:	4b35      	ldr	r3, [pc, #212]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d105      	bne.n	80062ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80062e2:	4b32      	ldr	r3, [pc, #200]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0ac      	b.n	800644c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80062f2:	4b2e      	ldr	r3, [pc, #184]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2d      	ldr	r2, [pc, #180]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 80062f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80062fe:	f7fd fa8f 	bl	8003820 <HAL_GetTick>
 8006302:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006304:	e008      	b.n	8006318 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006306:	f7fd fa8b 	bl	8003820 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d901      	bls.n	8006318 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e099      	b.n	800644c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006318:	4b24      	ldr	r3, [pc, #144]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1f0      	bne.n	8006306 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006324:	4b21      	ldr	r3, [pc, #132]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	4b21      	ldr	r3, [pc, #132]	@ (80063b0 <HAL_RCC_OscConfig+0x788>)
 800632a:	4013      	ands	r3, r2
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006334:	3a01      	subs	r2, #1
 8006336:	0112      	lsls	r2, r2, #4
 8006338:	4311      	orrs	r1, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800633e:	0212      	lsls	r2, r2, #8
 8006340:	4311      	orrs	r1, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006346:	0852      	lsrs	r2, r2, #1
 8006348:	3a01      	subs	r2, #1
 800634a:	0552      	lsls	r2, r2, #21
 800634c:	4311      	orrs	r1, r2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006352:	0852      	lsrs	r2, r2, #1
 8006354:	3a01      	subs	r2, #1
 8006356:	0652      	lsls	r2, r2, #25
 8006358:	4311      	orrs	r1, r2
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800635e:	06d2      	lsls	r2, r2, #27
 8006360:	430a      	orrs	r2, r1
 8006362:	4912      	ldr	r1, [pc, #72]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 8006364:	4313      	orrs	r3, r2
 8006366:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006368:	4b10      	ldr	r3, [pc, #64]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a0f      	ldr	r2, [pc, #60]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 800636e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006372:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006374:	4b0d      	ldr	r3, [pc, #52]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4a0c      	ldr	r2, [pc, #48]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 800637a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800637e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006380:	f7fd fa4e 	bl	8003820 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006388:	f7fd fa4a 	bl	8003820 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e058      	b.n	800644c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800639a:	4b04      	ldr	r3, [pc, #16]	@ (80063ac <HAL_RCC_OscConfig+0x784>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0f0      	beq.n	8006388 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063a6:	e050      	b.n	800644a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e04f      	b.n	800644c <HAL_RCC_OscConfig+0x824>
 80063ac:	40021000 	.word	0x40021000
 80063b0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063b4:	4b27      	ldr	r3, [pc, #156]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d144      	bne.n	800644a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063c0:	4b24      	ldr	r3, [pc, #144]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a23      	ldr	r2, [pc, #140]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 80063c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063cc:	4b21      	ldr	r3, [pc, #132]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	4a20      	ldr	r2, [pc, #128]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 80063d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063d8:	f7fd fa22 	bl	8003820 <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e0:	f7fd fa1e 	bl	8003820 <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e02c      	b.n	800644c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063f2:	4b18      	ldr	r3, [pc, #96]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d0f0      	beq.n	80063e0 <HAL_RCC_OscConfig+0x7b8>
 80063fe:	e024      	b.n	800644a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	2b0c      	cmp	r3, #12
 8006404:	d01f      	beq.n	8006446 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006406:	4b13      	ldr	r3, [pc, #76]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a12      	ldr	r2, [pc, #72]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 800640c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006412:	f7fd fa05 	bl	8003820 <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800641a:	f7fd fa01 	bl	8003820 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e00f      	b.n	800644c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800642c:	4b09      	ldr	r3, [pc, #36]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1f0      	bne.n	800641a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006438:	4b06      	ldr	r3, [pc, #24]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	4905      	ldr	r1, [pc, #20]	@ (8006454 <HAL_RCC_OscConfig+0x82c>)
 800643e:	4b06      	ldr	r3, [pc, #24]	@ (8006458 <HAL_RCC_OscConfig+0x830>)
 8006440:	4013      	ands	r3, r2
 8006442:	60cb      	str	r3, [r1, #12]
 8006444:	e001      	b.n	800644a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40021000 	.word	0x40021000
 8006458:	feeefffc 	.word	0xfeeefffc

0800645c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e0e7      	b.n	8006640 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006470:	4b75      	ldr	r3, [pc, #468]	@ (8006648 <HAL_RCC_ClockConfig+0x1ec>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d910      	bls.n	80064a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647e:	4b72      	ldr	r3, [pc, #456]	@ (8006648 <HAL_RCC_ClockConfig+0x1ec>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f023 0207 	bic.w	r2, r3, #7
 8006486:	4970      	ldr	r1, [pc, #448]	@ (8006648 <HAL_RCC_ClockConfig+0x1ec>)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	4313      	orrs	r3, r2
 800648c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800648e:	4b6e      	ldr	r3, [pc, #440]	@ (8006648 <HAL_RCC_ClockConfig+0x1ec>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0307 	and.w	r3, r3, #7
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d001      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e0cf      	b.n	8006640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d010      	beq.n	80064ce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	4b66      	ldr	r3, [pc, #408]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d908      	bls.n	80064ce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064bc:	4b63      	ldr	r3, [pc, #396]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	4960      	ldr	r1, [pc, #384]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d04c      	beq.n	8006574 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d107      	bne.n	80064f2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064e2:	4b5a      	ldr	r3, [pc, #360]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d121      	bne.n	8006532 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e0a6      	b.n	8006640 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d107      	bne.n	800650a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064fa:	4b54      	ldr	r3, [pc, #336]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d115      	bne.n	8006532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e09a      	b.n	8006640 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d107      	bne.n	8006522 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006512:	4b4e      	ldr	r3, [pc, #312]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e08e      	b.n	8006640 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006522:	4b4a      	ldr	r3, [pc, #296]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e086      	b.n	8006640 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006532:	4b46      	ldr	r3, [pc, #280]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f023 0203 	bic.w	r2, r3, #3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4943      	ldr	r1, [pc, #268]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 8006540:	4313      	orrs	r3, r2
 8006542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006544:	f7fd f96c 	bl	8003820 <HAL_GetTick>
 8006548:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654a:	e00a      	b.n	8006562 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800654c:	f7fd f968 	bl	8003820 <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655a:	4293      	cmp	r3, r2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e06e      	b.n	8006640 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006562:	4b3a      	ldr	r3, [pc, #232]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 020c 	and.w	r2, r3, #12
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	429a      	cmp	r2, r3
 8006572:	d1eb      	bne.n	800654c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d010      	beq.n	80065a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	4b31      	ldr	r3, [pc, #196]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800658c:	429a      	cmp	r2, r3
 800658e:	d208      	bcs.n	80065a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006590:	4b2e      	ldr	r3, [pc, #184]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	492b      	ldr	r1, [pc, #172]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065a2:	4b29      	ldr	r3, [pc, #164]	@ (8006648 <HAL_RCC_ClockConfig+0x1ec>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d210      	bcs.n	80065d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b0:	4b25      	ldr	r3, [pc, #148]	@ (8006648 <HAL_RCC_ClockConfig+0x1ec>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f023 0207 	bic.w	r2, r3, #7
 80065b8:	4923      	ldr	r1, [pc, #140]	@ (8006648 <HAL_RCC_ClockConfig+0x1ec>)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	4313      	orrs	r3, r2
 80065be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c0:	4b21      	ldr	r3, [pc, #132]	@ (8006648 <HAL_RCC_ClockConfig+0x1ec>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d001      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e036      	b.n	8006640 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d008      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065de:	4b1b      	ldr	r3, [pc, #108]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	4918      	ldr	r1, [pc, #96]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d009      	beq.n	8006610 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065fc:	4b13      	ldr	r3, [pc, #76]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	4910      	ldr	r1, [pc, #64]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 800660c:	4313      	orrs	r3, r2
 800660e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006610:	f000 f824 	bl	800665c <HAL_RCC_GetSysClockFreq>
 8006614:	4602      	mov	r2, r0
 8006616:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <HAL_RCC_ClockConfig+0x1f0>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	f003 030f 	and.w	r3, r3, #15
 8006620:	490b      	ldr	r1, [pc, #44]	@ (8006650 <HAL_RCC_ClockConfig+0x1f4>)
 8006622:	5ccb      	ldrb	r3, [r1, r3]
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
 800662c:	4a09      	ldr	r2, [pc, #36]	@ (8006654 <HAL_RCC_ClockConfig+0x1f8>)
 800662e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006630:	4b09      	ldr	r3, [pc, #36]	@ (8006658 <HAL_RCC_ClockConfig+0x1fc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7fd f8a3 	bl	8003780 <HAL_InitTick>
 800663a:	4603      	mov	r3, r0
 800663c:	72fb      	strb	r3, [r7, #11]

  return status;
 800663e:	7afb      	ldrb	r3, [r7, #11]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40022000 	.word	0x40022000
 800664c:	40021000 	.word	0x40021000
 8006650:	0800b9a8 	.word	0x0800b9a8
 8006654:	20002f94 	.word	0x20002f94
 8006658:	20002f98 	.word	0x20002f98

0800665c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800665c:	b480      	push	{r7}
 800665e:	b089      	sub	sp, #36	@ 0x24
 8006660:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800666a:	4b3e      	ldr	r3, [pc, #248]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x108>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 030c 	and.w	r3, r3, #12
 8006672:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006674:	4b3b      	ldr	r3, [pc, #236]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x108>)
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d005      	beq.n	8006690 <HAL_RCC_GetSysClockFreq+0x34>
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	2b0c      	cmp	r3, #12
 8006688:	d121      	bne.n	80066ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d11e      	bne.n	80066ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006690:	4b34      	ldr	r3, [pc, #208]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x108>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0308 	and.w	r3, r3, #8
 8006698:	2b00      	cmp	r3, #0
 800669a:	d107      	bne.n	80066ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800669c:	4b31      	ldr	r3, [pc, #196]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x108>)
 800669e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066a2:	0a1b      	lsrs	r3, r3, #8
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	e005      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x108>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	091b      	lsrs	r3, r3, #4
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80066b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x10c>)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10d      	bne.n	80066e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066cc:	e00a      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d102      	bne.n	80066da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066d4:	4b25      	ldr	r3, [pc, #148]	@ (800676c <HAL_RCC_GetSysClockFreq+0x110>)
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	e004      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d101      	bne.n	80066e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066e0:	4b23      	ldr	r3, [pc, #140]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x114>)
 80066e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b0c      	cmp	r3, #12
 80066e8:	d134      	bne.n	8006754 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x108>)
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 0303 	and.w	r3, r3, #3
 80066f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d003      	beq.n	8006702 <HAL_RCC_GetSysClockFreq+0xa6>
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d003      	beq.n	8006708 <HAL_RCC_GetSysClockFreq+0xac>
 8006700:	e005      	b.n	800670e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006702:	4b1a      	ldr	r3, [pc, #104]	@ (800676c <HAL_RCC_GetSysClockFreq+0x110>)
 8006704:	617b      	str	r3, [r7, #20]
      break;
 8006706:	e005      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006708:	4b19      	ldr	r3, [pc, #100]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x114>)
 800670a:	617b      	str	r3, [r7, #20]
      break;
 800670c:	e002      	b.n	8006714 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	617b      	str	r3, [r7, #20]
      break;
 8006712:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006714:	4b13      	ldr	r3, [pc, #76]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x108>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	091b      	lsrs	r3, r3, #4
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	3301      	adds	r3, #1
 8006720:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006722:	4b10      	ldr	r3, [pc, #64]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x108>)
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	0a1b      	lsrs	r3, r3, #8
 8006728:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	fb03 f202 	mul.w	r2, r3, r2
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800673a:	4b0a      	ldr	r3, [pc, #40]	@ (8006764 <HAL_RCC_GetSysClockFreq+0x108>)
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	0e5b      	lsrs	r3, r3, #25
 8006740:	f003 0303 	and.w	r3, r3, #3
 8006744:	3301      	adds	r3, #1
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006752:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006754:	69bb      	ldr	r3, [r7, #24]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3724      	adds	r7, #36	@ 0x24
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40021000 	.word	0x40021000
 8006768:	0800b9c0 	.word	0x0800b9c0
 800676c:	00f42400 	.word	0x00f42400
 8006770:	007a1200 	.word	0x007a1200

08006774 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006778:	4b03      	ldr	r3, [pc, #12]	@ (8006788 <HAL_RCC_GetHCLKFreq+0x14>)
 800677a:	681b      	ldr	r3, [r3, #0]
}
 800677c:	4618      	mov	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	20002f94 	.word	0x20002f94

0800678c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006790:	f7ff fff0 	bl	8006774 <HAL_RCC_GetHCLKFreq>
 8006794:	4602      	mov	r2, r0
 8006796:	4b06      	ldr	r3, [pc, #24]	@ (80067b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	0a1b      	lsrs	r3, r3, #8
 800679c:	f003 0307 	and.w	r3, r3, #7
 80067a0:	4904      	ldr	r1, [pc, #16]	@ (80067b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067a2:	5ccb      	ldrb	r3, [r1, r3]
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	40021000 	.word	0x40021000
 80067b4:	0800b9b8 	.word	0x0800b9b8

080067b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067bc:	f7ff ffda 	bl	8006774 <HAL_RCC_GetHCLKFreq>
 80067c0:	4602      	mov	r2, r0
 80067c2:	4b06      	ldr	r3, [pc, #24]	@ (80067dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	0adb      	lsrs	r3, r3, #11
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	4904      	ldr	r1, [pc, #16]	@ (80067e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067ce:	5ccb      	ldrb	r3, [r1, r3]
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067d8:	4618      	mov	r0, r3
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40021000 	.word	0x40021000
 80067e0:	0800b9b8 	.word	0x0800b9b8

080067e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80067f0:	4b2a      	ldr	r3, [pc, #168]	@ (800689c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80067fc:	f7ff f9a0 	bl	8005b40 <HAL_PWREx_GetVoltageRange>
 8006800:	6178      	str	r0, [r7, #20]
 8006802:	e014      	b.n	800682e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006804:	4b25      	ldr	r3, [pc, #148]	@ (800689c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006808:	4a24      	ldr	r2, [pc, #144]	@ (800689c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800680a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800680e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006810:	4b22      	ldr	r3, [pc, #136]	@ (800689c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800681c:	f7ff f990 	bl	8005b40 <HAL_PWREx_GetVoltageRange>
 8006820:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006822:	4b1e      	ldr	r3, [pc, #120]	@ (800689c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006826:	4a1d      	ldr	r2, [pc, #116]	@ (800689c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006828:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800682c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006834:	d10b      	bne.n	800684e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b80      	cmp	r3, #128	@ 0x80
 800683a:	d919      	bls.n	8006870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006840:	d902      	bls.n	8006848 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006842:	2302      	movs	r3, #2
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e013      	b.n	8006870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006848:	2301      	movs	r3, #1
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	e010      	b.n	8006870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b80      	cmp	r3, #128	@ 0x80
 8006852:	d902      	bls.n	800685a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006854:	2303      	movs	r3, #3
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	e00a      	b.n	8006870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b80      	cmp	r3, #128	@ 0x80
 800685e:	d102      	bne.n	8006866 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006860:	2302      	movs	r3, #2
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	e004      	b.n	8006870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2b70      	cmp	r3, #112	@ 0x70
 800686a:	d101      	bne.n	8006870 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800686c:	2301      	movs	r3, #1
 800686e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006870:	4b0b      	ldr	r3, [pc, #44]	@ (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f023 0207 	bic.w	r2, r3, #7
 8006878:	4909      	ldr	r1, [pc, #36]	@ (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006880:	4b07      	ldr	r3, [pc, #28]	@ (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	429a      	cmp	r2, r3
 800688c:	d001      	beq.n	8006892 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e000      	b.n	8006894 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	40021000 	.word	0x40021000
 80068a0:	40022000 	.word	0x40022000

080068a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068ac:	2300      	movs	r3, #0
 80068ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068b0:	2300      	movs	r3, #0
 80068b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d041      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80068c8:	d02a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80068ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80068ce:	d824      	bhi.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068d4:	d008      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80068d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068da:	d81e      	bhi.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80068e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068e4:	d010      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80068e6:	e018      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80068e8:	4b86      	ldr	r3, [pc, #536]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	4a85      	ldr	r2, [pc, #532]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068f4:	e015      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3304      	adds	r3, #4
 80068fa:	2100      	movs	r1, #0
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 facd 	bl	8006e9c <RCCEx_PLLSAI1_Config>
 8006902:	4603      	mov	r3, r0
 8006904:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006906:	e00c      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3320      	adds	r3, #32
 800690c:	2100      	movs	r1, #0
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fbb6 	bl	8007080 <RCCEx_PLLSAI2_Config>
 8006914:	4603      	mov	r3, r0
 8006916:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006918:	e003      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	74fb      	strb	r3, [r7, #19]
      break;
 800691e:	e000      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006922:	7cfb      	ldrb	r3, [r7, #19]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10b      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006928:	4b76      	ldr	r3, [pc, #472]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006936:	4973      	ldr	r1, [pc, #460]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006938:	4313      	orrs	r3, r2
 800693a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800693e:	e001      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006940:	7cfb      	ldrb	r3, [r7, #19]
 8006942:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d041      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006954:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006958:	d02a      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800695a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800695e:	d824      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006960:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006964:	d008      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006966:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800696a:	d81e      	bhi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006974:	d010      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006976:	e018      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006978:	4b62      	ldr	r3, [pc, #392]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	4a61      	ldr	r2, [pc, #388]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800697e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006982:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006984:	e015      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3304      	adds	r3, #4
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fa85 	bl	8006e9c <RCCEx_PLLSAI1_Config>
 8006992:	4603      	mov	r3, r0
 8006994:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006996:	e00c      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3320      	adds	r3, #32
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fb6e 	bl	8007080 <RCCEx_PLLSAI2_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80069a8:	e003      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	74fb      	strb	r3, [r7, #19]
      break;
 80069ae:	e000      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80069b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b2:	7cfb      	ldrb	r3, [r7, #19]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10b      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069b8:	4b52      	ldr	r3, [pc, #328]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069c6:	494f      	ldr	r1, [pc, #316]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80069ce:	e001      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	7cfb      	ldrb	r3, [r7, #19]
 80069d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80a0 	beq.w	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e2:	2300      	movs	r3, #0
 80069e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069e6:	4b47      	ldr	r3, [pc, #284]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00d      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069fc:	4b41      	ldr	r3, [pc, #260]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a00:	4a40      	ldr	r2, [pc, #256]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a06:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a08:	4b3e      	ldr	r3, [pc, #248]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a10:	60bb      	str	r3, [r7, #8]
 8006a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a14:	2301      	movs	r3, #1
 8006a16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a18:	4b3b      	ldr	r3, [pc, #236]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a3a      	ldr	r2, [pc, #232]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a24:	f7fc fefc 	bl	8003820 <HAL_GetTick>
 8006a28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a2a:	e009      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a2c:	f7fc fef8 	bl	8003820 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d902      	bls.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	74fb      	strb	r3, [r7, #19]
        break;
 8006a3e:	e005      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006a40:	4b31      	ldr	r3, [pc, #196]	@ (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0ef      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006a4c:	7cfb      	ldrb	r3, [r7, #19]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d15c      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a52:	4b2c      	ldr	r3, [pc, #176]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01f      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d019      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a70:	4b24      	ldr	r3, [pc, #144]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a7c:	4b21      	ldr	r3, [pc, #132]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a82:	4a20      	ldr	r2, [pc, #128]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a92:	4a1c      	ldr	r2, [pc, #112]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a9c:	4a19      	ldr	r2, [pc, #100]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aae:	f7fc feb7 	bl	8003820 <HAL_GetTick>
 8006ab2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ab4:	e00b      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab6:	f7fc feb3 	bl	8003820 <HAL_GetTick>
 8006aba:	4602      	mov	r2, r0
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d902      	bls.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	74fb      	strb	r3, [r7, #19]
            break;
 8006acc:	e006      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ace:	4b0d      	ldr	r3, [pc, #52]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0ec      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006adc:	7cfb      	ldrb	r3, [r7, #19]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10c      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ae2:	4b08      	ldr	r3, [pc, #32]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ae8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af2:	4904      	ldr	r1, [pc, #16]	@ (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006afa:	e009      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006afc:	7cfb      	ldrb	r3, [r7, #19]
 8006afe:	74bb      	strb	r3, [r7, #18]
 8006b00:	e006      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006b02:	bf00      	nop
 8006b04:	40021000 	.word	0x40021000
 8006b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	7cfb      	ldrb	r3, [r7, #19]
 8006b0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b10:	7c7b      	ldrb	r3, [r7, #17]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d105      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b16:	4ba6      	ldr	r3, [pc, #664]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b1a:	4aa5      	ldr	r2, [pc, #660]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00a      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b2e:	4ba0      	ldr	r3, [pc, #640]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b34:	f023 0203 	bic.w	r2, r3, #3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	499c      	ldr	r1, [pc, #624]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b50:	4b97      	ldr	r3, [pc, #604]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b56:	f023 020c 	bic.w	r2, r3, #12
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b5e:	4994      	ldr	r1, [pc, #592]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00a      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b72:	4b8f      	ldr	r3, [pc, #572]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b80:	498b      	ldr	r1, [pc, #556]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0308 	and.w	r3, r3, #8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b94:	4b86      	ldr	r3, [pc, #536]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba2:	4983      	ldr	r1, [pc, #524]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006bb6:	4b7e      	ldr	r3, [pc, #504]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bc4:	497a      	ldr	r1, [pc, #488]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bd8:	4b75      	ldr	r3, [pc, #468]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be6:	4972      	ldr	r1, [pc, #456]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00a      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bfa:	4b6d      	ldr	r3, [pc, #436]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c08:	4969      	ldr	r1, [pc, #420]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c1c:	4b64      	ldr	r3, [pc, #400]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c2a:	4961      	ldr	r1, [pc, #388]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c3e:	4b5c      	ldr	r3, [pc, #368]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c4c:	4958      	ldr	r1, [pc, #352]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c60:	4b53      	ldr	r3, [pc, #332]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6e:	4950      	ldr	r1, [pc, #320]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c82:	4b4b      	ldr	r3, [pc, #300]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c90:	4947      	ldr	r1, [pc, #284]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ca4:	4b42      	ldr	r3, [pc, #264]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006caa:	f023 0203 	bic.w	r2, r3, #3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb2:	493f      	ldr	r1, [pc, #252]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d028      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ccc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd4:	4936      	ldr	r1, [pc, #216]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ce4:	d106      	bne.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce6:	4b32      	ldr	r3, [pc, #200]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	4a31      	ldr	r2, [pc, #196]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006cec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cf0:	60d3      	str	r3, [r2, #12]
 8006cf2:	e011      	b.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cfc:	d10c      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3304      	adds	r3, #4
 8006d02:	2101      	movs	r1, #1
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 f8c9 	bl	8006e9c <RCCEx_PLLSAI1_Config>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006d0e:	7cfb      	ldrb	r3, [r7, #19]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8006d14:	7cfb      	ldrb	r3, [r7, #19]
 8006d16:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d028      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006d24:	4b22      	ldr	r3, [pc, #136]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d32:	491f      	ldr	r1, [pc, #124]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d42:	d106      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d44:	4b1a      	ldr	r3, [pc, #104]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	4a19      	ldr	r2, [pc, #100]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d4e:	60d3      	str	r3, [r2, #12]
 8006d50:	e011      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d5a:	d10c      	bne.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	2101      	movs	r1, #1
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 f89a 	bl	8006e9c <RCCEx_PLLSAI1_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d6c:	7cfb      	ldrb	r3, [r7, #19]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8006d72:	7cfb      	ldrb	r3, [r7, #19]
 8006d74:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d02a      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d82:	4b0b      	ldr	r3, [pc, #44]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d90:	4907      	ldr	r1, [pc, #28]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006da0:	d108      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da2:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4a02      	ldr	r2, [pc, #8]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006da8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dac:	60d3      	str	r3, [r2, #12]
 8006dae:	e013      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006db0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006db8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f869 	bl	8006e9c <RCCEx_PLLSAI1_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d02f      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006de4:	4b2c      	ldr	r3, [pc, #176]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006df2:	4929      	ldr	r1, [pc, #164]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e02:	d10d      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3304      	adds	r3, #4
 8006e08:	2102      	movs	r1, #2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 f846 	bl	8006e9c <RCCEx_PLLSAI1_Config>
 8006e10:	4603      	mov	r3, r0
 8006e12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e14:	7cfb      	ldrb	r3, [r7, #19]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d014      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006e1a:	7cfb      	ldrb	r3, [r7, #19]
 8006e1c:	74bb      	strb	r3, [r7, #18]
 8006e1e:	e011      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3320      	adds	r3, #32
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 f925 	bl	8007080 <RCCEx_PLLSAI2_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e3a:	7cfb      	ldrb	r3, [r7, #19]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006e40:	7cfb      	ldrb	r3, [r7, #19]
 8006e42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e50:	4b11      	ldr	r3, [pc, #68]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e60:	490d      	ldr	r1, [pc, #52]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e74:	4b08      	ldr	r3, [pc, #32]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e84:	4904      	ldr	r1, [pc, #16]	@ (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006e8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40021000 	.word	0x40021000

08006e9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006eaa:	4b74      	ldr	r3, [pc, #464]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d018      	beq.n	8006ee8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006eb6:	4b71      	ldr	r3, [pc, #452]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f003 0203 	and.w	r2, r3, #3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d10d      	bne.n	8006ee2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006ece:	4b6b      	ldr	r3, [pc, #428]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	091b      	lsrs	r3, r3, #4
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
       ||
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d047      	beq.n	8006f72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	73fb      	strb	r3, [r7, #15]
 8006ee6:	e044      	b.n	8006f72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d018      	beq.n	8006f22 <RCCEx_PLLSAI1_Config+0x86>
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d825      	bhi.n	8006f40 <RCCEx_PLLSAI1_Config+0xa4>
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d002      	beq.n	8006efe <RCCEx_PLLSAI1_Config+0x62>
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d009      	beq.n	8006f10 <RCCEx_PLLSAI1_Config+0x74>
 8006efc:	e020      	b.n	8006f40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006efe:	4b5f      	ldr	r3, [pc, #380]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d11d      	bne.n	8006f46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f0e:	e01a      	b.n	8006f46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006f10:	4b5a      	ldr	r3, [pc, #360]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d116      	bne.n	8006f4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f20:	e013      	b.n	8006f4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006f22:	4b56      	ldr	r3, [pc, #344]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10f      	bne.n	8006f4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006f2e:	4b53      	ldr	r3, [pc, #332]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f3e:	e006      	b.n	8006f4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	73fb      	strb	r3, [r7, #15]
      break;
 8006f44:	e004      	b.n	8006f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f46:	bf00      	nop
 8006f48:	e002      	b.n	8006f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f4a:	bf00      	nop
 8006f4c:	e000      	b.n	8006f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006f4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10d      	bne.n	8006f72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f56:	4b49      	ldr	r3, [pc, #292]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6819      	ldr	r1, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	011b      	lsls	r3, r3, #4
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	4943      	ldr	r1, [pc, #268]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d17c      	bne.n	8007072 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006f78:	4b40      	ldr	r3, [pc, #256]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006f7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f84:	f7fc fc4c 	bl	8003820 <HAL_GetTick>
 8006f88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006f8a:	e009      	b.n	8006fa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f8c:	f7fc fc48 	bl	8003820 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d902      	bls.n	8006fa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006f9e:	e005      	b.n	8006fac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006fa0:	4b36      	ldr	r3, [pc, #216]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1ef      	bne.n	8006f8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d15f      	bne.n	8007072 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d110      	bne.n	8006fda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fb8:	4b30      	ldr	r3, [pc, #192]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006fc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6892      	ldr	r2, [r2, #8]
 8006fc8:	0211      	lsls	r1, r2, #8
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68d2      	ldr	r2, [r2, #12]
 8006fce:	06d2      	lsls	r2, r2, #27
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	492a      	ldr	r1, [pc, #168]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	610b      	str	r3, [r1, #16]
 8006fd8:	e027      	b.n	800702a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d112      	bne.n	8007006 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006fe0:	4b26      	ldr	r3, [pc, #152]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006fe8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6892      	ldr	r2, [r2, #8]
 8006ff0:	0211      	lsls	r1, r2, #8
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6912      	ldr	r2, [r2, #16]
 8006ff6:	0852      	lsrs	r2, r2, #1
 8006ff8:	3a01      	subs	r2, #1
 8006ffa:	0552      	lsls	r2, r2, #21
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	491f      	ldr	r1, [pc, #124]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007000:	4313      	orrs	r3, r2
 8007002:	610b      	str	r3, [r1, #16]
 8007004:	e011      	b.n	800702a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007006:	4b1d      	ldr	r3, [pc, #116]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800700e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	6892      	ldr	r2, [r2, #8]
 8007016:	0211      	lsls	r1, r2, #8
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6952      	ldr	r2, [r2, #20]
 800701c:	0852      	lsrs	r2, r2, #1
 800701e:	3a01      	subs	r2, #1
 8007020:	0652      	lsls	r2, r2, #25
 8007022:	430a      	orrs	r2, r1
 8007024:	4915      	ldr	r1, [pc, #84]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007026:	4313      	orrs	r3, r2
 8007028:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800702a:	4b14      	ldr	r3, [pc, #80]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a13      	ldr	r2, [pc, #76]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007030:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007034:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007036:	f7fc fbf3 	bl	8003820 <HAL_GetTick>
 800703a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800703c:	e009      	b.n	8007052 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800703e:	f7fc fbef 	bl	8003820 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d902      	bls.n	8007052 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	73fb      	strb	r3, [r7, #15]
          break;
 8007050:	e005      	b.n	800705e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007052:	4b0a      	ldr	r3, [pc, #40]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0ef      	beq.n	800703e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007064:	4b05      	ldr	r3, [pc, #20]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	4903      	ldr	r1, [pc, #12]	@ (800707c <RCCEx_PLLSAI1_Config+0x1e0>)
 800706e:	4313      	orrs	r3, r2
 8007070:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007072:	7bfb      	ldrb	r3, [r7, #15]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	40021000 	.word	0x40021000

08007080 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800708e:	4b69      	ldr	r3, [pc, #420]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d018      	beq.n	80070cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800709a:	4b66      	ldr	r3, [pc, #408]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f003 0203 	and.w	r2, r3, #3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d10d      	bne.n	80070c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
       ||
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80070b2:	4b60      	ldr	r3, [pc, #384]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	091b      	lsrs	r3, r3, #4
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
       ||
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d047      	beq.n	8007156 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	73fb      	strb	r3, [r7, #15]
 80070ca:	e044      	b.n	8007156 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b03      	cmp	r3, #3
 80070d2:	d018      	beq.n	8007106 <RCCEx_PLLSAI2_Config+0x86>
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d825      	bhi.n	8007124 <RCCEx_PLLSAI2_Config+0xa4>
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d002      	beq.n	80070e2 <RCCEx_PLLSAI2_Config+0x62>
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d009      	beq.n	80070f4 <RCCEx_PLLSAI2_Config+0x74>
 80070e0:	e020      	b.n	8007124 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070e2:	4b54      	ldr	r3, [pc, #336]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d11d      	bne.n	800712a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070f2:	e01a      	b.n	800712a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070f4:	4b4f      	ldr	r3, [pc, #316]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d116      	bne.n	800712e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007104:	e013      	b.n	800712e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007106:	4b4b      	ldr	r3, [pc, #300]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10f      	bne.n	8007132 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007112:	4b48      	ldr	r3, [pc, #288]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d109      	bne.n	8007132 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007122:	e006      	b.n	8007132 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e004      	b.n	8007134 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800712a:	bf00      	nop
 800712c:	e002      	b.n	8007134 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007132:	bf00      	nop
    }

    if(status == HAL_OK)
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10d      	bne.n	8007156 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800713a:	4b3e      	ldr	r3, [pc, #248]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6819      	ldr	r1, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	3b01      	subs	r3, #1
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	430b      	orrs	r3, r1
 8007150:	4938      	ldr	r1, [pc, #224]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007152:	4313      	orrs	r3, r2
 8007154:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d166      	bne.n	800722a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800715c:	4b35      	ldr	r3, [pc, #212]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a34      	ldr	r2, [pc, #208]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007168:	f7fc fb5a 	bl	8003820 <HAL_GetTick>
 800716c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800716e:	e009      	b.n	8007184 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007170:	f7fc fb56 	bl	8003820 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d902      	bls.n	8007184 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	73fb      	strb	r3, [r7, #15]
        break;
 8007182:	e005      	b.n	8007190 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007184:	4b2b      	ldr	r3, [pc, #172]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1ef      	bne.n	8007170 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d149      	bne.n	800722a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d110      	bne.n	80071be <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800719c:	4b25      	ldr	r3, [pc, #148]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80071a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6892      	ldr	r2, [r2, #8]
 80071ac:	0211      	lsls	r1, r2, #8
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68d2      	ldr	r2, [r2, #12]
 80071b2:	06d2      	lsls	r2, r2, #27
 80071b4:	430a      	orrs	r2, r1
 80071b6:	491f      	ldr	r1, [pc, #124]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	614b      	str	r3, [r1, #20]
 80071bc:	e011      	b.n	80071e2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80071be:	4b1d      	ldr	r3, [pc, #116]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80071c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6892      	ldr	r2, [r2, #8]
 80071ce:	0211      	lsls	r1, r2, #8
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	6912      	ldr	r2, [r2, #16]
 80071d4:	0852      	lsrs	r2, r2, #1
 80071d6:	3a01      	subs	r2, #1
 80071d8:	0652      	lsls	r2, r2, #25
 80071da:	430a      	orrs	r2, r1
 80071dc:	4915      	ldr	r1, [pc, #84]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80071e2:	4b14      	ldr	r3, [pc, #80]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a13      	ldr	r2, [pc, #76]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 80071e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ee:	f7fc fb17 	bl	8003820 <HAL_GetTick>
 80071f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80071f4:	e009      	b.n	800720a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80071f6:	f7fc fb13 	bl	8003820 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d902      	bls.n	800720a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	73fb      	strb	r3, [r7, #15]
          break;
 8007208:	e005      	b.n	8007216 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800720a:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0ef      	beq.n	80071f6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d106      	bne.n	800722a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800721c:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 800721e:	695a      	ldr	r2, [r3, #20]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	4903      	ldr	r1, [pc, #12]	@ (8007234 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007226:	4313      	orrs	r3, r2
 8007228:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40021000 	.word	0x40021000

08007238 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e095      	b.n	8007376 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d108      	bne.n	8007264 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800725a:	d009      	beq.n	8007270 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	61da      	str	r2, [r3, #28]
 8007262:	e005      	b.n	8007270 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fb ff68 	bl	8003160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072b0:	d902      	bls.n	80072b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072b2:	2300      	movs	r3, #0
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e002      	b.n	80072be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80072c6:	d007      	beq.n	80072d8 <HAL_SPI_Init+0xa0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072d0:	d002      	beq.n	80072d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80072e8:	431a      	orrs	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f003 0301 	and.w	r3, r3, #1
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007310:	431a      	orrs	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800731a:	ea42 0103 	orr.w	r1, r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	0c1b      	lsrs	r3, r3, #16
 8007334:	f003 0204 	and.w	r2, r3, #4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007354:	ea42 0103 	orr.w	r1, r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b08a      	sub	sp, #40	@ 0x28
 8007382:	af00      	add	r7, sp, #0
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	607a      	str	r2, [r7, #4]
 800738a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800738c:	2301      	movs	r3, #1
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007390:	f7fc fa46 	bl	8003820 <HAL_GetTick>
 8007394:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800739c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80073a4:	887b      	ldrh	r3, [r7, #2]
 80073a6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80073a8:	887b      	ldrh	r3, [r7, #2]
 80073aa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073ac:	7ffb      	ldrb	r3, [r7, #31]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d00c      	beq.n	80073cc <HAL_SPI_TransmitReceive+0x4e>
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073b8:	d106      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x4a>
 80073c2:	7ffb      	ldrb	r3, [r7, #31]
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d001      	beq.n	80073cc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80073c8:	2302      	movs	r3, #2
 80073ca:	e1f3      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <HAL_SPI_TransmitReceive+0x60>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <HAL_SPI_TransmitReceive+0x60>
 80073d8:	887b      	ldrh	r3, [r7, #2]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e1e8      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_SPI_TransmitReceive+0x72>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e1e1      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x436>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b04      	cmp	r3, #4
 8007402:	d003      	beq.n	800740c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2205      	movs	r2, #5
 8007408:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	887a      	ldrh	r2, [r7, #2]
 800741c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	887a      	ldrh	r2, [r7, #2]
 8007424:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	887a      	ldrh	r2, [r7, #2]
 8007432:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	887a      	ldrh	r2, [r7, #2]
 8007438:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800744e:	d802      	bhi.n	8007456 <HAL_SPI_TransmitReceive+0xd8>
 8007450:	8abb      	ldrh	r3, [r7, #20]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d908      	bls.n	8007468 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007464:	605a      	str	r2, [r3, #4]
 8007466:	e007      	b.n	8007478 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007476:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007482:	2b40      	cmp	r3, #64	@ 0x40
 8007484:	d007      	beq.n	8007496 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007494:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800749e:	f240 8083 	bls.w	80075a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <HAL_SPI_TransmitReceive+0x132>
 80074aa:	8afb      	ldrh	r3, [r7, #22]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d16f      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b4:	881a      	ldrh	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	1c9a      	adds	r2, r3, #2
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3b01      	subs	r3, #1
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074d4:	e05c      	b.n	8007590 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d11b      	bne.n	800751c <HAL_SPI_TransmitReceive+0x19e>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d016      	beq.n	800751c <HAL_SPI_TransmitReceive+0x19e>
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d113      	bne.n	800751c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f8:	881a      	ldrh	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007504:	1c9a      	adds	r2, r3, #2
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b01      	cmp	r3, #1
 8007528:	d11c      	bne.n	8007564 <HAL_SPI_TransmitReceive+0x1e6>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d016      	beq.n	8007564 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007540:	b292      	uxth	r2, r2
 8007542:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007548:	1c9a      	adds	r2, r3, #2
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007560:	2301      	movs	r3, #1
 8007562:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007564:	f7fc f95c 	bl	8003820 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007570:	429a      	cmp	r2, r3
 8007572:	d80d      	bhi.n	8007590 <HAL_SPI_TransmitReceive+0x212>
 8007574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d009      	beq.n	8007590 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800758c:	2303      	movs	r3, #3
 800758e:	e111      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007594:	b29b      	uxth	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d19d      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x158>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d197      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x158>
 80075a6:	e0e5      	b.n	8007774 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_SPI_TransmitReceive+0x23a>
 80075b0:	8afb      	ldrh	r3, [r7, #22]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	f040 80d1 	bne.w	800775a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d912      	bls.n	80075e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c6:	881a      	ldrh	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d2:	1c9a      	adds	r2, r3, #2
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b02      	subs	r3, #2
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075e6:	e0b8      	b.n	800775a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	330c      	adds	r3, #12
 80075f2:	7812      	ldrb	r2, [r2, #0]
 80075f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800760e:	e0a4      	b.n	800775a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b02      	cmp	r3, #2
 800761c:	d134      	bne.n	8007688 <HAL_SPI_TransmitReceive+0x30a>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007622:	b29b      	uxth	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d02f      	beq.n	8007688 <HAL_SPI_TransmitReceive+0x30a>
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762a:	2b01      	cmp	r3, #1
 800762c:	d12c      	bne.n	8007688 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d912      	bls.n	800765e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763c:	881a      	ldrh	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007648:	1c9a      	adds	r2, r3, #2
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b02      	subs	r3, #2
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800765c:	e012      	b.n	8007684 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	7812      	ldrb	r2, [r2, #0]
 800766a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800767a:	b29b      	uxth	r3, r3
 800767c:	3b01      	subs	r3, #1
 800767e:	b29a      	uxth	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b01      	cmp	r3, #1
 8007694:	d148      	bne.n	8007728 <HAL_SPI_TransmitReceive+0x3aa>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d042      	beq.n	8007728 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d923      	bls.n	80076f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b8:	b292      	uxth	r2, r2
 80076ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c0:	1c9a      	adds	r2, r3, #2
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b02      	subs	r3, #2
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076de:	b29b      	uxth	r3, r3
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d81f      	bhi.n	8007724 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80076f2:	605a      	str	r2, [r3, #4]
 80076f4:	e016      	b.n	8007724 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f103 020c 	add.w	r2, r3, #12
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007718:	b29b      	uxth	r3, r3
 800771a:	3b01      	subs	r3, #1
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007724:	2301      	movs	r3, #1
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007728:	f7fc f87a 	bl	8003820 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007734:	429a      	cmp	r2, r3
 8007736:	d803      	bhi.n	8007740 <HAL_SPI_TransmitReceive+0x3c2>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d102      	bne.n	8007746 <HAL_SPI_TransmitReceive+0x3c8>
 8007740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007742:	2b00      	cmp	r3, #0
 8007744:	d109      	bne.n	800775a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007756:	2303      	movs	r3, #3
 8007758:	e02c      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775e:	b29b      	uxth	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	f47f af55 	bne.w	8007610 <HAL_SPI_TransmitReceive+0x292>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800776c:	b29b      	uxth	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	f47f af4e 	bne.w	8007610 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007774:	6a3a      	ldr	r2, [r7, #32]
 8007776:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f93d 	bl	80079f8 <SPI_EndRxTxTransaction>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e00e      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80077b2:	2300      	movs	r3, #0
  }
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3728      	adds	r7, #40	@ 0x28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	4613      	mov	r3, r2
 80077ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077cc:	f7fc f828 	bl	8003820 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d4:	1a9b      	subs	r3, r3, r2
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	4413      	add	r3, r2
 80077da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077dc:	f7fc f820 	bl	8003820 <HAL_GetTick>
 80077e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077e2:	4b39      	ldr	r3, [pc, #228]	@ (80078c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	015b      	lsls	r3, r3, #5
 80077e8:	0d1b      	lsrs	r3, r3, #20
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	fb02 f303 	mul.w	r3, r2, r3
 80077f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077f2:	e054      	b.n	800789e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	d050      	beq.n	800789e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077fc:	f7fc f810 	bl	8003820 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	429a      	cmp	r2, r3
 800780a:	d902      	bls.n	8007812 <SPI_WaitFlagStateUntilTimeout+0x56>
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d13d      	bne.n	800788e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007820:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800782a:	d111      	bne.n	8007850 <SPI_WaitFlagStateUntilTimeout+0x94>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007834:	d004      	beq.n	8007840 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800783e:	d107      	bne.n	8007850 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800784e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007858:	d10f      	bne.n	800787a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007878:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	e017      	b.n	80078be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	3b01      	subs	r3, #1
 800789c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4013      	ands	r3, r2
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	bf0c      	ite	eq
 80078ae:	2301      	moveq	r3, #1
 80078b0:	2300      	movne	r3, #0
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	461a      	mov	r2, r3
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d19b      	bne.n	80077f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3720      	adds	r7, #32
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20002f94 	.word	0x20002f94

080078cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08a      	sub	sp, #40	@ 0x28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80078de:	f7fb ff9f 	bl	8003820 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e6:	1a9b      	subs	r3, r3, r2
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	4413      	add	r3, r2
 80078ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80078ee:	f7fb ff97 	bl	8003820 <HAL_GetTick>
 80078f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	330c      	adds	r3, #12
 80078fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80078fc:	4b3d      	ldr	r3, [pc, #244]	@ (80079f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	00da      	lsls	r2, r3, #3
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	0d1b      	lsrs	r3, r3, #20
 800790c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800790e:	fb02 f303 	mul.w	r3, r2, r3
 8007912:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007914:	e060      	b.n	80079d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800791c:	d107      	bne.n	800792e <SPI_WaitFifoStateUntilTimeout+0x62>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d104      	bne.n	800792e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800792c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007934:	d050      	beq.n	80079d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007936:	f7fb ff73 	bl	8003820 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007942:	429a      	cmp	r2, r3
 8007944:	d902      	bls.n	800794c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	d13d      	bne.n	80079c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800795a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007964:	d111      	bne.n	800798a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800796e:	d004      	beq.n	800797a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007978:	d107      	bne.n	800798a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007988:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007992:	d10f      	bne.n	80079b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e010      	b.n	80079ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689a      	ldr	r2, [r3, #8]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	4013      	ands	r3, r2
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d196      	bne.n	8007916 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3728      	adds	r7, #40	@ 0x28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20002f94 	.word	0x20002f94

080079f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff ff5b 	bl	80078cc <SPI_WaitFifoStateUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d007      	beq.n	8007a2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a20:	f043 0220 	orr.w	r2, r3, #32
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e027      	b.n	8007a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2200      	movs	r2, #0
 8007a34:	2180      	movs	r1, #128	@ 0x80
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7ff fec0 	bl	80077bc <SPI_WaitFlagStateUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d007      	beq.n	8007a52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a46:	f043 0220 	orr.w	r2, r3, #32
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e014      	b.n	8007a7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f7ff ff34 	bl	80078cc <SPI_WaitFifoStateUntilTimeout>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a6e:	f043 0220 	orr.w	r2, r3, #32
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e000      	b.n	8007a7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e049      	b.n	8007b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d106      	bne.n	8007ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fb fce6 	bl	800347c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f000 faa0 	bl	8008008 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d001      	beq.n	8007b4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e047      	b.n	8007bdc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a23      	ldr	r2, [pc, #140]	@ (8007be8 <HAL_TIM_Base_Start+0xb4>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d01d      	beq.n	8007b9a <HAL_TIM_Base_Start+0x66>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b66:	d018      	beq.n	8007b9a <HAL_TIM_Base_Start+0x66>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bec <HAL_TIM_Base_Start+0xb8>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d013      	beq.n	8007b9a <HAL_TIM_Base_Start+0x66>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1e      	ldr	r2, [pc, #120]	@ (8007bf0 <HAL_TIM_Base_Start+0xbc>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00e      	beq.n	8007b9a <HAL_TIM_Base_Start+0x66>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf4 <HAL_TIM_Base_Start+0xc0>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d009      	beq.n	8007b9a <HAL_TIM_Base_Start+0x66>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf8 <HAL_TIM_Base_Start+0xc4>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d004      	beq.n	8007b9a <HAL_TIM_Base_Start+0x66>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a19      	ldr	r2, [pc, #100]	@ (8007bfc <HAL_TIM_Base_Start+0xc8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d115      	bne.n	8007bc6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689a      	ldr	r2, [r3, #8]
 8007ba0:	4b17      	ldr	r3, [pc, #92]	@ (8007c00 <HAL_TIM_Base_Start+0xcc>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b06      	cmp	r3, #6
 8007baa:	d015      	beq.n	8007bd8 <HAL_TIM_Base_Start+0xa4>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb2:	d011      	beq.n	8007bd8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc4:	e008      	b.n	8007bd8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0201 	orr.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	e000      	b.n	8007bda <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr
 8007be8:	40012c00 	.word	0x40012c00
 8007bec:	40000400 	.word	0x40000400
 8007bf0:	40000800 	.word	0x40000800
 8007bf4:	40000c00 	.word	0x40000c00
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	00010007 	.word	0x00010007

08007c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f003 0302 	and.w	r3, r3, #2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d020      	beq.n	8007c68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01b      	beq.n	8007c68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f06f 0202 	mvn.w	r2, #2
 8007c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f9bc 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007c54:	e005      	b.n	8007c62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f9ae 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f9bf 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d020      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d01b      	beq.n	8007cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0204 	mvn.w	r2, #4
 8007c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f996 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007ca0:	e005      	b.n	8007cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f988 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f999 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f003 0308 	and.w	r3, r3, #8
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d020      	beq.n	8007d00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f003 0308 	and.w	r3, r3, #8
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01b      	beq.n	8007d00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0208 	mvn.w	r2, #8
 8007cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f970 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007cec:	e005      	b.n	8007cfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f962 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f973 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f003 0310 	and.w	r3, r3, #16
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d020      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01b      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f06f 0210 	mvn.w	r2, #16
 8007d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2208      	movs	r2, #8
 8007d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f94a 	bl	8007fcc <HAL_TIM_IC_CaptureCallback>
 8007d38:	e005      	b.n	8007d46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f93c 	bl	8007fb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f94d 	bl	8007fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00c      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0201 	mvn.w	r2, #1
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f91a 	bl	8007fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d104      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00c      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d007      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fb07 	bl	80083ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00c      	beq.n	8007dc2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d007      	beq.n	8007dc2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 faff 	bl	80083c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00c      	beq.n	8007de6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d007      	beq.n	8007de6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f907 	bl	8007ff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00c      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f003 0320 	and.w	r3, r3, #32
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d007      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f06f 0220 	mvn.w	r2, #32
 8007e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fac7 	bl	8008398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <HAL_TIM_ConfigClockSource+0x1c>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e0b6      	b.n	8007f9c <HAL_TIM_ConfigClockSource+0x18a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2202      	movs	r2, #2
 8007e3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e4c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e58:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e6a:	d03e      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0xd8>
 8007e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e70:	f200 8087 	bhi.w	8007f82 <HAL_TIM_ConfigClockSource+0x170>
 8007e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e78:	f000 8086 	beq.w	8007f88 <HAL_TIM_ConfigClockSource+0x176>
 8007e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e80:	d87f      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x170>
 8007e82:	2b70      	cmp	r3, #112	@ 0x70
 8007e84:	d01a      	beq.n	8007ebc <HAL_TIM_ConfigClockSource+0xaa>
 8007e86:	2b70      	cmp	r3, #112	@ 0x70
 8007e88:	d87b      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x170>
 8007e8a:	2b60      	cmp	r3, #96	@ 0x60
 8007e8c:	d050      	beq.n	8007f30 <HAL_TIM_ConfigClockSource+0x11e>
 8007e8e:	2b60      	cmp	r3, #96	@ 0x60
 8007e90:	d877      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x170>
 8007e92:	2b50      	cmp	r3, #80	@ 0x50
 8007e94:	d03c      	beq.n	8007f10 <HAL_TIM_ConfigClockSource+0xfe>
 8007e96:	2b50      	cmp	r3, #80	@ 0x50
 8007e98:	d873      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x170>
 8007e9a:	2b40      	cmp	r3, #64	@ 0x40
 8007e9c:	d058      	beq.n	8007f50 <HAL_TIM_ConfigClockSource+0x13e>
 8007e9e:	2b40      	cmp	r3, #64	@ 0x40
 8007ea0:	d86f      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x170>
 8007ea2:	2b30      	cmp	r3, #48	@ 0x30
 8007ea4:	d064      	beq.n	8007f70 <HAL_TIM_ConfigClockSource+0x15e>
 8007ea6:	2b30      	cmp	r3, #48	@ 0x30
 8007ea8:	d86b      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x170>
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d060      	beq.n	8007f70 <HAL_TIM_ConfigClockSource+0x15e>
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d867      	bhi.n	8007f82 <HAL_TIM_ConfigClockSource+0x170>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d05c      	beq.n	8007f70 <HAL_TIM_ConfigClockSource+0x15e>
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d05a      	beq.n	8007f70 <HAL_TIM_ConfigClockSource+0x15e>
 8007eba:	e062      	b.n	8007f82 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ecc:	f000 f9bc 	bl	8008248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ede:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	609a      	str	r2, [r3, #8]
      break;
 8007ee8:	e04f      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007efa:	f000 f9a5 	bl	8008248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f0c:	609a      	str	r2, [r3, #8]
      break;
 8007f0e:	e03c      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	f000 f919 	bl	8008154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2150      	movs	r1, #80	@ 0x50
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f000 f972 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007f2e:	e02c      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f000 f938 	bl	80081b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2160      	movs	r1, #96	@ 0x60
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f000 f962 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007f4e:	e01c      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f000 f8f9 	bl	8008154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2140      	movs	r1, #64	@ 0x40
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 f952 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007f6e:	e00c      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	f000 f949 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007f80:	e003      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
      break;
 8007f86:	e000      	b.n	8007f8a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007f88:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a46      	ldr	r2, [pc, #280]	@ (8008134 <TIM_Base_SetConfig+0x12c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d013      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008026:	d00f      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a43      	ldr	r2, [pc, #268]	@ (8008138 <TIM_Base_SetConfig+0x130>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00b      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a42      	ldr	r2, [pc, #264]	@ (800813c <TIM_Base_SetConfig+0x134>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d007      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a41      	ldr	r2, [pc, #260]	@ (8008140 <TIM_Base_SetConfig+0x138>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d003      	beq.n	8008048 <TIM_Base_SetConfig+0x40>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a40      	ldr	r2, [pc, #256]	@ (8008144 <TIM_Base_SetConfig+0x13c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d108      	bne.n	800805a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800804e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a35      	ldr	r2, [pc, #212]	@ (8008134 <TIM_Base_SetConfig+0x12c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d01f      	beq.n	80080a2 <TIM_Base_SetConfig+0x9a>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008068:	d01b      	beq.n	80080a2 <TIM_Base_SetConfig+0x9a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a32      	ldr	r2, [pc, #200]	@ (8008138 <TIM_Base_SetConfig+0x130>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d017      	beq.n	80080a2 <TIM_Base_SetConfig+0x9a>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a31      	ldr	r2, [pc, #196]	@ (800813c <TIM_Base_SetConfig+0x134>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <TIM_Base_SetConfig+0x9a>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a30      	ldr	r2, [pc, #192]	@ (8008140 <TIM_Base_SetConfig+0x138>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d00f      	beq.n	80080a2 <TIM_Base_SetConfig+0x9a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a2f      	ldr	r2, [pc, #188]	@ (8008144 <TIM_Base_SetConfig+0x13c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d00b      	beq.n	80080a2 <TIM_Base_SetConfig+0x9a>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a2e      	ldr	r2, [pc, #184]	@ (8008148 <TIM_Base_SetConfig+0x140>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d007      	beq.n	80080a2 <TIM_Base_SetConfig+0x9a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a2d      	ldr	r2, [pc, #180]	@ (800814c <TIM_Base_SetConfig+0x144>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d003      	beq.n	80080a2 <TIM_Base_SetConfig+0x9a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a2c      	ldr	r2, [pc, #176]	@ (8008150 <TIM_Base_SetConfig+0x148>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d108      	bne.n	80080b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	68fa      	ldr	r2, [r7, #12]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a16      	ldr	r2, [pc, #88]	@ (8008134 <TIM_Base_SetConfig+0x12c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d00f      	beq.n	8008100 <TIM_Base_SetConfig+0xf8>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a18      	ldr	r2, [pc, #96]	@ (8008144 <TIM_Base_SetConfig+0x13c>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00b      	beq.n	8008100 <TIM_Base_SetConfig+0xf8>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a17      	ldr	r2, [pc, #92]	@ (8008148 <TIM_Base_SetConfig+0x140>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d007      	beq.n	8008100 <TIM_Base_SetConfig+0xf8>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a16      	ldr	r2, [pc, #88]	@ (800814c <TIM_Base_SetConfig+0x144>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_Base_SetConfig+0xf8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a15      	ldr	r2, [pc, #84]	@ (8008150 <TIM_Base_SetConfig+0x148>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d103      	bne.n	8008108 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b01      	cmp	r3, #1
 8008118:	d105      	bne.n	8008126 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f023 0201 	bic.w	r2, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	611a      	str	r2, [r3, #16]
  }
}
 8008126:	bf00      	nop
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40012c00 	.word	0x40012c00
 8008138:	40000400 	.word	0x40000400
 800813c:	40000800 	.word	0x40000800
 8008140:	40000c00 	.word	0x40000c00
 8008144:	40013400 	.word	0x40013400
 8008148:	40014000 	.word	0x40014000
 800814c:	40014400 	.word	0x40014400
 8008150:	40014800 	.word	0x40014800

08008154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800817e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f023 030a 	bic.w	r3, r3, #10
 8008190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	f023 0210 	bic.w	r2, r3, #16
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	031b      	lsls	r3, r3, #12
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80081ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4313      	orrs	r3, r2
 8008230:	f043 0307 	orr.w	r3, r3, #7
 8008234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	609a      	str	r2, [r3, #8]
}
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	021a      	lsls	r2, r3, #8
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	431a      	orrs	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4313      	orrs	r3, r2
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	4313      	orrs	r3, r2
 8008274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	609a      	str	r2, [r3, #8]
}
 800827c:	bf00      	nop
 800827e:	371c      	adds	r7, #28
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800829c:	2302      	movs	r3, #2
 800829e:	e068      	b.n	8008372 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a2e      	ldr	r2, [pc, #184]	@ (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d004      	beq.n	80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a2d      	ldr	r2, [pc, #180]	@ (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d108      	bne.n	80082e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80082da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a1e      	ldr	r2, [pc, #120]	@ (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d01d      	beq.n	8008346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008312:	d018      	beq.n	8008346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1b      	ldr	r2, [pc, #108]	@ (8008388 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d013      	beq.n	8008346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1a      	ldr	r2, [pc, #104]	@ (800838c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00e      	beq.n	8008346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a18      	ldr	r2, [pc, #96]	@ (8008390 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d009      	beq.n	8008346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a13      	ldr	r2, [pc, #76]	@ (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d004      	beq.n	8008346 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a14      	ldr	r2, [pc, #80]	@ (8008394 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d10c      	bne.n	8008360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800834c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	4313      	orrs	r3, r2
 8008356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	40012c00 	.word	0x40012c00
 8008384:	40013400 	.word	0x40013400
 8008388:	40000400 	.word	0x40000400
 800838c:	40000800 	.word	0x40000800
 8008390:	40000c00 	.word	0x40000c00
 8008394:	40014000 	.word	0x40014000

08008398 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083b4:	bf00      	nop
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e040      	b.n	8008468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d106      	bne.n	80083fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7fb f892 	bl	8003520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2224      	movs	r2, #36	@ 0x24
 8008400:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 0201 	bic.w	r2, r2, #1
 8008410:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fc32 	bl	8008c84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f977 	bl	8008714 <UART_SetConfig>
 8008426:	4603      	mov	r3, r0
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e01b      	b.n	8008468 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800843e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800844e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0201 	orr.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fcb1 	bl	8008dc8 <UART_CheckIdleState>
 8008466:	4603      	mov	r3, r0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08a      	sub	sp, #40	@ 0x28
 8008474:	af02      	add	r7, sp, #8
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	4613      	mov	r3, r2
 800847e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008484:	2b20      	cmp	r3, #32
 8008486:	d177      	bne.n	8008578 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <HAL_UART_Transmit+0x24>
 800848e:	88fb      	ldrh	r3, [r7, #6]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e070      	b.n	800857a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2221      	movs	r2, #33	@ 0x21
 80084a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084a6:	f7fb f9bb 	bl	8003820 <HAL_GetTick>
 80084aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	88fa      	ldrh	r2, [r7, #6]
 80084b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	88fa      	ldrh	r2, [r7, #6]
 80084b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c4:	d108      	bne.n	80084d8 <HAL_UART_Transmit+0x68>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d104      	bne.n	80084d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	e003      	b.n	80084e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084e0:	e02f      	b.n	8008542 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	2180      	movs	r1, #128	@ 0x80
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 fd13 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d004      	beq.n	8008502 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2220      	movs	r2, #32
 80084fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e03b      	b.n	800857a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	881a      	ldrh	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008514:	b292      	uxth	r2, r2
 8008516:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	3302      	adds	r3, #2
 800851c:	61bb      	str	r3, [r7, #24]
 800851e:	e007      	b.n	8008530 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	781a      	ldrb	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	3301      	adds	r3, #1
 800852e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008536:	b29b      	uxth	r3, r3
 8008538:	3b01      	subs	r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008548:	b29b      	uxth	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1c9      	bne.n	80084e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2200      	movs	r2, #0
 8008556:	2140      	movs	r1, #64	@ 0x40
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 fcdd 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d004      	beq.n	800856e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2220      	movs	r2, #32
 8008568:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e005      	b.n	800857a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2220      	movs	r2, #32
 8008572:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	e000      	b.n	800857a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008578:	2302      	movs	r3, #2
  }
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b08a      	sub	sp, #40	@ 0x28
 8008586:	af02      	add	r7, sp, #8
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	603b      	str	r3, [r7, #0]
 800858e:	4613      	mov	r3, r2
 8008590:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008598:	2b20      	cmp	r3, #32
 800859a:	f040 80b6 	bne.w	800870a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <HAL_UART_Receive+0x28>
 80085a4:	88fb      	ldrh	r3, [r7, #6]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e0ae      	b.n	800870c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2222      	movs	r2, #34	@ 0x22
 80085ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085c4:	f7fb f92c 	bl	8003820 <HAL_GetTick>
 80085c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	88fa      	ldrh	r2, [r7, #6]
 80085ce:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	88fa      	ldrh	r2, [r7, #6]
 80085d6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085e2:	d10e      	bne.n	8008602 <HAL_UART_Receive+0x80>
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d105      	bne.n	80085f8 <HAL_UART_Receive+0x76>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80085f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085f6:	e02d      	b.n	8008654 <HAL_UART_Receive+0xd2>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	22ff      	movs	r2, #255	@ 0xff
 80085fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008600:	e028      	b.n	8008654 <HAL_UART_Receive+0xd2>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10d      	bne.n	8008626 <HAL_UART_Receive+0xa4>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <HAL_UART_Receive+0x9a>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	22ff      	movs	r2, #255	@ 0xff
 8008616:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800861a:	e01b      	b.n	8008654 <HAL_UART_Receive+0xd2>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	227f      	movs	r2, #127	@ 0x7f
 8008620:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008624:	e016      	b.n	8008654 <HAL_UART_Receive+0xd2>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800862e:	d10d      	bne.n	800864c <HAL_UART_Receive+0xca>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <HAL_UART_Receive+0xc0>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	227f      	movs	r2, #127	@ 0x7f
 800863c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008640:	e008      	b.n	8008654 <HAL_UART_Receive+0xd2>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	223f      	movs	r2, #63	@ 0x3f
 8008646:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800864a:	e003      	b.n	8008654 <HAL_UART_Receive+0xd2>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800865a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008664:	d108      	bne.n	8008678 <HAL_UART_Receive+0xf6>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d104      	bne.n	8008678 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	61bb      	str	r3, [r7, #24]
 8008676:	e003      	b.n	8008680 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800867c:	2300      	movs	r3, #0
 800867e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008680:	e037      	b.n	80086f2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	2200      	movs	r2, #0
 800868a:	2120      	movs	r1, #32
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 fc43 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d005      	beq.n	80086a4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2220      	movs	r2, #32
 800869c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e033      	b.n	800870c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10c      	bne.n	80086c4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	8a7b      	ldrh	r3, [r7, #18]
 80086b4:	4013      	ands	r3, r2
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	3302      	adds	r3, #2
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	e00d      	b.n	80086e0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	8a7b      	ldrh	r3, [r7, #18]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	4013      	ands	r3, r2
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	3301      	adds	r3, #1
 80086de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1c1      	bne.n	8008682 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2220      	movs	r2, #32
 8008702:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	e000      	b.n	800870c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800870a:	2302      	movs	r3, #2
  }
}
 800870c:	4618      	mov	r0, r3
 800870e:	3720      	adds	r7, #32
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008718:	b08a      	sub	sp, #40	@ 0x28
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	431a      	orrs	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	431a      	orrs	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	69db      	ldr	r3, [r3, #28]
 8008738:	4313      	orrs	r3, r2
 800873a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	4ba4      	ldr	r3, [pc, #656]	@ (80089d4 <UART_SetConfig+0x2c0>)
 8008744:	4013      	ands	r3, r2
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800874c:	430b      	orrs	r3, r1
 800874e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a99      	ldr	r2, [pc, #612]	@ (80089d8 <UART_SetConfig+0x2c4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d004      	beq.n	8008780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800877c:	4313      	orrs	r3, r2
 800877e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008790:	430a      	orrs	r2, r1
 8008792:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a90      	ldr	r2, [pc, #576]	@ (80089dc <UART_SetConfig+0x2c8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d126      	bne.n	80087ec <UART_SetConfig+0xd8>
 800879e:	4b90      	ldr	r3, [pc, #576]	@ (80089e0 <UART_SetConfig+0x2cc>)
 80087a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a4:	f003 0303 	and.w	r3, r3, #3
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d81b      	bhi.n	80087e4 <UART_SetConfig+0xd0>
 80087ac:	a201      	add	r2, pc, #4	@ (adr r2, 80087b4 <UART_SetConfig+0xa0>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087c5 	.word	0x080087c5
 80087b8:	080087d5 	.word	0x080087d5
 80087bc:	080087cd 	.word	0x080087cd
 80087c0:	080087dd 	.word	0x080087dd
 80087c4:	2301      	movs	r3, #1
 80087c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ca:	e116      	b.n	80089fa <UART_SetConfig+0x2e6>
 80087cc:	2302      	movs	r3, #2
 80087ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087d2:	e112      	b.n	80089fa <UART_SetConfig+0x2e6>
 80087d4:	2304      	movs	r3, #4
 80087d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087da:	e10e      	b.n	80089fa <UART_SetConfig+0x2e6>
 80087dc:	2308      	movs	r3, #8
 80087de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087e2:	e10a      	b.n	80089fa <UART_SetConfig+0x2e6>
 80087e4:	2310      	movs	r3, #16
 80087e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80087ea:	e106      	b.n	80089fa <UART_SetConfig+0x2e6>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a7c      	ldr	r2, [pc, #496]	@ (80089e4 <UART_SetConfig+0x2d0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d138      	bne.n	8008868 <UART_SetConfig+0x154>
 80087f6:	4b7a      	ldr	r3, [pc, #488]	@ (80089e0 <UART_SetConfig+0x2cc>)
 80087f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087fc:	f003 030c 	and.w	r3, r3, #12
 8008800:	2b0c      	cmp	r3, #12
 8008802:	d82d      	bhi.n	8008860 <UART_SetConfig+0x14c>
 8008804:	a201      	add	r2, pc, #4	@ (adr r2, 800880c <UART_SetConfig+0xf8>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	08008841 	.word	0x08008841
 8008810:	08008861 	.word	0x08008861
 8008814:	08008861 	.word	0x08008861
 8008818:	08008861 	.word	0x08008861
 800881c:	08008851 	.word	0x08008851
 8008820:	08008861 	.word	0x08008861
 8008824:	08008861 	.word	0x08008861
 8008828:	08008861 	.word	0x08008861
 800882c:	08008849 	.word	0x08008849
 8008830:	08008861 	.word	0x08008861
 8008834:	08008861 	.word	0x08008861
 8008838:	08008861 	.word	0x08008861
 800883c:	08008859 	.word	0x08008859
 8008840:	2300      	movs	r3, #0
 8008842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008846:	e0d8      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008848:	2302      	movs	r3, #2
 800884a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800884e:	e0d4      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008856:	e0d0      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800885e:	e0cc      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008866:	e0c8      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a5e      	ldr	r2, [pc, #376]	@ (80089e8 <UART_SetConfig+0x2d4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d125      	bne.n	80088be <UART_SetConfig+0x1aa>
 8008872:	4b5b      	ldr	r3, [pc, #364]	@ (80089e0 <UART_SetConfig+0x2cc>)
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008878:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800887c:	2b30      	cmp	r3, #48	@ 0x30
 800887e:	d016      	beq.n	80088ae <UART_SetConfig+0x19a>
 8008880:	2b30      	cmp	r3, #48	@ 0x30
 8008882:	d818      	bhi.n	80088b6 <UART_SetConfig+0x1a2>
 8008884:	2b20      	cmp	r3, #32
 8008886:	d00a      	beq.n	800889e <UART_SetConfig+0x18a>
 8008888:	2b20      	cmp	r3, #32
 800888a:	d814      	bhi.n	80088b6 <UART_SetConfig+0x1a2>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <UART_SetConfig+0x182>
 8008890:	2b10      	cmp	r3, #16
 8008892:	d008      	beq.n	80088a6 <UART_SetConfig+0x192>
 8008894:	e00f      	b.n	80088b6 <UART_SetConfig+0x1a2>
 8008896:	2300      	movs	r3, #0
 8008898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800889c:	e0ad      	b.n	80089fa <UART_SetConfig+0x2e6>
 800889e:	2302      	movs	r3, #2
 80088a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088a4:	e0a9      	b.n	80089fa <UART_SetConfig+0x2e6>
 80088a6:	2304      	movs	r3, #4
 80088a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088ac:	e0a5      	b.n	80089fa <UART_SetConfig+0x2e6>
 80088ae:	2308      	movs	r3, #8
 80088b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088b4:	e0a1      	b.n	80089fa <UART_SetConfig+0x2e6>
 80088b6:	2310      	movs	r3, #16
 80088b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088bc:	e09d      	b.n	80089fa <UART_SetConfig+0x2e6>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a4a      	ldr	r2, [pc, #296]	@ (80089ec <UART_SetConfig+0x2d8>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d125      	bne.n	8008914 <UART_SetConfig+0x200>
 80088c8:	4b45      	ldr	r3, [pc, #276]	@ (80089e0 <UART_SetConfig+0x2cc>)
 80088ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80088d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80088d4:	d016      	beq.n	8008904 <UART_SetConfig+0x1f0>
 80088d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80088d8:	d818      	bhi.n	800890c <UART_SetConfig+0x1f8>
 80088da:	2b80      	cmp	r3, #128	@ 0x80
 80088dc:	d00a      	beq.n	80088f4 <UART_SetConfig+0x1e0>
 80088de:	2b80      	cmp	r3, #128	@ 0x80
 80088e0:	d814      	bhi.n	800890c <UART_SetConfig+0x1f8>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <UART_SetConfig+0x1d8>
 80088e6:	2b40      	cmp	r3, #64	@ 0x40
 80088e8:	d008      	beq.n	80088fc <UART_SetConfig+0x1e8>
 80088ea:	e00f      	b.n	800890c <UART_SetConfig+0x1f8>
 80088ec:	2300      	movs	r3, #0
 80088ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088f2:	e082      	b.n	80089fa <UART_SetConfig+0x2e6>
 80088f4:	2302      	movs	r3, #2
 80088f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80088fa:	e07e      	b.n	80089fa <UART_SetConfig+0x2e6>
 80088fc:	2304      	movs	r3, #4
 80088fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008902:	e07a      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008904:	2308      	movs	r3, #8
 8008906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800890a:	e076      	b.n	80089fa <UART_SetConfig+0x2e6>
 800890c:	2310      	movs	r3, #16
 800890e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008912:	e072      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a35      	ldr	r2, [pc, #212]	@ (80089f0 <UART_SetConfig+0x2dc>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d12a      	bne.n	8008974 <UART_SetConfig+0x260>
 800891e:	4b30      	ldr	r3, [pc, #192]	@ (80089e0 <UART_SetConfig+0x2cc>)
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008924:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008928:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800892c:	d01a      	beq.n	8008964 <UART_SetConfig+0x250>
 800892e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008932:	d81b      	bhi.n	800896c <UART_SetConfig+0x258>
 8008934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008938:	d00c      	beq.n	8008954 <UART_SetConfig+0x240>
 800893a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800893e:	d815      	bhi.n	800896c <UART_SetConfig+0x258>
 8008940:	2b00      	cmp	r3, #0
 8008942:	d003      	beq.n	800894c <UART_SetConfig+0x238>
 8008944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008948:	d008      	beq.n	800895c <UART_SetConfig+0x248>
 800894a:	e00f      	b.n	800896c <UART_SetConfig+0x258>
 800894c:	2300      	movs	r3, #0
 800894e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008952:	e052      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008954:	2302      	movs	r3, #2
 8008956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800895a:	e04e      	b.n	80089fa <UART_SetConfig+0x2e6>
 800895c:	2304      	movs	r3, #4
 800895e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008962:	e04a      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008964:	2308      	movs	r3, #8
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800896a:	e046      	b.n	80089fa <UART_SetConfig+0x2e6>
 800896c:	2310      	movs	r3, #16
 800896e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008972:	e042      	b.n	80089fa <UART_SetConfig+0x2e6>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a17      	ldr	r2, [pc, #92]	@ (80089d8 <UART_SetConfig+0x2c4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d13a      	bne.n	80089f4 <UART_SetConfig+0x2e0>
 800897e:	4b18      	ldr	r3, [pc, #96]	@ (80089e0 <UART_SetConfig+0x2cc>)
 8008980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008984:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008988:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800898c:	d01a      	beq.n	80089c4 <UART_SetConfig+0x2b0>
 800898e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008992:	d81b      	bhi.n	80089cc <UART_SetConfig+0x2b8>
 8008994:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008998:	d00c      	beq.n	80089b4 <UART_SetConfig+0x2a0>
 800899a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800899e:	d815      	bhi.n	80089cc <UART_SetConfig+0x2b8>
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d003      	beq.n	80089ac <UART_SetConfig+0x298>
 80089a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089a8:	d008      	beq.n	80089bc <UART_SetConfig+0x2a8>
 80089aa:	e00f      	b.n	80089cc <UART_SetConfig+0x2b8>
 80089ac:	2300      	movs	r3, #0
 80089ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089b2:	e022      	b.n	80089fa <UART_SetConfig+0x2e6>
 80089b4:	2302      	movs	r3, #2
 80089b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089ba:	e01e      	b.n	80089fa <UART_SetConfig+0x2e6>
 80089bc:	2304      	movs	r3, #4
 80089be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089c2:	e01a      	b.n	80089fa <UART_SetConfig+0x2e6>
 80089c4:	2308      	movs	r3, #8
 80089c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089ca:	e016      	b.n	80089fa <UART_SetConfig+0x2e6>
 80089cc:	2310      	movs	r3, #16
 80089ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80089d2:	e012      	b.n	80089fa <UART_SetConfig+0x2e6>
 80089d4:	efff69f3 	.word	0xefff69f3
 80089d8:	40008000 	.word	0x40008000
 80089dc:	40013800 	.word	0x40013800
 80089e0:	40021000 	.word	0x40021000
 80089e4:	40004400 	.word	0x40004400
 80089e8:	40004800 	.word	0x40004800
 80089ec:	40004c00 	.word	0x40004c00
 80089f0:	40005000 	.word	0x40005000
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a9f      	ldr	r2, [pc, #636]	@ (8008c7c <UART_SetConfig+0x568>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d17a      	bne.n	8008afa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d824      	bhi.n	8008a56 <UART_SetConfig+0x342>
 8008a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a14 <UART_SetConfig+0x300>)
 8008a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a12:	bf00      	nop
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a57 	.word	0x08008a57
 8008a1c:	08008a41 	.word	0x08008a41
 8008a20:	08008a57 	.word	0x08008a57
 8008a24:	08008a47 	.word	0x08008a47
 8008a28:	08008a57 	.word	0x08008a57
 8008a2c:	08008a57 	.word	0x08008a57
 8008a30:	08008a57 	.word	0x08008a57
 8008a34:	08008a4f 	.word	0x08008a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a38:	f7fd fea8 	bl	800678c <HAL_RCC_GetPCLK1Freq>
 8008a3c:	61f8      	str	r0, [r7, #28]
        break;
 8008a3e:	e010      	b.n	8008a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a40:	4b8f      	ldr	r3, [pc, #572]	@ (8008c80 <UART_SetConfig+0x56c>)
 8008a42:	61fb      	str	r3, [r7, #28]
        break;
 8008a44:	e00d      	b.n	8008a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a46:	f7fd fe09 	bl	800665c <HAL_RCC_GetSysClockFreq>
 8008a4a:	61f8      	str	r0, [r7, #28]
        break;
 8008a4c:	e009      	b.n	8008a62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a52:	61fb      	str	r3, [r7, #28]
        break;
 8008a54:	e005      	b.n	8008a62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a56:	2300      	movs	r3, #0
 8008a58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008a60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f000 80fb 	beq.w	8008c60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	4413      	add	r3, r2
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d305      	bcc.n	8008a86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a80:	69fa      	ldr	r2, [r7, #28]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d903      	bls.n	8008a8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008a8c:	e0e8      	b.n	8008c60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	2200      	movs	r2, #0
 8008a92:	461c      	mov	r4, r3
 8008a94:	4615      	mov	r5, r2
 8008a96:	f04f 0200 	mov.w	r2, #0
 8008a9a:	f04f 0300 	mov.w	r3, #0
 8008a9e:	022b      	lsls	r3, r5, #8
 8008aa0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008aa4:	0222      	lsls	r2, r4, #8
 8008aa6:	68f9      	ldr	r1, [r7, #12]
 8008aa8:	6849      	ldr	r1, [r1, #4]
 8008aaa:	0849      	lsrs	r1, r1, #1
 8008aac:	2000      	movs	r0, #0
 8008aae:	4688      	mov	r8, r1
 8008ab0:	4681      	mov	r9, r0
 8008ab2:	eb12 0a08 	adds.w	sl, r2, r8
 8008ab6:	eb43 0b09 	adc.w	fp, r3, r9
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	603b      	str	r3, [r7, #0]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac8:	4650      	mov	r0, sl
 8008aca:	4659      	mov	r1, fp
 8008acc:	f7f7 fbe0 	bl	8000290 <__aeabi_uldivmod>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ade:	d308      	bcc.n	8008af2 <UART_SetConfig+0x3de>
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ae6:	d204      	bcs.n	8008af2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	60da      	str	r2, [r3, #12]
 8008af0:	e0b6      	b.n	8008c60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008af8:	e0b2      	b.n	8008c60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b02:	d15e      	bne.n	8008bc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008b04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008b08:	2b08      	cmp	r3, #8
 8008b0a:	d828      	bhi.n	8008b5e <UART_SetConfig+0x44a>
 8008b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b14 <UART_SetConfig+0x400>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008b39 	.word	0x08008b39
 8008b18:	08008b41 	.word	0x08008b41
 8008b1c:	08008b49 	.word	0x08008b49
 8008b20:	08008b5f 	.word	0x08008b5f
 8008b24:	08008b4f 	.word	0x08008b4f
 8008b28:	08008b5f 	.word	0x08008b5f
 8008b2c:	08008b5f 	.word	0x08008b5f
 8008b30:	08008b5f 	.word	0x08008b5f
 8008b34:	08008b57 	.word	0x08008b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b38:	f7fd fe28 	bl	800678c <HAL_RCC_GetPCLK1Freq>
 8008b3c:	61f8      	str	r0, [r7, #28]
        break;
 8008b3e:	e014      	b.n	8008b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b40:	f7fd fe3a 	bl	80067b8 <HAL_RCC_GetPCLK2Freq>
 8008b44:	61f8      	str	r0, [r7, #28]
        break;
 8008b46:	e010      	b.n	8008b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b48:	4b4d      	ldr	r3, [pc, #308]	@ (8008c80 <UART_SetConfig+0x56c>)
 8008b4a:	61fb      	str	r3, [r7, #28]
        break;
 8008b4c:	e00d      	b.n	8008b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b4e:	f7fd fd85 	bl	800665c <HAL_RCC_GetSysClockFreq>
 8008b52:	61f8      	str	r0, [r7, #28]
        break;
 8008b54:	e009      	b.n	8008b6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b5a:	61fb      	str	r3, [r7, #28]
        break;
 8008b5c:	e005      	b.n	8008b6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d077      	beq.n	8008c60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	005a      	lsls	r2, r3, #1
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	085b      	lsrs	r3, r3, #1
 8008b7a:	441a      	add	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b0f      	cmp	r3, #15
 8008b8a:	d916      	bls.n	8008bba <UART_SetConfig+0x4a6>
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b92:	d212      	bcs.n	8008bba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f023 030f 	bic.w	r3, r3, #15
 8008b9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	085b      	lsrs	r3, r3, #1
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	8afb      	ldrh	r3, [r7, #22]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	8afa      	ldrh	r2, [r7, #22]
 8008bb6:	60da      	str	r2, [r3, #12]
 8008bb8:	e052      	b.n	8008c60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008bc0:	e04e      	b.n	8008c60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008bc6:	2b08      	cmp	r3, #8
 8008bc8:	d827      	bhi.n	8008c1a <UART_SetConfig+0x506>
 8008bca:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd0 <UART_SetConfig+0x4bc>)
 8008bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd0:	08008bf5 	.word	0x08008bf5
 8008bd4:	08008bfd 	.word	0x08008bfd
 8008bd8:	08008c05 	.word	0x08008c05
 8008bdc:	08008c1b 	.word	0x08008c1b
 8008be0:	08008c0b 	.word	0x08008c0b
 8008be4:	08008c1b 	.word	0x08008c1b
 8008be8:	08008c1b 	.word	0x08008c1b
 8008bec:	08008c1b 	.word	0x08008c1b
 8008bf0:	08008c13 	.word	0x08008c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf4:	f7fd fdca 	bl	800678c <HAL_RCC_GetPCLK1Freq>
 8008bf8:	61f8      	str	r0, [r7, #28]
        break;
 8008bfa:	e014      	b.n	8008c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bfc:	f7fd fddc 	bl	80067b8 <HAL_RCC_GetPCLK2Freq>
 8008c00:	61f8      	str	r0, [r7, #28]
        break;
 8008c02:	e010      	b.n	8008c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c04:	4b1e      	ldr	r3, [pc, #120]	@ (8008c80 <UART_SetConfig+0x56c>)
 8008c06:	61fb      	str	r3, [r7, #28]
        break;
 8008c08:	e00d      	b.n	8008c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c0a:	f7fd fd27 	bl	800665c <HAL_RCC_GetSysClockFreq>
 8008c0e:	61f8      	str	r0, [r7, #28]
        break;
 8008c10:	e009      	b.n	8008c26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c16:	61fb      	str	r3, [r7, #28]
        break;
 8008c18:	e005      	b.n	8008c26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008c24:	bf00      	nop
    }

    if (pclk != 0U)
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d019      	beq.n	8008c60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	085a      	lsrs	r2, r3, #1
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	441a      	add	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	2b0f      	cmp	r3, #15
 8008c44:	d909      	bls.n	8008c5a <UART_SetConfig+0x546>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c4c:	d205      	bcs.n	8008c5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60da      	str	r2, [r3, #12]
 8008c58:	e002      	b.n	8008c60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008c6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3728      	adds	r7, #40	@ 0x28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c7a:	bf00      	nop
 8008c7c:	40008000 	.word	0x40008000
 8008c80:	00f42400 	.word	0x00f42400

08008c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c90:	f003 0308 	and.w	r3, r3, #8
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf6:	f003 0304 	and.w	r3, r3, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d18:	f003 0310 	and.w	r3, r3, #16
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3a:	f003 0320 	and.w	r3, r3, #32
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	430a      	orrs	r2, r1
 8008d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01a      	beq.n	8008d9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d82:	d10a      	bne.n	8008d9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	605a      	str	r2, [r3, #4]
  }
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b098      	sub	sp, #96	@ 0x60
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dd8:	f7fa fd22 	bl	8003820 <HAL_GetTick>
 8008ddc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0308 	and.w	r3, r3, #8
 8008de8:	2b08      	cmp	r3, #8
 8008dea:	d12e      	bne.n	8008e4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008df4:	2200      	movs	r2, #0
 8008df6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f88c 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d021      	beq.n	8008e4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	e853 3f00 	ldrex	r3, [r3]
 8008e12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	461a      	mov	r2, r3
 8008e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e2c:	e841 2300 	strex	r3, r2, [r1]
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e6      	bne.n	8008e06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e062      	b.n	8008f10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0304 	and.w	r3, r3, #4
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	d149      	bne.n	8008eec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e60:	2200      	movs	r2, #0
 8008e62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f856 	bl	8008f18 <UART_WaitOnFlagUntilTimeout>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d03c      	beq.n	8008eec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	623b      	str	r3, [r7, #32]
   return(result);
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e90:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e6      	bne.n	8008e72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f023 0301 	bic.w	r3, r3, #1
 8008eba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ec4:	61fa      	str	r2, [r7, #28]
 8008ec6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	69b9      	ldr	r1, [r7, #24]
 8008eca:	69fa      	ldr	r2, [r7, #28]
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e5      	bne.n	8008ea4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2220      	movs	r2, #32
 8008edc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e011      	b.n	8008f10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2220      	movs	r2, #32
 8008ef0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3758      	adds	r7, #88	@ 0x58
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f28:	e04f      	b.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d04b      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f32:	f7fa fc75 	bl	8003820 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	69ba      	ldr	r2, [r7, #24]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d302      	bcc.n	8008f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d101      	bne.n	8008f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e04e      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0304 	and.w	r3, r3, #4
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d037      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b80      	cmp	r3, #128	@ 0x80
 8008f5e:	d034      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2b40      	cmp	r3, #64	@ 0x40
 8008f64:	d031      	beq.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	f003 0308 	and.w	r3, r3, #8
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d110      	bne.n	8008f96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2208      	movs	r2, #8
 8008f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f838 	bl	8008ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2208      	movs	r2, #8
 8008f86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e029      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fa4:	d111      	bne.n	8008fca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f81e 	bl	8008ff2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e00f      	b.n	8008fea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	bf0c      	ite	eq
 8008fda:	2301      	moveq	r3, #1
 8008fdc:	2300      	movne	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d0a0      	beq.n	8008f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b095      	sub	sp, #84	@ 0x54
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800900e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009018:	643b      	str	r3, [r7, #64]	@ 0x40
 800901a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800901e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e6      	bne.n	8008ffa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3308      	adds	r3, #8
 8009032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	e853 3f00 	ldrex	r3, [r3]
 800903a:	61fb      	str	r3, [r7, #28]
   return(result);
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f023 0301 	bic.w	r3, r3, #1
 8009042:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3308      	adds	r3, #8
 800904a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800904c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800904e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009050:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009054:	e841 2300 	strex	r3, r2, [r1]
 8009058:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800905a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1e5      	bne.n	800902c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009064:	2b01      	cmp	r3, #1
 8009066:	d118      	bne.n	800909a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	60bb      	str	r3, [r7, #8]
   return(result);
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f023 0310 	bic.w	r3, r3, #16
 800907c:	647b      	str	r3, [r7, #68]	@ 0x44
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009086:	61bb      	str	r3, [r7, #24]
 8009088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6979      	ldr	r1, [r7, #20]
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	613b      	str	r3, [r7, #16]
   return(result);
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e6      	bne.n	8009068 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80090ae:	bf00      	nop
 80090b0:	3754      	adds	r7, #84	@ 0x54
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
	...

080090bc <arm_split_rfft_q15>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	b083      	sub	sp, #12
 80090c2:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 80090c6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80090c8:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80090ca:	3d01      	subs	r5, #1
 80090cc:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 80090d0:	00ac      	lsls	r4, r5, #2
 80090d2:	9401      	str	r4, [sp, #4]
 80090d4:	1e4c      	subs	r4, r1, #1
 80090d6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80090da:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80090de:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80090e2:	d02d      	beq.n	8009140 <arm_split_rfft_q15+0x84>
 80090e4:	2f01      	cmp	r7, #1
 80090e6:	f1a6 0c04 	sub.w	ip, r6, #4
 80090ea:	f100 0604 	add.w	r6, r0, #4
 80090ee:	d13e      	bne.n	800916e <arm_split_rfft_q15+0xb2>
 80090f0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80090f2:	f1ac 0104 	sub.w	r1, ip, #4
 80090f6:	f107 0808 	add.w	r8, r7, #8
 80090fa:	f856 7b04 	ldr.w	r7, [r6], #4
 80090fe:	f852 9b04 	ldr.w	r9, [r2], #4
 8009102:	fb47 fc09 	smusd	ip, r7, r9
 8009106:	f855 e904 	ldr.w	lr, [r5], #-4
 800910a:	f853 ab04 	ldr.w	sl, [r3], #4
 800910e:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8009112:	fb4e fe1a 	smusdx	lr, lr, sl
 8009116:	fb27 e719 	smladx	r7, r7, r9, lr
 800911a:	143f      	asrs	r7, r7, #16
 800911c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8009120:	f1c7 0e00 	rsb	lr, r7, #0
 8009124:	3c01      	subs	r4, #1
 8009126:	f828 7c02 	strh.w	r7, [r8, #-2]
 800912a:	f828 cc04 	strh.w	ip, [r8, #-4]
 800912e:	f1a1 0104 	sub.w	r1, r1, #4
 8009132:	f8a1 e00a 	strh.w	lr, [r1, #10]
 8009136:	f8a1 c008 	strh.w	ip, [r1, #8]
 800913a:	f108 0804 	add.w	r8, r8, #4
 800913e:	d1dc      	bne.n	80090fa <arm_split_rfft_q15+0x3e>
 8009140:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8009144:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009148:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800914a:	9a01      	ldr	r2, [sp, #4]
 800914c:	1a5b      	subs	r3, r3, r1
 800914e:	4422      	add	r2, r4
 8009150:	2100      	movs	r1, #0
 8009152:	105b      	asrs	r3, r3, #1
 8009154:	8093      	strh	r3, [r2, #4]
 8009156:	80d1      	strh	r1, [r2, #6]
 8009158:	f9b0 3000 	ldrsh.w	r3, [r0]
 800915c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009160:	8061      	strh	r1, [r4, #2]
 8009162:	4413      	add	r3, r2
 8009164:	105b      	asrs	r3, r3, #1
 8009166:	8023      	strh	r3, [r4, #0]
 8009168:	b003      	add	sp, #12
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8009172:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8009174:	f1ac 0104 	sub.w	r1, ip, #4
 8009178:	f107 0808 	add.w	r8, r7, #8
 800917c:	f856 7b04 	ldr.w	r7, [r6], #4
 8009180:	f8d2 9000 	ldr.w	r9, [r2]
 8009184:	fb47 fc09 	smusd	ip, r7, r9
 8009188:	f855 e904 	ldr.w	lr, [r5], #-4
 800918c:	f8d3 a000 	ldr.w	sl, [r3]
 8009190:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8009194:	fb4e fe1a 	smusdx	lr, lr, sl
 8009198:	fb27 e719 	smladx	r7, r7, r9, lr
 800919c:	143f      	asrs	r7, r7, #16
 800919e:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80091a2:	f1c7 0e00 	rsb	lr, r7, #0
 80091a6:	3c01      	subs	r4, #1
 80091a8:	f828 7c02 	strh.w	r7, [r8, #-2]
 80091ac:	f828 cc04 	strh.w	ip, [r8, #-4]
 80091b0:	445b      	add	r3, fp
 80091b2:	f8a1 e006 	strh.w	lr, [r1, #6]
 80091b6:	f8a1 c004 	strh.w	ip, [r1, #4]
 80091ba:	445a      	add	r2, fp
 80091bc:	f108 0804 	add.w	r8, r8, #4
 80091c0:	f1a1 0104 	sub.w	r1, r1, #4
 80091c4:	d1da      	bne.n	800917c <arm_split_rfft_q15+0xc0>
 80091c6:	e7bb      	b.n	8009140 <arm_split_rfft_q15+0x84>

080091c8 <arm_rfft_q15>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	f890 e004 	ldrb.w	lr, [r0, #4]
 80091d0:	6806      	ldr	r6, [r0, #0]
 80091d2:	f1be 0f01 	cmp.w	lr, #1
 80091d6:	4604      	mov	r4, r0
 80091d8:	b083      	sub	sp, #12
 80091da:	6940      	ldr	r0, [r0, #20]
 80091dc:	4615      	mov	r5, r2
 80091de:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80091e2:	460f      	mov	r7, r1
 80091e4:	d00f      	beq.n	8009206 <arm_rfft_q15+0x3e>
 80091e6:	7963      	ldrb	r3, [r4, #5]
 80091e8:	4672      	mov	r2, lr
 80091ea:	f000 fd41 	bl	8009c70 <arm_cfft_q15>
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	9500      	str	r5, [sp, #0]
 80091f4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80091f8:	4631      	mov	r1, r6
 80091fa:	4638      	mov	r0, r7
 80091fc:	f7ff ff5e 	bl	80090bc <arm_split_rfft_q15>
 8009200:	b003      	add	sp, #12
 8009202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009206:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 800920a:	68a2      	ldr	r2, [r4, #8]
 800920c:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8009210:	b30e      	cbz	r6, 8009256 <arm_rfft_q15+0x8e>
 8009212:	2a01      	cmp	r2, #1
 8009214:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8009218:	d132      	bne.n	8009280 <arm_rfft_q15+0xb8>
 800921a:	46a9      	mov	r9, r5
 800921c:	f85c 8904 	ldr.w	r8, [ip], #-4
 8009220:	f851 2b04 	ldr.w	r2, [r1], #4
 8009224:	fb48 fa02 	smusd	sl, r8, r2
 8009228:	f857 bb04 	ldr.w	fp, [r7], #4
 800922c:	f853 eb04 	ldr.w	lr, [r3], #4
 8009230:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8009234:	fb28 f812 	smuadx	r8, r8, r2
 8009238:	f1c8 0200 	rsb	r2, r8, #0
 800923c:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8009240:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8009244:	0412      	lsls	r2, r2, #16
 8009246:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800924a:	3e01      	subs	r6, #1
 800924c:	f849 2b04 	str.w	r2, [r9], #4
 8009250:	d1e4      	bne.n	800921c <arm_rfft_q15+0x54>
 8009252:	f894 e004 	ldrb.w	lr, [r4, #4]
 8009256:	7963      	ldrb	r3, [r4, #5]
 8009258:	4672      	mov	r2, lr
 800925a:	4629      	mov	r1, r5
 800925c:	f000 fd08 	bl	8009c70 <arm_cfft_q15>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d0cc      	beq.n	8009200 <arm_rfft_q15+0x38>
 8009266:	3d02      	subs	r5, #2
 8009268:	2100      	movs	r1, #0
 800926a:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	802b      	strh	r3, [r5, #0]
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	3101      	adds	r1, #1
 8009276:	428b      	cmp	r3, r1
 8009278:	d8f7      	bhi.n	800926a <arm_rfft_q15+0xa2>
 800927a:	b003      	add	sp, #12
 800927c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009280:	ee07 0a90 	vmov	s15, r0
 8009284:	46a8      	mov	r8, r5
 8009286:	f85c e904 	ldr.w	lr, [ip], #-4
 800928a:	6808      	ldr	r0, [r1, #0]
 800928c:	fb4e f900 	smusd	r9, lr, r0
 8009290:	f857 ab04 	ldr.w	sl, [r7], #4
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	fb2a 9902 	smlad	r9, sl, r2, r9
 800929a:	fb2e fe10 	smuadx	lr, lr, r0
 800929e:	f1ce 0e00 	rsb	lr, lr, #0
 80092a2:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 80092a6:	0c12      	lsrs	r2, r2, #16
 80092a8:	0412      	lsls	r2, r2, #16
 80092aa:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 80092ae:	3e01      	subs	r6, #1
 80092b0:	f848 2b04 	str.w	r2, [r8], #4
 80092b4:	4459      	add	r1, fp
 80092b6:	445b      	add	r3, fp
 80092b8:	d1e5      	bne.n	8009286 <arm_rfft_q15+0xbe>
 80092ba:	ee17 0a90 	vmov	r0, s15
 80092be:	e7c8      	b.n	8009252 <arm_rfft_q15+0x8a>

080092c0 <arm_rfft_init_q15>:
 80092c0:	b430      	push	{r4, r5}
 80092c2:	b289      	uxth	r1, r1
 80092c4:	4d31      	ldr	r5, [pc, #196]	@ (800938c <arm_rfft_init_q15+0xcc>)
 80092c6:	4c32      	ldr	r4, [pc, #200]	@ (8009390 <arm_rfft_init_q15+0xd0>)
 80092c8:	6001      	str	r1, [r0, #0]
 80092ca:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80092ce:	e9c0 5403 	strd	r5, r4, [r0, #12]
 80092d2:	7102      	strb	r2, [r0, #4]
 80092d4:	7143      	strb	r3, [r0, #5]
 80092d6:	d053      	beq.n	8009380 <arm_rfft_init_q15+0xc0>
 80092d8:	d91a      	bls.n	8009310 <arm_rfft_init_q15+0x50>
 80092da:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80092de:	d033      	beq.n	8009348 <arm_rfft_init_q15+0x88>
 80092e0:	d909      	bls.n	80092f6 <arm_rfft_init_q15+0x36>
 80092e2:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80092e6:	d12b      	bne.n	8009340 <arm_rfft_init_q15+0x80>
 80092e8:	4b2a      	ldr	r3, [pc, #168]	@ (8009394 <arm_rfft_init_q15+0xd4>)
 80092ea:	6143      	str	r3, [r0, #20]
 80092ec:	2201      	movs	r2, #1
 80092ee:	6082      	str	r2, [r0, #8]
 80092f0:	2000      	movs	r0, #0
 80092f2:	bc30      	pop	{r4, r5}
 80092f4:	4770      	bx	lr
 80092f6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80092fa:	d02c      	beq.n	8009356 <arm_rfft_init_q15+0x96>
 80092fc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009300:	d11e      	bne.n	8009340 <arm_rfft_init_q15+0x80>
 8009302:	4b25      	ldr	r3, [pc, #148]	@ (8009398 <arm_rfft_init_q15+0xd8>)
 8009304:	6143      	str	r3, [r0, #20]
 8009306:	2204      	movs	r2, #4
 8009308:	6082      	str	r2, [r0, #8]
 800930a:	bc30      	pop	{r4, r5}
 800930c:	2000      	movs	r0, #0
 800930e:	4770      	bx	lr
 8009310:	2980      	cmp	r1, #128	@ 0x80
 8009312:	d027      	beq.n	8009364 <arm_rfft_init_q15+0xa4>
 8009314:	d909      	bls.n	800932a <arm_rfft_init_q15+0x6a>
 8009316:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800931a:	d111      	bne.n	8009340 <arm_rfft_init_q15+0x80>
 800931c:	4b1f      	ldr	r3, [pc, #124]	@ (800939c <arm_rfft_init_q15+0xdc>)
 800931e:	6143      	str	r3, [r0, #20]
 8009320:	2220      	movs	r2, #32
 8009322:	6082      	str	r2, [r0, #8]
 8009324:	bc30      	pop	{r4, r5}
 8009326:	2000      	movs	r0, #0
 8009328:	4770      	bx	lr
 800932a:	2920      	cmp	r1, #32
 800932c:	d021      	beq.n	8009372 <arm_rfft_init_q15+0xb2>
 800932e:	2940      	cmp	r1, #64	@ 0x40
 8009330:	d106      	bne.n	8009340 <arm_rfft_init_q15+0x80>
 8009332:	4b1b      	ldr	r3, [pc, #108]	@ (80093a0 <arm_rfft_init_q15+0xe0>)
 8009334:	6143      	str	r3, [r0, #20]
 8009336:	2280      	movs	r2, #128	@ 0x80
 8009338:	6082      	str	r2, [r0, #8]
 800933a:	bc30      	pop	{r4, r5}
 800933c:	2000      	movs	r0, #0
 800933e:	4770      	bx	lr
 8009340:	f04f 30ff 	mov.w	r0, #4294967295
 8009344:	bc30      	pop	{r4, r5}
 8009346:	4770      	bx	lr
 8009348:	4b16      	ldr	r3, [pc, #88]	@ (80093a4 <arm_rfft_init_q15+0xe4>)
 800934a:	6143      	str	r3, [r0, #20]
 800934c:	2202      	movs	r2, #2
 800934e:	6082      	str	r2, [r0, #8]
 8009350:	bc30      	pop	{r4, r5}
 8009352:	2000      	movs	r0, #0
 8009354:	4770      	bx	lr
 8009356:	4b14      	ldr	r3, [pc, #80]	@ (80093a8 <arm_rfft_init_q15+0xe8>)
 8009358:	6143      	str	r3, [r0, #20]
 800935a:	2208      	movs	r2, #8
 800935c:	6082      	str	r2, [r0, #8]
 800935e:	bc30      	pop	{r4, r5}
 8009360:	2000      	movs	r0, #0
 8009362:	4770      	bx	lr
 8009364:	4b11      	ldr	r3, [pc, #68]	@ (80093ac <arm_rfft_init_q15+0xec>)
 8009366:	6143      	str	r3, [r0, #20]
 8009368:	2240      	movs	r2, #64	@ 0x40
 800936a:	6082      	str	r2, [r0, #8]
 800936c:	bc30      	pop	{r4, r5}
 800936e:	2000      	movs	r0, #0
 8009370:	4770      	bx	lr
 8009372:	4b0f      	ldr	r3, [pc, #60]	@ (80093b0 <arm_rfft_init_q15+0xf0>)
 8009374:	6143      	str	r3, [r0, #20]
 8009376:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800937a:	6082      	str	r2, [r0, #8]
 800937c:	2000      	movs	r0, #0
 800937e:	e7b8      	b.n	80092f2 <arm_rfft_init_q15+0x32>
 8009380:	4b0c      	ldr	r3, [pc, #48]	@ (80093b4 <arm_rfft_init_q15+0xf4>)
 8009382:	6143      	str	r3, [r0, #20]
 8009384:	2210      	movs	r2, #16
 8009386:	6082      	str	r2, [r0, #8]
 8009388:	2000      	movs	r0, #0
 800938a:	e7b2      	b.n	80092f2 <arm_rfft_init_q15+0x32>
 800938c:	0800f878 	.word	0x0800f878
 8009390:	08013878 	.word	0x08013878
 8009394:	0800ba50 	.word	0x0800ba50
 8009398:	0800b9f0 	.word	0x0800b9f0
 800939c:	0800ba00 	.word	0x0800ba00
 80093a0:	0800ba40 	.word	0x0800ba40
 80093a4:	0800ba20 	.word	0x0800ba20
 80093a8:	0800ba60 	.word	0x0800ba60
 80093ac:	0800ba70 	.word	0x0800ba70
 80093b0:	0800ba10 	.word	0x0800ba10
 80093b4:	0800ba30 	.word	0x0800ba30

080093b8 <arm_mat_mult_fast_q15>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	b09d      	sub	sp, #116	@ 0x74
 80093be:	880f      	ldrh	r7, [r1, #0]
 80093c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80093c2:	4606      	mov	r6, r0
 80093c4:	8840      	ldrh	r0, [r0, #2]
 80093c6:	884d      	ldrh	r5, [r1, #2]
 80093c8:	8836      	ldrh	r6, [r6, #0]
 80093ca:	684c      	ldr	r4, [r1, #4]
 80093cc:	9017      	str	r0, [sp, #92]	@ 0x5c
 80093ce:	42b8      	cmp	r0, r7
 80093d0:	971a      	str	r7, [sp, #104]	@ 0x68
 80093d2:	9518      	str	r5, [sp, #96]	@ 0x60
 80093d4:	9616      	str	r6, [sp, #88]	@ 0x58
 80093d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80093d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80093da:	f040 81e9 	bne.w	80097b0 <arm_mat_mult_fast_q15+0x3f8>
 80093de:	8813      	ldrh	r3, [r2, #0]
 80093e0:	42b3      	cmp	r3, r6
 80093e2:	f040 81e5 	bne.w	80097b0 <arm_mat_mult_fast_q15+0x3f8>
 80093e6:	8853      	ldrh	r3, [r2, #2]
 80093e8:	42ab      	cmp	r3, r5
 80093ea:	f040 81e1 	bne.w	80097b0 <arm_mat_mult_fast_q15+0x3f8>
 80093ee:	0043      	lsls	r3, r0, #1
 80093f0:	2801      	cmp	r0, #1
 80093f2:	ea4f 0695 	mov.w	r6, r5, lsr #2
 80093f6:	9306      	str	r3, [sp, #24]
 80093f8:	f005 0703 	and.w	r7, r5, #3
 80093fc:	d133      	bne.n	8009466 <arm_mat_mult_fast_q15+0xae>
 80093fe:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8009402:	fb06 fc03 	mul.w	ip, r6, r3
 8009406:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800940a:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 800940e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8009412:	4655      	mov	r5, sl
 8009414:	4699      	mov	r9, r3
 8009416:	462b      	mov	r3, r5
 8009418:	b1ae      	cbz	r6, 8009446 <arm_mat_mult_fast_q15+0x8e>
 800941a:	4621      	mov	r1, r4
 800941c:	4630      	mov	r0, r6
 800941e:	680a      	ldr	r2, [r1, #0]
 8009420:	801a      	strh	r2, [r3, #0]
 8009422:	1412      	asrs	r2, r2, #16
 8009424:	f823 2009 	strh.w	r2, [r3, r9]
 8009428:	684a      	ldr	r2, [r1, #4]
 800942a:	f823 2019 	strh.w	r2, [r3, r9, lsl #1]
 800942e:	3801      	subs	r0, #1
 8009430:	ea4f 4222 	mov.w	r2, r2, asr #16
 8009434:	80da      	strh	r2, [r3, #6]
 8009436:	f101 0108 	add.w	r1, r1, #8
 800943a:	f103 0308 	add.w	r3, r3, #8
 800943e:	d1ee      	bne.n	800941e <arm_mat_mult_fast_q15+0x66>
 8009440:	4444      	add	r4, r8
 8009442:	eb05 030c 	add.w	r3, r5, ip
 8009446:	b147      	cbz	r7, 800945a <arm_mat_mult_fast_q15+0xa2>
 8009448:	4621      	mov	r1, r4
 800944a:	463a      	mov	r2, r7
 800944c:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8009450:	8018      	strh	r0, [r3, #0]
 8009452:	3a01      	subs	r2, #1
 8009454:	444b      	add	r3, r9
 8009456:	d1f9      	bne.n	800944c <arm_mat_mult_fast_q15+0x94>
 8009458:	4474      	add	r4, lr
 800945a:	45aa      	cmp	sl, r5
 800945c:	f105 0302 	add.w	r3, r5, #2
 8009460:	d038      	beq.n	80094d4 <arm_mat_mult_fast_q15+0x11c>
 8009462:	461d      	mov	r5, r3
 8009464:	e7d7      	b.n	8009416 <arm_mat_mult_fast_q15+0x5e>
 8009466:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009468:	181d      	adds	r5, r3, r0
 800946a:	fb06 f803 	mul.w	r8, r6, r3
 800946e:	4696      	mov	lr, r2
 8009470:	441a      	add	r2, r3
 8009472:	006d      	lsls	r5, r5, #1
 8009474:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8009478:	9212      	str	r2, [sp, #72]	@ 0x48
 800947a:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 800947e:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8009482:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8009486:	469b      	mov	fp, r3
 8009488:	4673      	mov	r3, lr
 800948a:	b1a6      	cbz	r6, 80094b6 <arm_mat_mult_fast_q15+0xfe>
 800948c:	4621      	mov	r1, r4
 800948e:	4630      	mov	r0, r6
 8009490:	680a      	ldr	r2, [r1, #0]
 8009492:	801a      	strh	r2, [r3, #0]
 8009494:	1412      	asrs	r2, r2, #16
 8009496:	f823 200b 	strh.w	r2, [r3, fp]
 800949a:	684a      	ldr	r2, [r1, #4]
 800949c:	f823 201b 	strh.w	r2, [r3, fp, lsl #1]
 80094a0:	3801      	subs	r0, #1
 80094a2:	ea4f 4222 	mov.w	r2, r2, asr #16
 80094a6:	535a      	strh	r2, [r3, r5]
 80094a8:	f101 0108 	add.w	r1, r1, #8
 80094ac:	4463      	add	r3, ip
 80094ae:	d1ef      	bne.n	8009490 <arm_mat_mult_fast_q15+0xd8>
 80094b0:	444c      	add	r4, r9
 80094b2:	eb0e 0308 	add.w	r3, lr, r8
 80094b6:	b147      	cbz	r7, 80094ca <arm_mat_mult_fast_q15+0x112>
 80094b8:	4621      	mov	r1, r4
 80094ba:	463a      	mov	r2, r7
 80094bc:	f931 0b02 	ldrsh.w	r0, [r1], #2
 80094c0:	8018      	strh	r0, [r3, #0]
 80094c2:	3a01      	subs	r2, #1
 80094c4:	445b      	add	r3, fp
 80094c6:	d1f9      	bne.n	80094bc <arm_mat_mult_fast_q15+0x104>
 80094c8:	4454      	add	r4, sl
 80094ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094cc:	f10e 0e02 	add.w	lr, lr, #2
 80094d0:	4573      	cmp	r3, lr
 80094d2:	d1d9      	bne.n	8009488 <arm_mat_mult_fast_q15+0xd0>
 80094d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094d6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80094dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094de:	004c      	lsls	r4, r1, #1
 80094e0:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 80094e4:	0852      	lsrs	r2, r2, #1
 80094e6:	9415      	str	r4, [sp, #84]	@ 0x54
 80094e8:	950d      	str	r5, [sp, #52]	@ 0x34
 80094ea:	9210      	str	r2, [sp, #64]	@ 0x40
 80094ec:	f000 80b1 	beq.w	8009652 <arm_mat_mult_fast_q15+0x29a>
 80094f0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80094f2:	460a      	mov	r2, r1
 80094f4:	0846      	lsrs	r6, r0, #1
 80094f6:	f001 0101 	and.w	r1, r1, #1
 80094fa:	f000 0001 	and.w	r0, r0, #1
 80094fe:	0852      	lsrs	r2, r2, #1
 8009500:	911b      	str	r1, [sp, #108]	@ 0x6c
 8009502:	9607      	str	r6, [sp, #28]
 8009504:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009508:	900a      	str	r0, [sp, #40]	@ 0x28
 800950a:	f000 809f 	beq.w	800964c <arm_mat_mult_fast_q15+0x294>
 800950e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009512:	1ac8      	subs	r0, r1, r3
 8009514:	3304      	adds	r3, #4
 8009516:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800951a:	9205      	str	r2, [sp, #20]
 800951c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800951e:	0092      	lsls	r2, r2, #2
 8009520:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009522:	00b2      	lsls	r2, r6, #2
 8009524:	1861      	adds	r1, r4, r1
 8009526:	920c      	str	r2, [sp, #48]	@ 0x30
 8009528:	2200      	movs	r2, #0
 800952a:	9114      	str	r1, [sp, #80]	@ 0x50
 800952c:	920e      	str	r2, [sp, #56]	@ 0x38
 800952e:	9906      	ldr	r1, [sp, #24]
 8009530:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009532:	1828      	adds	r0, r5, r0
 8009534:	440a      	add	r2, r1
 8009536:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009538:	9212      	str	r2, [sp, #72]	@ 0x48
 800953a:	9304      	str	r3, [sp, #16]
 800953c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	9308      	str	r3, [sp, #32]
 8009542:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009544:	3304      	adds	r3, #4
 8009546:	9303      	str	r3, [sp, #12]
 8009548:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009552:	9a08      	ldr	r2, [sp, #32]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	eb03 0b02 	add.w	fp, r3, r2
 800955a:	9b06      	ldr	r3, [sp, #24]
 800955c:	eb0b 0203 	add.w	r2, fp, r3
 8009560:	9b07      	ldr	r3, [sp, #28]
 8009562:	9202      	str	r2, [sp, #8]
 8009564:	e9dd e800 	ldrd	lr, r8, [sp]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d06a      	beq.n	8009642 <arm_mat_mult_fast_q15+0x28a>
 800956c:	2500      	movs	r5, #0
 800956e:	462e      	mov	r6, r5
 8009570:	462f      	mov	r7, r5
 8009572:	46ac      	mov	ip, r5
 8009574:	4692      	mov	sl, r2
 8009576:	46d9      	mov	r9, fp
 8009578:	f859 4b04 	ldr.w	r4, [r9], #4
 800957c:	f858 0b04 	ldr.w	r0, [r8], #4
 8009580:	f85a 2b04 	ldr.w	r2, [sl], #4
 8009584:	f85e 1b04 	ldr.w	r1, [lr], #4
 8009588:	fb24 cc00 	smlad	ip, r4, r0, ip
 800958c:	fb24 7701 	smlad	r7, r4, r1, r7
 8009590:	fb22 6600 	smlad	r6, r2, r0, r6
 8009594:	fb22 5501 	smlad	r5, r2, r1, r5
 8009598:	3b01      	subs	r3, #1
 800959a:	d1ed      	bne.n	8009578 <arm_mat_mult_fast_q15+0x1c0>
 800959c:	9a02      	ldr	r2, [sp, #8]
 800959e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095a0:	4611      	mov	r1, r2
 80095a2:	9a00      	ldr	r2, [sp, #0]
 80095a4:	eb02 0e03 	add.w	lr, r2, r3
 80095a8:	9a01      	ldr	r2, [sp, #4]
 80095aa:	4419      	add	r1, r3
 80095ac:	9102      	str	r1, [sp, #8]
 80095ae:	449b      	add	fp, r3
 80095b0:	eb02 0803 	add.w	r8, r2, r3
 80095b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095b6:	b183      	cbz	r3, 80095da <arm_mat_mult_fast_q15+0x222>
 80095b8:	9902      	ldr	r1, [sp, #8]
 80095ba:	f9bb 3000 	ldrsh.w	r3, [fp]
 80095be:	f9b8 2000 	ldrsh.w	r2, [r8]
 80095c2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80095c6:	f9be 0000 	ldrsh.w	r0, [lr]
 80095ca:	fb03 cc02 	mla	ip, r3, r2, ip
 80095ce:	fb02 6601 	mla	r6, r2, r1, r6
 80095d2:	fb03 7700 	mla	r7, r3, r0, r7
 80095d6:	fb01 5500 	mla	r5, r1, r0, r5
 80095da:	9b04      	ldr	r3, [sp, #16]
 80095dc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095de:	9801      	ldr	r0, [sp, #4]
 80095e0:	ea4f 3cec 	mov.w	ip, ip, asr #15
 80095e4:	13ff      	asrs	r7, r7, #15
 80095e6:	1d19      	adds	r1, r3, #4
 80095e8:	f823 cc04 	strh.w	ip, [r3, #-4]
 80095ec:	f823 7c02 	strh.w	r7, [r3, #-2]
 80095f0:	9b03      	ldr	r3, [sp, #12]
 80095f2:	9104      	str	r1, [sp, #16]
 80095f4:	13f6      	asrs	r6, r6, #15
 80095f6:	13ed      	asrs	r5, r5, #15
 80095f8:	f823 6c04 	strh.w	r6, [r3, #-4]
 80095fc:	f823 5c02 	strh.w	r5, [r3, #-2]
 8009600:	3304      	adds	r3, #4
 8009602:	9303      	str	r3, [sp, #12]
 8009604:	9b00      	ldr	r3, [sp, #0]
 8009606:	4413      	add	r3, r2
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	9b05      	ldr	r3, [sp, #20]
 800960c:	4604      	mov	r4, r0
 800960e:	4414      	add	r4, r2
 8009610:	428b      	cmp	r3, r1
 8009612:	9401      	str	r4, [sp, #4]
 8009614:	d19c      	bne.n	8009550 <arm_mat_mult_fast_q15+0x198>
 8009616:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009618:	9a06      	ldr	r2, [sp, #24]
 800961a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800961c:	4413      	add	r3, r2
 800961e:	930e      	str	r3, [sp, #56]	@ 0x38
 8009620:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009622:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009624:	4610      	mov	r0, r2
 8009626:	4419      	add	r1, r3
 8009628:	9a05      	ldr	r2, [sp, #20]
 800962a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800962c:	910f      	str	r1, [sp, #60]	@ 0x3c
 800962e:	4418      	add	r0, r3
 8009630:	441a      	add	r2, r3
 8009632:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009634:	900d      	str	r0, [sp, #52]	@ 0x34
 8009636:	3b01      	subs	r3, #1
 8009638:	9205      	str	r2, [sp, #20]
 800963a:	9310      	str	r3, [sp, #64]	@ 0x40
 800963c:	d006      	beq.n	800964c <arm_mat_mult_fast_q15+0x294>
 800963e:	1d0b      	adds	r3, r1, #4
 8009640:	e77b      	b.n	800953a <arm_mat_mult_fast_q15+0x182>
 8009642:	469c      	mov	ip, r3
 8009644:	461d      	mov	r5, r3
 8009646:	461e      	mov	r6, r3
 8009648:	461f      	mov	r7, r3
 800964a:	e7b3      	b.n	80095b4 <arm_mat_mult_fast_q15+0x1fc>
 800964c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800964e:	2b00      	cmp	r3, #0
 8009650:	d155      	bne.n	80096fe <arm_mat_mult_fast_q15+0x346>
 8009652:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009654:	07da      	lsls	r2, r3, #31
 8009656:	d54e      	bpl.n	80096f6 <arm_mat_mult_fast_q15+0x33e>
 8009658:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800965a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800965c:	6852      	ldr	r2, [r2, #4]
 800965e:	3b01      	subs	r3, #1
 8009660:	fb03 fe01 	mul.w	lr, r3, r1
 8009664:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8009668:	2900      	cmp	r1, #0
 800966a:	d044      	beq.n	80096f6 <arm_mat_mult_fast_q15+0x33e>
 800966c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800966e:	fb03 f302 	mul.w	r3, r3, r2
 8009672:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8009676:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009678:	f8cd b008 	str.w	fp, [sp, #8]
 800967c:	4473      	add	r3, lr
 800967e:	f002 0903 	and.w	r9, r2, #3
 8009682:	ea4f 0892 	mov.w	r8, r2, lsr #2
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800968c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8009690:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009698:	685d      	ldr	r5, [r3, #4]
 800969a:	9b02      	ldr	r3, [sp, #8]
 800969c:	441d      	add	r5, r3
 800969e:	f1b8 0f00 	cmp.w	r8, #0
 80096a2:	f000 8083 	beq.w	80097ac <arm_mat_mult_fast_q15+0x3f4>
 80096a6:	4658      	mov	r0, fp
 80096a8:	4629      	mov	r1, r5
 80096aa:	4644      	mov	r4, r8
 80096ac:	2300      	movs	r3, #0
 80096ae:	680f      	ldr	r7, [r1, #0]
 80096b0:	684a      	ldr	r2, [r1, #4]
 80096b2:	f8d0 c000 	ldr.w	ip, [r0]
 80096b6:	6846      	ldr	r6, [r0, #4]
 80096b8:	3108      	adds	r1, #8
 80096ba:	3008      	adds	r0, #8
 80096bc:	fb27 330c 	smlad	r3, r7, ip, r3
 80096c0:	fb22 3306 	smlad	r3, r2, r6, r3
 80096c4:	3c01      	subs	r4, #1
 80096c6:	d1f2      	bne.n	80096ae <arm_mat_mult_fast_q15+0x2f6>
 80096c8:	44d3      	add	fp, sl
 80096ca:	4455      	add	r5, sl
 80096cc:	f1b9 0f00 	cmp.w	r9, #0
 80096d0:	d00b      	beq.n	80096ea <arm_mat_mult_fast_q15+0x332>
 80096d2:	4659      	mov	r1, fp
 80096d4:	464a      	mov	r2, r9
 80096d6:	f835 4b02 	ldrh.w	r4, [r5], #2
 80096da:	f831 0b02 	ldrh.w	r0, [r1], #2
 80096de:	3a01      	subs	r2, #1
 80096e0:	fb14 3300 	smlabb	r3, r4, r0, r3
 80096e4:	d1f7      	bne.n	80096d6 <arm_mat_mult_fast_q15+0x31e>
 80096e6:	9a00      	ldr	r2, [sp, #0]
 80096e8:	4493      	add	fp, r2
 80096ea:	13db      	asrs	r3, r3, #15
 80096ec:	f82e 3b02 	strh.w	r3, [lr], #2
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	459e      	cmp	lr, r3
 80096f4:	d1cf      	bne.n	8009696 <arm_mat_mult_fast_q15+0x2de>
 80096f6:	2000      	movs	r0, #0
 80096f8:	b01d      	add	sp, #116	@ 0x74
 80096fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8009700:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009702:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8009704:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009708:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800970a:	f103 3bff 	add.w	fp, r3, #4294967295
 800970e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009710:	fb03 fb0b 	mul.w	fp, r3, fp
 8009714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009716:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 800971a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f002 0903 	and.w	r9, r2, #3
 8009722:	f1a1 0e02 	sub.w	lr, r1, #2
 8009726:	ea4f 0892 	mov.w	r8, r2, lsr #2
 800972a:	449e      	add	lr, r3
 800972c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8009730:	eb0b 02c8 	add.w	r2, fp, r8, lsl #3
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009738:	9202      	str	r2, [sp, #8]
 800973a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800973e:	9200      	str	r2, [sp, #0]
 8009740:	f023 0a01 	bic.w	sl, r3, #1
 8009744:	f1b8 0f00 	cmp.w	r8, #0
 8009748:	d02d      	beq.n	80097a6 <arm_mat_mult_fast_q15+0x3ee>
 800974a:	4658      	mov	r0, fp
 800974c:	4661      	mov	r1, ip
 800974e:	4644      	mov	r4, r8
 8009750:	2300      	movs	r3, #0
 8009752:	680e      	ldr	r6, [r1, #0]
 8009754:	684a      	ldr	r2, [r1, #4]
 8009756:	6807      	ldr	r7, [r0, #0]
 8009758:	6845      	ldr	r5, [r0, #4]
 800975a:	3108      	adds	r1, #8
 800975c:	3008      	adds	r0, #8
 800975e:	fb26 3307 	smlad	r3, r6, r7, r3
 8009762:	fb22 3305 	smlad	r3, r2, r5, r3
 8009766:	3c01      	subs	r4, #1
 8009768:	d1f3      	bne.n	8009752 <arm_mat_mult_fast_q15+0x39a>
 800976a:	9a00      	ldr	r2, [sp, #0]
 800976c:	9902      	ldr	r1, [sp, #8]
 800976e:	4494      	add	ip, r2
 8009770:	f1b9 0f00 	cmp.w	r9, #0
 8009774:	d00b      	beq.n	800978e <arm_mat_mult_fast_q15+0x3d6>
 8009776:	4660      	mov	r0, ip
 8009778:	464a      	mov	r2, r9
 800977a:	f830 5b02 	ldrh.w	r5, [r0], #2
 800977e:	f831 4b02 	ldrh.w	r4, [r1], #2
 8009782:	3a01      	subs	r2, #1
 8009784:	fb15 3304 	smlabb	r3, r5, r4, r3
 8009788:	d1f7      	bne.n	800977a <arm_mat_mult_fast_q15+0x3c2>
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	4494      	add	ip, r2
 800978e:	13db      	asrs	r3, r3, #15
 8009790:	f8ae 3000 	strh.w	r3, [lr]
 8009794:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009796:	f1ba 0a01 	subs.w	sl, sl, #1
 800979a:	449e      	add	lr, r3
 800979c:	f43f af59 	beq.w	8009652 <arm_mat_mult_fast_q15+0x29a>
 80097a0:	f1b8 0f00 	cmp.w	r8, #0
 80097a4:	d1d1      	bne.n	800974a <arm_mat_mult_fast_q15+0x392>
 80097a6:	4659      	mov	r1, fp
 80097a8:	4643      	mov	r3, r8
 80097aa:	e7e1      	b.n	8009770 <arm_mat_mult_fast_q15+0x3b8>
 80097ac:	4643      	mov	r3, r8
 80097ae:	e78d      	b.n	80096cc <arm_mat_mult_fast_q15+0x314>
 80097b0:	f06f 0002 	mvn.w	r0, #2
 80097b4:	b01d      	add	sp, #116	@ 0x74
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	bf00      	nop

080097bc <arm_mat_init_q15>:
 80097bc:	8001      	strh	r1, [r0, #0]
 80097be:	8042      	strh	r2, [r0, #2]
 80097c0:	6043      	str	r3, [r0, #4]
 80097c2:	4770      	bx	lr

080097c4 <arm_cmplx_mag_q15>:
 80097c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c8:	ea5f 0992 	movs.w	r9, r2, lsr #2
 80097cc:	4617      	mov	r7, r2
 80097ce:	4680      	mov	r8, r0
 80097d0:	460e      	mov	r6, r1
 80097d2:	d029      	beq.n	8009828 <arm_cmplx_mag_q15+0x64>
 80097d4:	4605      	mov	r5, r0
 80097d6:	46ca      	mov	sl, r9
 80097d8:	460c      	mov	r4, r1
 80097da:	6828      	ldr	r0, [r5, #0]
 80097dc:	fb20 f000 	smuad	r0, r0, r0
 80097e0:	4621      	mov	r1, r4
 80097e2:	1440      	asrs	r0, r0, #17
 80097e4:	f000 f832 	bl	800984c <arm_sqrt_q15>
 80097e8:	6868      	ldr	r0, [r5, #4]
 80097ea:	fb20 f000 	smuad	r0, r0, r0
 80097ee:	1ca1      	adds	r1, r4, #2
 80097f0:	1440      	asrs	r0, r0, #17
 80097f2:	f000 f82b 	bl	800984c <arm_sqrt_q15>
 80097f6:	68a8      	ldr	r0, [r5, #8]
 80097f8:	fb20 f000 	smuad	r0, r0, r0
 80097fc:	1d21      	adds	r1, r4, #4
 80097fe:	1440      	asrs	r0, r0, #17
 8009800:	f000 f824 	bl	800984c <arm_sqrt_q15>
 8009804:	3510      	adds	r5, #16
 8009806:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800980a:	fb23 f303 	smuad	r3, r3, r3
 800980e:	1da1      	adds	r1, r4, #6
 8009810:	1458      	asrs	r0, r3, #17
 8009812:	f000 f81b 	bl	800984c <arm_sqrt_q15>
 8009816:	f1ba 0a01 	subs.w	sl, sl, #1
 800981a:	f104 0408 	add.w	r4, r4, #8
 800981e:	d1dc      	bne.n	80097da <arm_cmplx_mag_q15+0x16>
 8009820:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 8009824:	eb08 1809 	add.w	r8, r8, r9, lsl #4
 8009828:	f017 0703 	ands.w	r7, r7, #3
 800982c:	d00c      	beq.n	8009848 <arm_cmplx_mag_q15+0x84>
 800982e:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 8009832:	f858 0b04 	ldr.w	r0, [r8], #4
 8009836:	fb20 f000 	smuad	r0, r0, r0
 800983a:	4631      	mov	r1, r6
 800983c:	1440      	asrs	r0, r0, #17
 800983e:	3602      	adds	r6, #2
 8009840:	f000 f804 	bl	800984c <arm_sqrt_q15>
 8009844:	42be      	cmp	r6, r7
 8009846:	d1f4      	bne.n	8009832 <arm_cmplx_mag_q15+0x6e>
 8009848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800984c <arm_sqrt_q15>:
 800984c:	2800      	cmp	r0, #0
 800984e:	dd5c      	ble.n	800990a <arm_sqrt_q15+0xbe>
 8009850:	fab0 f280 	clz	r2, r0
 8009854:	3a11      	subs	r2, #17
 8009856:	b470      	push	{r4, r5, r6}
 8009858:	b294      	uxth	r4, r2
 800985a:	f012 0201 	ands.w	r2, r2, #1
 800985e:	bf1a      	itte	ne
 8009860:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009864:	4098      	lslne	r0, r3
 8009866:	40a0      	lsleq	r0, r4
 8009868:	b200      	sxth	r0, r0
 800986a:	ee07 0a90 	vmov	s15, r0
 800986e:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 8009872:	4b28      	ldr	r3, [pc, #160]	@ (8009914 <arm_sqrt_q15+0xc8>)
 8009874:	ee17 5a90 	vmov	r5, s15
 8009878:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 800987c:	ee07 3a90 	vmov	s15, r3
 8009880:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 8009884:	1046      	asrs	r6, r0, #1
 8009886:	ee17 3a90 	vmov	r3, s15
 800988a:	b21b      	sxth	r3, r3
 800988c:	fb03 f503 	mul.w	r5, r3, r3
 8009890:	13ed      	asrs	r5, r5, #15
 8009892:	fb15 f506 	smulbb	r5, r5, r6
 8009896:	13ed      	asrs	r5, r5, #15
 8009898:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 800989c:	fb03 f305 	mul.w	r3, r3, r5
 80098a0:	f343 334f 	sbfx	r3, r3, #13, #16
 80098a4:	f023 0303 	bic.w	r3, r3, #3
 80098a8:	fb03 f503 	mul.w	r5, r3, r3
 80098ac:	13ed      	asrs	r5, r5, #15
 80098ae:	fb15 f506 	smulbb	r5, r5, r6
 80098b2:	13ed      	asrs	r5, r5, #15
 80098b4:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 80098b8:	fb03 f305 	mul.w	r3, r3, r5
 80098bc:	f343 334f 	sbfx	r3, r3, #13, #16
 80098c0:	f023 0303 	bic.w	r3, r3, #3
 80098c4:	fb03 f503 	mul.w	r5, r3, r3
 80098c8:	13ed      	asrs	r5, r5, #15
 80098ca:	fb15 f506 	smulbb	r5, r5, r6
 80098ce:	13ed      	asrs	r5, r5, #15
 80098d0:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 80098d4:	fb03 f305 	mul.w	r3, r3, r5
 80098d8:	13db      	asrs	r3, r3, #15
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	fb13 f300 	smulbb	r3, r3, r0
 80098e0:	f343 338f 	sbfx	r3, r3, #14, #16
 80098e4:	f023 0301 	bic.w	r3, r3, #1
 80098e8:	b13a      	cbz	r2, 80098fa <arm_sqrt_q15+0xae>
 80098ea:	3c01      	subs	r4, #1
 80098ec:	1064      	asrs	r4, r4, #1
 80098ee:	4123      	asrs	r3, r4
 80098f0:	b21b      	sxth	r3, r3
 80098f2:	2000      	movs	r0, #0
 80098f4:	bc70      	pop	{r4, r5, r6}
 80098f6:	800b      	strh	r3, [r1, #0]
 80098f8:	4770      	bx	lr
 80098fa:	f344 044e 	sbfx	r4, r4, #1, #15
 80098fe:	4123      	asrs	r3, r4
 8009900:	b21b      	sxth	r3, r3
 8009902:	2000      	movs	r0, #0
 8009904:	bc70      	pop	{r4, r5, r6}
 8009906:	800b      	strh	r3, [r1, #0]
 8009908:	4770      	bx	lr
 800990a:	2300      	movs	r3, #0
 800990c:	800b      	strh	r3, [r1, #0]
 800990e:	f04f 30ff 	mov.w	r0, #4294967295
 8009912:	4770      	bx	lr
 8009914:	5f3759df 	.word	0x5f3759df

08009918 <arm_shift_q15>:
 8009918:	2900      	cmp	r1, #0
 800991a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8009922:	db4a      	blt.n	80099ba <arm_shift_q15+0xa2>
 8009924:	f1bc 0f00 	cmp.w	ip, #0
 8009928:	d02b      	beq.n	8009982 <arm_shift_q15+0x6a>
 800992a:	f100 0508 	add.w	r5, r0, #8
 800992e:	4616      	mov	r6, r2
 8009930:	4667      	mov	r7, ip
 8009932:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 8009936:	408c      	lsls	r4, r1
 8009938:	f304 040f 	ssat	r4, #16, r4
 800993c:	f935 ec06 	ldrsh.w	lr, [r5, #-6]
 8009940:	fa0e fe01 	lsl.w	lr, lr, r1
 8009944:	f30e 0e0f 	ssat	lr, #16, lr
 8009948:	b2a4      	uxth	r4, r4
 800994a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800994e:	6034      	str	r4, [r6, #0]
 8009950:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 8009954:	408c      	lsls	r4, r1
 8009956:	f304 040f 	ssat	r4, #16, r4
 800995a:	f935 ec02 	ldrsh.w	lr, [r5, #-2]
 800995e:	fa0e fe01 	lsl.w	lr, lr, r1
 8009962:	f30e 0e0f 	ssat	lr, #16, lr
 8009966:	b2a4      	uxth	r4, r4
 8009968:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800996c:	3f01      	subs	r7, #1
 800996e:	6074      	str	r4, [r6, #4]
 8009970:	f105 0508 	add.w	r5, r5, #8
 8009974:	f106 0608 	add.w	r6, r6, #8
 8009978:	d1db      	bne.n	8009932 <arm_shift_q15+0x1a>
 800997a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 800997e:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8009982:	f013 0303 	ands.w	r3, r3, #3
 8009986:	d016      	beq.n	80099b6 <arm_shift_q15+0x9e>
 8009988:	f9b0 4000 	ldrsh.w	r4, [r0]
 800998c:	408c      	lsls	r4, r1
 800998e:	f304 040f 	ssat	r4, #16, r4
 8009992:	3b01      	subs	r3, #1
 8009994:	8014      	strh	r4, [r2, #0]
 8009996:	d00e      	beq.n	80099b6 <arm_shift_q15+0x9e>
 8009998:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800999c:	408c      	lsls	r4, r1
 800999e:	f304 040f 	ssat	r4, #16, r4
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	8054      	strh	r4, [r2, #2]
 80099a6:	d006      	beq.n	80099b6 <arm_shift_q15+0x9e>
 80099a8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80099ac:	fa03 f101 	lsl.w	r1, r3, r1
 80099b0:	f301 010f 	ssat	r1, #16, r1
 80099b4:	8091      	strh	r1, [r2, #4]
 80099b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ba:	f1bc 0f00 	cmp.w	ip, #0
 80099be:	d025      	beq.n	8009a0c <arm_shift_q15+0xf4>
 80099c0:	424f      	negs	r7, r1
 80099c2:	f100 0508 	add.w	r5, r0, #8
 80099c6:	4616      	mov	r6, r2
 80099c8:	46e6      	mov	lr, ip
 80099ca:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 80099ce:	f935 8c06 	ldrsh.w	r8, [r5, #-6]
 80099d2:	413c      	asrs	r4, r7
 80099d4:	fa48 f807 	asr.w	r8, r8, r7
 80099d8:	b2a4      	uxth	r4, r4
 80099da:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80099de:	6034      	str	r4, [r6, #0]
 80099e0:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 80099e4:	f935 8c02 	ldrsh.w	r8, [r5, #-2]
 80099e8:	413c      	asrs	r4, r7
 80099ea:	b2a4      	uxth	r4, r4
 80099ec:	fa48 f807 	asr.w	r8, r8, r7
 80099f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80099f4:	f1be 0e01 	subs.w	lr, lr, #1
 80099f8:	6074      	str	r4, [r6, #4]
 80099fa:	f105 0508 	add.w	r5, r5, #8
 80099fe:	f106 0608 	add.w	r6, r6, #8
 8009a02:	d1e2      	bne.n	80099ca <arm_shift_q15+0xb2>
 8009a04:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8009a08:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8009a0c:	f013 0303 	ands.w	r3, r3, #3
 8009a10:	d0d1      	beq.n	80099b6 <arm_shift_q15+0x9e>
 8009a12:	f9b0 4000 	ldrsh.w	r4, [r0]
 8009a16:	4249      	negs	r1, r1
 8009a18:	410c      	asrs	r4, r1
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	8014      	strh	r4, [r2, #0]
 8009a1e:	d0ca      	beq.n	80099b6 <arm_shift_q15+0x9e>
 8009a20:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	fa44 f401 	asr.w	r4, r4, r1
 8009a2a:	8054      	strh	r4, [r2, #2]
 8009a2c:	d0c3      	beq.n	80099b6 <arm_shift_q15+0x9e>
 8009a2e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009a32:	fa43 f101 	asr.w	r1, r3, r1
 8009a36:	8091      	strh	r1, [r2, #4]
 8009a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a3c <arm_mult_q15>:
 8009a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	ea5f 0893 	movs.w	r8, r3, lsr #2
 8009a44:	d037      	beq.n	8009ab6 <arm_mult_q15+0x7a>
 8009a46:	4694      	mov	ip, r2
 8009a48:	460f      	mov	r7, r1
 8009a4a:	4606      	mov	r6, r0
 8009a4c:	46c6      	mov	lr, r8
 8009a4e:	f8d6 a000 	ldr.w	sl, [r6]
 8009a52:	683d      	ldr	r5, [r7, #0]
 8009a54:	6874      	ldr	r4, [r6, #4]
 8009a56:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8009a5a:	fb15 f93a 	smultt	r9, r5, sl
 8009a5e:	ea4f 39e9 	mov.w	r9, r9, asr #15
 8009a62:	3608      	adds	r6, #8
 8009a64:	3708      	adds	r7, #8
 8009a66:	f309 090f 	ssat	r9, #16, r9
 8009a6a:	fb1a fa05 	smulbb	sl, sl, r5
 8009a6e:	ea4f 3aea 	mov.w	sl, sl, asr #15
 8009a72:	f30a 0a0f 	ssat	sl, #16, sl
 8009a76:	fb1b f534 	smultt	r5, fp, r4
 8009a7a:	13ed      	asrs	r5, r5, #15
 8009a7c:	f305 050f 	ssat	r5, #16, r5
 8009a80:	fb14 f40b 	smulbb	r4, r4, fp
 8009a84:	13e4      	asrs	r4, r4, #15
 8009a86:	f304 040f 	ssat	r4, #16, r4
 8009a8a:	fa1f fa8a 	uxth.w	sl, sl
 8009a8e:	b2a4      	uxth	r4, r4
 8009a90:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 8009a94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009a98:	f1be 0e01 	subs.w	lr, lr, #1
 8009a9c:	f8cc 9000 	str.w	r9, [ip]
 8009aa0:	f8cc 4004 	str.w	r4, [ip, #4]
 8009aa4:	f10c 0c08 	add.w	ip, ip, #8
 8009aa8:	d1d1      	bne.n	8009a4e <arm_mult_q15+0x12>
 8009aaa:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8009aae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009ab2:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8009ab6:	f013 0303 	ands.w	r3, r3, #3
 8009aba:	d01b      	beq.n	8009af4 <arm_mult_q15+0xb8>
 8009abc:	880c      	ldrh	r4, [r1, #0]
 8009abe:	8805      	ldrh	r5, [r0, #0]
 8009ac0:	fb14 f405 	smulbb	r4, r4, r5
 8009ac4:	13e4      	asrs	r4, r4, #15
 8009ac6:	f304 040f 	ssat	r4, #16, r4
 8009aca:	3b01      	subs	r3, #1
 8009acc:	8014      	strh	r4, [r2, #0]
 8009ace:	d011      	beq.n	8009af4 <arm_mult_q15+0xb8>
 8009ad0:	884c      	ldrh	r4, [r1, #2]
 8009ad2:	8845      	ldrh	r5, [r0, #2]
 8009ad4:	fb14 f405 	smulbb	r4, r4, r5
 8009ad8:	13e4      	asrs	r4, r4, #15
 8009ada:	f304 040f 	ssat	r4, #16, r4
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	8054      	strh	r4, [r2, #2]
 8009ae2:	d007      	beq.n	8009af4 <arm_mult_q15+0xb8>
 8009ae4:	8883      	ldrh	r3, [r0, #4]
 8009ae6:	8889      	ldrh	r1, [r1, #4]
 8009ae8:	fb13 f301 	smulbb	r3, r3, r1
 8009aec:	13db      	asrs	r3, r3, #15
 8009aee:	f303 030f 	ssat	r3, #16, r3
 8009af2:	8093      	strh	r3, [r2, #4]
 8009af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009af8 <arm_cfft_radix4by2_q15>:
 8009af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009afc:	084d      	lsrs	r5, r1, #1
 8009afe:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8009b02:	4616      	mov	r6, r2
 8009b04:	d047      	beq.n	8009b96 <arm_cfft_radix4by2_q15+0x9e>
 8009b06:	4604      	mov	r4, r0
 8009b08:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8009bb0 <arm_cfft_radix4by2_q15+0xb8>
 8009b0c:	4696      	mov	lr, r2
 8009b0e:	4638      	mov	r0, r7
 8009b10:	4621      	mov	r1, r4
 8009b12:	462a      	mov	r2, r5
 8009b14:	f04f 0c00 	mov.w	ip, #0
 8009b18:	680b      	ldr	r3, [r1, #0]
 8009b1a:	f8d0 a000 	ldr.w	sl, [r0]
 8009b1e:	fa93 f32c 	shadd16	r3, r3, ip
 8009b22:	fa9a fa2c 	shadd16	sl, sl, ip
 8009b26:	fa93 f92a 	shadd16	r9, r3, sl
 8009b2a:	fad3 fa1a 	qsub16	sl, r3, sl
 8009b2e:	f85e 3b04 	ldr.w	r3, [lr], #4
 8009b32:	f841 9b04 	str.w	r9, [r1], #4
 8009b36:	fb23 f90a 	smuad	r9, r3, sl
 8009b3a:	fb43 f31a 	smusdx	r3, r3, sl
 8009b3e:	ea03 0308 	and.w	r3, r3, r8
 8009b42:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8009b46:	3a01      	subs	r2, #1
 8009b48:	f840 3b04 	str.w	r3, [r0], #4
 8009b4c:	d1e4      	bne.n	8009b18 <arm_cfft_radix4by2_q15+0x20>
 8009b4e:	4629      	mov	r1, r5
 8009b50:	2302      	movs	r3, #2
 8009b52:	4632      	mov	r2, r6
 8009b54:	4620      	mov	r0, r4
 8009b56:	f000 f8e9 	bl	8009d2c <arm_radix4_butterfly_q15>
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4632      	mov	r2, r6
 8009b60:	2302      	movs	r3, #2
 8009b62:	f000 f8e3 	bl	8009d2c <arm_radix4_butterfly_q15>
 8009b66:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f9b0 6000 	ldrsh.w	r6, [r0]
 8009b70:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8009b74:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8009b78:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009b7c:	0076      	lsls	r6, r6, #1
 8009b7e:	0064      	lsls	r4, r4, #1
 8009b80:	0052      	lsls	r2, r2, #1
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	8006      	strh	r6, [r0, #0]
 8009b86:	8044      	strh	r4, [r0, #2]
 8009b88:	8082      	strh	r2, [r0, #4]
 8009b8a:	80c3      	strh	r3, [r0, #6]
 8009b8c:	3008      	adds	r0, #8
 8009b8e:	4285      	cmp	r5, r0
 8009b90:	d1ec      	bne.n	8009b6c <arm_cfft_radix4by2_q15+0x74>
 8009b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b96:	4629      	mov	r1, r5
 8009b98:	2302      	movs	r3, #2
 8009b9a:	f000 f8c7 	bl	8009d2c <arm_radix4_butterfly_q15>
 8009b9e:	4632      	mov	r2, r6
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009baa:	f000 b8bf 	b.w	8009d2c <arm_radix4_butterfly_q15>
 8009bae:	bf00      	nop
 8009bb0:	ffff0000 	.word	0xffff0000

08009bb4 <arm_cfft_radix4by2_inverse_q15>:
 8009bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	084d      	lsrs	r5, r1, #1
 8009bba:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8009bbe:	4616      	mov	r6, r2
 8009bc0:	d047      	beq.n	8009c52 <arm_cfft_radix4by2_inverse_q15+0x9e>
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8009c6c <arm_cfft_radix4by2_inverse_q15+0xb8>
 8009bc8:	4696      	mov	lr, r2
 8009bca:	4638      	mov	r0, r7
 8009bcc:	4621      	mov	r1, r4
 8009bce:	462a      	mov	r2, r5
 8009bd0:	f04f 0c00 	mov.w	ip, #0
 8009bd4:	680b      	ldr	r3, [r1, #0]
 8009bd6:	f8d0 a000 	ldr.w	sl, [r0]
 8009bda:	fa93 f32c 	shadd16	r3, r3, ip
 8009bde:	fa9a fa2c 	shadd16	sl, sl, ip
 8009be2:	fa93 f92a 	shadd16	r9, r3, sl
 8009be6:	fad3 fa1a 	qsub16	sl, r3, sl
 8009bea:	f85e 3b04 	ldr.w	r3, [lr], #4
 8009bee:	f841 9b04 	str.w	r9, [r1], #4
 8009bf2:	fb43 f90a 	smusd	r9, r3, sl
 8009bf6:	fb23 f31a 	smuadx	r3, r3, sl
 8009bfa:	ea03 0308 	and.w	r3, r3, r8
 8009bfe:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8009c02:	3a01      	subs	r2, #1
 8009c04:	f840 3b04 	str.w	r3, [r0], #4
 8009c08:	d1e4      	bne.n	8009bd4 <arm_cfft_radix4by2_inverse_q15+0x20>
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	4632      	mov	r2, r6
 8009c10:	4620      	mov	r0, r4
 8009c12:	f000 fa35 	bl	800a080 <arm_radix4_butterfly_inverse_q15>
 8009c16:	4638      	mov	r0, r7
 8009c18:	4629      	mov	r1, r5
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	f000 fa2f 	bl	800a080 <arm_radix4_butterfly_inverse_q15>
 8009c22:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8009c26:	4620      	mov	r0, r4
 8009c28:	f9b0 6000 	ldrsh.w	r6, [r0]
 8009c2c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8009c30:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8009c34:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009c38:	0076      	lsls	r6, r6, #1
 8009c3a:	0064      	lsls	r4, r4, #1
 8009c3c:	0052      	lsls	r2, r2, #1
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	8006      	strh	r6, [r0, #0]
 8009c42:	8044      	strh	r4, [r0, #2]
 8009c44:	8082      	strh	r2, [r0, #4]
 8009c46:	80c3      	strh	r3, [r0, #6]
 8009c48:	3008      	adds	r0, #8
 8009c4a:	4285      	cmp	r5, r0
 8009c4c:	d1ec      	bne.n	8009c28 <arm_cfft_radix4by2_inverse_q15+0x74>
 8009c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c52:	4629      	mov	r1, r5
 8009c54:	2302      	movs	r3, #2
 8009c56:	f000 fa13 	bl	800a080 <arm_radix4_butterfly_inverse_q15>
 8009c5a:	4632      	mov	r2, r6
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	4638      	mov	r0, r7
 8009c60:	2302      	movs	r3, #2
 8009c62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c66:	f000 ba0b 	b.w	800a080 <arm_radix4_butterfly_inverse_q15>
 8009c6a:	bf00      	nop
 8009c6c:	ffff0000 	.word	0xffff0000

08009c70 <arm_cfft_q15>:
 8009c70:	b5e0      	push	{r5, r6, r7, lr}
 8009c72:	2a01      	cmp	r2, #1
 8009c74:	460f      	mov	r7, r1
 8009c76:	4605      	mov	r5, r0
 8009c78:	8801      	ldrh	r1, [r0, #0]
 8009c7a:	461e      	mov	r6, r3
 8009c7c:	d02f      	beq.n	8009cde <arm_cfft_q15+0x6e>
 8009c7e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009c82:	d026      	beq.n	8009cd2 <arm_cfft_q15+0x62>
 8009c84:	d908      	bls.n	8009c98 <arm_cfft_q15+0x28>
 8009c86:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009c8a:	d017      	beq.n	8009cbc <arm_cfft_q15+0x4c>
 8009c8c:	d91b      	bls.n	8009cc6 <arm_cfft_q15+0x56>
 8009c8e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009c92:	d01e      	beq.n	8009cd2 <arm_cfft_q15+0x62>
 8009c94:	b93e      	cbnz	r6, 8009ca6 <arm_cfft_q15+0x36>
 8009c96:	bde0      	pop	{r5, r6, r7, pc}
 8009c98:	2940      	cmp	r1, #64	@ 0x40
 8009c9a:	d01a      	beq.n	8009cd2 <arm_cfft_q15+0x62>
 8009c9c:	d90a      	bls.n	8009cb4 <arm_cfft_q15+0x44>
 8009c9e:	2980      	cmp	r1, #128	@ 0x80
 8009ca0:	d00c      	beq.n	8009cbc <arm_cfft_q15+0x4c>
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d0f7      	beq.n	8009c96 <arm_cfft_q15+0x26>
 8009ca6:	68aa      	ldr	r2, [r5, #8]
 8009ca8:	89a9      	ldrh	r1, [r5, #12]
 8009caa:	4638      	mov	r0, r7
 8009cac:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8009cb0:	f000 bb90 	b.w	800a3d4 <arm_bitreversal_16>
 8009cb4:	2910      	cmp	r1, #16
 8009cb6:	d00c      	beq.n	8009cd2 <arm_cfft_q15+0x62>
 8009cb8:	2920      	cmp	r1, #32
 8009cba:	d1eb      	bne.n	8009c94 <arm_cfft_q15+0x24>
 8009cbc:	686a      	ldr	r2, [r5, #4]
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	f7ff ff1a 	bl	8009af8 <arm_cfft_radix4by2_q15>
 8009cc4:	e7e6      	b.n	8009c94 <arm_cfft_q15+0x24>
 8009cc6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009cca:	d0f7      	beq.n	8009cbc <arm_cfft_q15+0x4c>
 8009ccc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009cd0:	d1e0      	bne.n	8009c94 <arm_cfft_q15+0x24>
 8009cd2:	686a      	ldr	r2, [r5, #4]
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	f000 f828 	bl	8009d2c <arm_radix4_butterfly_q15>
 8009cdc:	e7da      	b.n	8009c94 <arm_cfft_q15+0x24>
 8009cde:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009ce2:	d01d      	beq.n	8009d20 <arm_cfft_q15+0xb0>
 8009ce4:	d907      	bls.n	8009cf6 <arm_cfft_q15+0x86>
 8009ce6:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009cea:	d00e      	beq.n	8009d0a <arm_cfft_q15+0x9a>
 8009cec:	d912      	bls.n	8009d14 <arm_cfft_q15+0xa4>
 8009cee:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009cf2:	d1cf      	bne.n	8009c94 <arm_cfft_q15+0x24>
 8009cf4:	e014      	b.n	8009d20 <arm_cfft_q15+0xb0>
 8009cf6:	2940      	cmp	r1, #64	@ 0x40
 8009cf8:	d012      	beq.n	8009d20 <arm_cfft_q15+0xb0>
 8009cfa:	d902      	bls.n	8009d02 <arm_cfft_q15+0x92>
 8009cfc:	2980      	cmp	r1, #128	@ 0x80
 8009cfe:	d004      	beq.n	8009d0a <arm_cfft_q15+0x9a>
 8009d00:	e7c8      	b.n	8009c94 <arm_cfft_q15+0x24>
 8009d02:	2910      	cmp	r1, #16
 8009d04:	d00c      	beq.n	8009d20 <arm_cfft_q15+0xb0>
 8009d06:	2920      	cmp	r1, #32
 8009d08:	d1c4      	bne.n	8009c94 <arm_cfft_q15+0x24>
 8009d0a:	686a      	ldr	r2, [r5, #4]
 8009d0c:	4638      	mov	r0, r7
 8009d0e:	f7ff ff51 	bl	8009bb4 <arm_cfft_radix4by2_inverse_q15>
 8009d12:	e7bf      	b.n	8009c94 <arm_cfft_q15+0x24>
 8009d14:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009d18:	d0f7      	beq.n	8009d0a <arm_cfft_q15+0x9a>
 8009d1a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009d1e:	d1b9      	bne.n	8009c94 <arm_cfft_q15+0x24>
 8009d20:	686a      	ldr	r2, [r5, #4]
 8009d22:	2301      	movs	r3, #1
 8009d24:	4638      	mov	r0, r7
 8009d26:	f000 f9ab 	bl	800a080 <arm_radix4_butterfly_inverse_q15>
 8009d2a:	e7b3      	b.n	8009c94 <arm_cfft_q15+0x24>

08009d2c <arm_radix4_butterfly_q15>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	b093      	sub	sp, #76	@ 0x4c
 8009d32:	f021 0a03 	bic.w	sl, r1, #3
 8009d36:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8009d3a:	9210      	str	r2, [sp, #64]	@ 0x40
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8009d42:	eb0c 050a 	add.w	r5, ip, sl
 8009d46:	9101      	str	r1, [sp, #4]
 8009d48:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009d4a:	9303      	str	r3, [sp, #12]
 8009d4c:	4482      	add	sl, r0
 8009d4e:	9211      	str	r2, [sp, #68]	@ 0x44
 8009d50:	f040 8124 	bne.w	8009f9c <arm_radix4_butterfly_q15+0x270>
 8009d54:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009d56:	f8df e324 	ldr.w	lr, [pc, #804]	@ 800a07c <arm_radix4_butterfly_q15+0x350>
 8009d5a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8009d5c:	f8cd a008 	str.w	sl, [sp, #8]
 8009d60:	4693      	mov	fp, r2
 8009d62:	4690      	mov	r8, r2
 8009d64:	4657      	mov	r7, sl
 8009d66:	2300      	movs	r3, #0
 8009d68:	4691      	mov	r9, r2
 8009d6a:	6830      	ldr	r0, [r6, #0]
 8009d6c:	f8dc 2000 	ldr.w	r2, [ip]
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	fa90 f023 	shadd16	r0, r0, r3
 8009d76:	fa91 f123 	shadd16	r1, r1, r3
 8009d7a:	fa90 f023 	shadd16	r0, r0, r3
 8009d7e:	fa91 fa23 	shadd16	sl, r1, r3
 8009d82:	fa92 f223 	shadd16	r2, r2, r3
 8009d86:	6829      	ldr	r1, [r5, #0]
 8009d88:	fa92 f223 	shadd16	r2, r2, r3
 8009d8c:	fa91 f123 	shadd16	r1, r1, r3
 8009d90:	fa90 f412 	qadd16	r4, r0, r2
 8009d94:	fa91 f123 	shadd16	r1, r1, r3
 8009d98:	fa9a f111 	qadd16	r1, sl, r1
 8009d9c:	fa94 fa21 	shadd16	sl, r4, r1
 8009da0:	f846 ab04 	str.w	sl, [r6], #4
 8009da4:	fad4 f411 	qsub16	r4, r4, r1
 8009da8:	fad0 f212 	qsub16	r2, r0, r2
 8009dac:	f85b 1b08 	ldr.w	r1, [fp], #8
 8009db0:	fb21 f004 	smuad	r0, r1, r4
 8009db4:	fb41 f114 	smusdx	r1, r1, r4
 8009db8:	ea01 010e 	and.w	r1, r1, lr
 8009dbc:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8009dc0:	6838      	ldr	r0, [r7, #0]
 8009dc2:	f847 1b04 	str.w	r1, [r7], #4
 8009dc6:	fa90 f023 	shadd16	r0, r0, r3
 8009dca:	682c      	ldr	r4, [r5, #0]
 8009dcc:	fa90 f023 	shadd16	r0, r0, r3
 8009dd0:	fa94 f423 	shadd16	r4, r4, r3
 8009dd4:	f859 1b04 	ldr.w	r1, [r9], #4
 8009dd8:	fa94 f423 	shadd16	r4, r4, r3
 8009ddc:	fad0 f014 	qsub16	r0, r0, r4
 8009de0:	faa2 f410 	qasx	r4, r2, r0
 8009de4:	fae2 f210 	qsax	r2, r2, r0
 8009de8:	fb21 fa02 	smuad	sl, r1, r2
 8009dec:	fb41 f212 	smusdx	r2, r1, r2
 8009df0:	ea02 020e 	and.w	r2, r2, lr
 8009df4:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8009df8:	f84c 2b04 	str.w	r2, [ip], #4
 8009dfc:	f858 2b0c 	ldr.w	r2, [r8], #12
 8009e00:	fb22 f104 	smuad	r1, r2, r4
 8009e04:	fb42 f214 	smusdx	r2, r2, r4
 8009e08:	ea02 020e 	and.w	r2, r2, lr
 8009e0c:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8009e10:	f845 2b04 	str.w	r2, [r5], #4
 8009e14:	9a02      	ldr	r2, [sp, #8]
 8009e16:	42b2      	cmp	r2, r6
 8009e18:	d1a7      	bne.n	8009d6a <arm_radix4_butterfly_q15+0x3e>
 8009e1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e1c:	9b03      	ldr	r3, [sp, #12]
 8009e1e:	2a04      	cmp	r2, #4
 8009e20:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009e24:	f240 8127 	bls.w	800a076 <arm_radix4_butterfly_q15+0x34a>
 8009e28:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800a07c <arm_radix4_butterfly_q15+0x350>
 8009e2c:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e2e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009e30:	9102      	str	r1, [sp, #8]
 8009e32:	4608      	mov	r0, r1
 8009e34:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009e38:	0889      	lsrs	r1, r1, #2
 8009e3a:	0092      	lsls	r2, r2, #2
 8009e3c:	0086      	lsls	r6, r0, #2
 8009e3e:	9801      	ldr	r0, [sp, #4]
 8009e40:	920d      	str	r2, [sp, #52]	@ 0x34
 8009e42:	008c      	lsls	r4, r1, #2
 8009e44:	009a      	lsls	r2, r3, #2
 8009e46:	00db      	lsls	r3, r3, #3
 8009e48:	4288      	cmp	r0, r1
 8009e4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e4e:	4604      	mov	r4, r0
 8009e50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e52:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8009e54:	910e      	str	r1, [sp, #56]	@ 0x38
 8009e56:	bf28      	it	cs
 8009e58:	460c      	movcs	r4, r1
 8009e5a:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8009e5e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8009e62:	9308      	str	r3, [sp, #32]
 8009e64:	9307      	str	r3, [sp, #28]
 8009e66:	2300      	movs	r3, #0
 8009e68:	940c      	str	r4, [sp, #48]	@ 0x30
 8009e6a:	9104      	str	r1, [sp, #16]
 8009e6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e6e:	9303      	str	r3, [sp, #12]
 8009e70:	9b08      	ldr	r3, [sp, #32]
 8009e72:	9a05      	ldr	r2, [sp, #20]
 8009e74:	f8d3 9000 	ldr.w	r9, [r3]
 8009e78:	9b07      	ldr	r3, [sp, #28]
 8009e7a:	9f03      	ldr	r7, [sp, #12]
 8009e7c:	f8d3 8000 	ldr.w	r8, [r3]
 8009e80:	9b06      	ldr	r3, [sp, #24]
 8009e82:	f8d3 e000 	ldr.w	lr, [r3]
 8009e86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e88:	4615      	mov	r5, r2
 8009e8a:	1898      	adds	r0, r3, r2
 8009e8c:	9a04      	ldr	r2, [sp, #16]
 8009e8e:	4614      	mov	r4, r2
 8009e90:	1899      	adds	r1, r3, r2
 8009e92:	682a      	ldr	r2, [r5, #0]
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	f8d0 b000 	ldr.w	fp, [r0]
 8009e9a:	fa92 fc13 	qadd16	ip, r2, r3
 8009e9e:	fad2 f213 	qsub16	r2, r2, r3
 8009ea2:	680b      	ldr	r3, [r1, #0]
 8009ea4:	fa9b f313 	qadd16	r3, fp, r3
 8009ea8:	fa9c fb23 	shadd16	fp, ip, r3
 8009eac:	fadc f323 	shsub16	r3, ip, r3
 8009eb0:	f04f 0c00 	mov.w	ip, #0
 8009eb4:	fa9b fb2c 	shadd16	fp, fp, ip
 8009eb8:	f8c5 b000 	str.w	fp, [r5]
 8009ebc:	4435      	add	r5, r6
 8009ebe:	fb28 fb03 	smuad	fp, r8, r3
 8009ec2:	fb48 f313 	smusdx	r3, r8, r3
 8009ec6:	ea03 030a 	and.w	r3, r3, sl
 8009eca:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8009ece:	f8d0 b000 	ldr.w	fp, [r0]
 8009ed2:	6003      	str	r3, [r0, #0]
 8009ed4:	f8d1 c000 	ldr.w	ip, [r1]
 8009ed8:	fadb fc1c 	qsub16	ip, fp, ip
 8009edc:	4430      	add	r0, r6
 8009ede:	faa2 f32c 	shasx	r3, r2, ip
 8009ee2:	fae2 f22c 	shsax	r2, r2, ip
 8009ee6:	fb29 fc02 	smuad	ip, r9, r2
 8009eea:	fb49 f212 	smusdx	r2, r9, r2
 8009eee:	ea02 020a 	and.w	r2, r2, sl
 8009ef2:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8009ef6:	6022      	str	r2, [r4, #0]
 8009ef8:	4434      	add	r4, r6
 8009efa:	fb2e f203 	smuad	r2, lr, r3
 8009efe:	fb4e f313 	smusdx	r3, lr, r3
 8009f02:	ea03 030a 	and.w	r3, r3, sl
 8009f06:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8009f0a:	9a02      	ldr	r2, [sp, #8]
 8009f0c:	600b      	str	r3, [r1, #0]
 8009f0e:	9b01      	ldr	r3, [sp, #4]
 8009f10:	4417      	add	r7, r2
 8009f12:	42bb      	cmp	r3, r7
 8009f14:	4431      	add	r1, r6
 8009f16:	d8bc      	bhi.n	8009e92 <arm_radix4_butterfly_q15+0x166>
 8009f18:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8009f1c:	440a      	add	r2, r1
 8009f1e:	9208      	str	r2, [sp, #32]
 8009f20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f22:	9a07      	ldr	r2, [sp, #28]
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	440a      	add	r2, r1
 8009f28:	9207      	str	r2, [sp, #28]
 8009f2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009f2c:	9a06      	ldr	r2, [sp, #24]
 8009f2e:	440a      	add	r2, r1
 8009f30:	9206      	str	r2, [sp, #24]
 8009f32:	9a05      	ldr	r2, [sp, #20]
 8009f34:	3204      	adds	r2, #4
 8009f36:	9205      	str	r2, [sp, #20]
 8009f38:	9a04      	ldr	r2, [sp, #16]
 8009f3a:	3204      	adds	r2, #4
 8009f3c:	9204      	str	r2, [sp, #16]
 8009f3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f40:	3301      	adds	r3, #1
 8009f42:	4293      	cmp	r3, r2
 8009f44:	9303      	str	r3, [sp, #12]
 8009f46:	d393      	bcc.n	8009e70 <arm_radix4_butterfly_q15+0x144>
 8009f48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f4c:	2a04      	cmp	r2, #4
 8009f4e:	f63f af6e 	bhi.w	8009e2e <arm_radix4_butterfly_q15+0x102>
 8009f52:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8009f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f56:	689d      	ldr	r5, [r3, #8]
 8009f58:	68de      	ldr	r6, [r3, #12]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	6859      	ldr	r1, [r3, #4]
 8009f5e:	fa92 f015 	qadd16	r0, r2, r5
 8009f62:	3c01      	subs	r4, #1
 8009f64:	fad2 f215 	qsub16	r2, r2, r5
 8009f68:	f103 0310 	add.w	r3, r3, #16
 8009f6c:	fa91 f516 	qadd16	r5, r1, r6
 8009f70:	fad1 f116 	qsub16	r1, r1, r6
 8009f74:	fa90 f625 	shadd16	r6, r0, r5
 8009f78:	fad0 f025 	shsub16	r0, r0, r5
 8009f7c:	f843 6c10 	str.w	r6, [r3, #-16]
 8009f80:	f843 0c0c 	str.w	r0, [r3, #-12]
 8009f84:	fae2 f021 	shsax	r0, r2, r1
 8009f88:	faa2 f221 	shasx	r2, r2, r1
 8009f8c:	f843 0c08 	str.w	r0, [r3, #-8]
 8009f90:	f843 2c04 	str.w	r2, [r3, #-4]
 8009f94:	d1df      	bne.n	8009f56 <arm_radix4_butterfly_q15+0x22a>
 8009f96:	b013      	add	sp, #76	@ 0x4c
 8009f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	2400      	movs	r4, #0
 8009f9e:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 800a07c <arm_radix4_butterfly_q15+0x350>
 8009fa2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009fa4:	4623      	mov	r3, r4
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4691      	mov	r9, r2
 8009faa:	f8d8 0000 	ldr.w	r0, [r8]
 8009fae:	f8dc 2000 	ldr.w	r2, [ip]
 8009fb2:	f8da 1000 	ldr.w	r1, [sl]
 8009fb6:	fa90 f023 	shadd16	r0, r0, r3
 8009fba:	fa91 f123 	shadd16	r1, r1, r3
 8009fbe:	fa90 f023 	shadd16	r0, r0, r3
 8009fc2:	fa91 fb23 	shadd16	fp, r1, r3
 8009fc6:	fa92 f223 	shadd16	r2, r2, r3
 8009fca:	6829      	ldr	r1, [r5, #0]
 8009fcc:	fa92 f223 	shadd16	r2, r2, r3
 8009fd0:	fa91 f123 	shadd16	r1, r1, r3
 8009fd4:	fa90 f612 	qadd16	r6, r0, r2
 8009fd8:	fa91 f123 	shadd16	r1, r1, r3
 8009fdc:	fa9b f111 	qadd16	r1, fp, r1
 8009fe0:	fa96 fb21 	shadd16	fp, r6, r1
 8009fe4:	f848 bb04 	str.w	fp, [r8], #4
 8009fe8:	fad6 f611 	qsub16	r6, r6, r1
 8009fec:	fad0 f212 	qsub16	r2, r0, r2
 8009ff0:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8009ff4:	fb21 f006 	smuad	r0, r1, r6
 8009ff8:	fb41 f116 	smusdx	r1, r1, r6
 8009ffc:	ea01 010e 	and.w	r1, r1, lr
 800a000:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800a004:	f8da 0000 	ldr.w	r0, [sl]
 800a008:	f84a 1b04 	str.w	r1, [sl], #4
 800a00c:	fa90 f023 	shadd16	r0, r0, r3
 800a010:	682e      	ldr	r6, [r5, #0]
 800a012:	fa90 f023 	shadd16	r0, r0, r3
 800a016:	fa96 f623 	shadd16	r6, r6, r3
 800a01a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800a01e:	fa96 f623 	shadd16	r6, r6, r3
 800a022:	fad0 f016 	qsub16	r0, r0, r6
 800a026:	faa2 f610 	qasx	r6, r2, r0
 800a02a:	fae2 f210 	qsax	r2, r2, r0
 800a02e:	fb21 fb02 	smuad	fp, r1, r2
 800a032:	fb41 f212 	smusdx	r2, r1, r2
 800a036:	ea02 020e 	and.w	r2, r2, lr
 800a03a:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800a03e:	f84c 2b04 	str.w	r2, [ip], #4
 800a042:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a046:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a04a:	fb22 f106 	smuad	r1, r2, r6
 800a04e:	fb42 f216 	smusdx	r2, r2, r6
 800a052:	ea02 020e 	and.w	r2, r2, lr
 800a056:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800a05a:	f845 2b04 	str.w	r2, [r5], #4
 800a05e:	9a03      	ldr	r2, [sp, #12]
 800a060:	f1b9 0901 	subs.w	r9, r9, #1
 800a064:	4414      	add	r4, r2
 800a066:	d1a0      	bne.n	8009faa <arm_radix4_butterfly_q15+0x27e>
 800a068:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a06a:	9b03      	ldr	r3, [sp, #12]
 800a06c:	2a04      	cmp	r2, #4
 800a06e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a072:	f63f aed9 	bhi.w	8009e28 <arm_radix4_butterfly_q15+0xfc>
 800a076:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a078:	4614      	mov	r4, r2
 800a07a:	e76c      	b.n	8009f56 <arm_radix4_butterfly_q15+0x22a>
 800a07c:	ffff0000 	.word	0xffff0000

0800a080 <arm_radix4_butterfly_inverse_q15>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	b093      	sub	sp, #76	@ 0x4c
 800a086:	f021 0a03 	bic.w	sl, r1, #3
 800a08a:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 800a08e:	9210      	str	r2, [sp, #64]	@ 0x40
 800a090:	2b01      	cmp	r3, #1
 800a092:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800a096:	eb0c 050a 	add.w	r5, ip, sl
 800a09a:	9101      	str	r1, [sp, #4]
 800a09c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	4482      	add	sl, r0
 800a0a2:	9211      	str	r2, [sp, #68]	@ 0x44
 800a0a4:	f040 8124 	bne.w	800a2f0 <arm_radix4_butterfly_inverse_q15+0x270>
 800a0a8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a0aa:	f8df e324 	ldr.w	lr, [pc, #804]	@ 800a3d0 <arm_radix4_butterfly_inverse_q15+0x350>
 800a0ae:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800a0b0:	f8cd a008 	str.w	sl, [sp, #8]
 800a0b4:	4693      	mov	fp, r2
 800a0b6:	4690      	mov	r8, r2
 800a0b8:	4657      	mov	r7, sl
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	4691      	mov	r9, r2
 800a0be:	6830      	ldr	r0, [r6, #0]
 800a0c0:	f8dc 2000 	ldr.w	r2, [ip]
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	fa90 f023 	shadd16	r0, r0, r3
 800a0ca:	fa91 f123 	shadd16	r1, r1, r3
 800a0ce:	fa90 f023 	shadd16	r0, r0, r3
 800a0d2:	fa91 fa23 	shadd16	sl, r1, r3
 800a0d6:	fa92 f223 	shadd16	r2, r2, r3
 800a0da:	6829      	ldr	r1, [r5, #0]
 800a0dc:	fa92 f223 	shadd16	r2, r2, r3
 800a0e0:	fa91 f123 	shadd16	r1, r1, r3
 800a0e4:	fa90 f412 	qadd16	r4, r0, r2
 800a0e8:	fa91 f123 	shadd16	r1, r1, r3
 800a0ec:	fa9a f111 	qadd16	r1, sl, r1
 800a0f0:	fa94 fa21 	shadd16	sl, r4, r1
 800a0f4:	f846 ab04 	str.w	sl, [r6], #4
 800a0f8:	fad4 f411 	qsub16	r4, r4, r1
 800a0fc:	fad0 f212 	qsub16	r2, r0, r2
 800a100:	f85b 1b08 	ldr.w	r1, [fp], #8
 800a104:	fb41 f004 	smusd	r0, r1, r4
 800a108:	fb21 f114 	smuadx	r1, r1, r4
 800a10c:	ea01 010e 	and.w	r1, r1, lr
 800a110:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800a114:	6838      	ldr	r0, [r7, #0]
 800a116:	f847 1b04 	str.w	r1, [r7], #4
 800a11a:	fa90 f023 	shadd16	r0, r0, r3
 800a11e:	682c      	ldr	r4, [r5, #0]
 800a120:	fa90 f023 	shadd16	r0, r0, r3
 800a124:	fa94 f423 	shadd16	r4, r4, r3
 800a128:	f859 1b04 	ldr.w	r1, [r9], #4
 800a12c:	fa94 f423 	shadd16	r4, r4, r3
 800a130:	fad0 f014 	qsub16	r0, r0, r4
 800a134:	fae2 f410 	qsax	r4, r2, r0
 800a138:	faa2 f210 	qasx	r2, r2, r0
 800a13c:	fb41 fa02 	smusd	sl, r1, r2
 800a140:	fb21 f212 	smuadx	r2, r1, r2
 800a144:	ea02 020e 	and.w	r2, r2, lr
 800a148:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800a14c:	f84c 2b04 	str.w	r2, [ip], #4
 800a150:	f858 2b0c 	ldr.w	r2, [r8], #12
 800a154:	fb42 f104 	smusd	r1, r2, r4
 800a158:	fb22 f214 	smuadx	r2, r2, r4
 800a15c:	ea02 020e 	and.w	r2, r2, lr
 800a160:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800a164:	f845 2b04 	str.w	r2, [r5], #4
 800a168:	9a02      	ldr	r2, [sp, #8]
 800a16a:	42b2      	cmp	r2, r6
 800a16c:	d1a7      	bne.n	800a0be <arm_radix4_butterfly_inverse_q15+0x3e>
 800a16e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	2a04      	cmp	r2, #4
 800a174:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a178:	f240 8127 	bls.w	800a3ca <arm_radix4_butterfly_inverse_q15+0x34a>
 800a17c:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800a3d0 <arm_radix4_butterfly_inverse_q15+0x350>
 800a180:	920e      	str	r2, [sp, #56]	@ 0x38
 800a182:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a184:	9102      	str	r1, [sp, #8]
 800a186:	4608      	mov	r0, r1
 800a188:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a18c:	0889      	lsrs	r1, r1, #2
 800a18e:	0092      	lsls	r2, r2, #2
 800a190:	0086      	lsls	r6, r0, #2
 800a192:	9801      	ldr	r0, [sp, #4]
 800a194:	920d      	str	r2, [sp, #52]	@ 0x34
 800a196:	008c      	lsls	r4, r1, #2
 800a198:	009a      	lsls	r2, r3, #2
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	4288      	cmp	r0, r1
 800a19e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a1a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a1a6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800a1a8:	910e      	str	r1, [sp, #56]	@ 0x38
 800a1aa:	bf28      	it	cs
 800a1ac:	460c      	movcs	r4, r1
 800a1ae:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800a1b2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a1b6:	9308      	str	r3, [sp, #32]
 800a1b8:	9307      	str	r3, [sp, #28]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	940c      	str	r4, [sp, #48]	@ 0x30
 800a1be:	9104      	str	r1, [sp, #16]
 800a1c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1c2:	9303      	str	r3, [sp, #12]
 800a1c4:	9b08      	ldr	r3, [sp, #32]
 800a1c6:	9a05      	ldr	r2, [sp, #20]
 800a1c8:	f8d3 9000 	ldr.w	r9, [r3]
 800a1cc:	9b07      	ldr	r3, [sp, #28]
 800a1ce:	9f03      	ldr	r7, [sp, #12]
 800a1d0:	f8d3 8000 	ldr.w	r8, [r3]
 800a1d4:	9b06      	ldr	r3, [sp, #24]
 800a1d6:	f8d3 e000 	ldr.w	lr, [r3]
 800a1da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1dc:	4615      	mov	r5, r2
 800a1de:	1898      	adds	r0, r3, r2
 800a1e0:	9a04      	ldr	r2, [sp, #16]
 800a1e2:	4614      	mov	r4, r2
 800a1e4:	1899      	adds	r1, r3, r2
 800a1e6:	682a      	ldr	r2, [r5, #0]
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	f8d0 b000 	ldr.w	fp, [r0]
 800a1ee:	fa92 fc13 	qadd16	ip, r2, r3
 800a1f2:	fad2 f213 	qsub16	r2, r2, r3
 800a1f6:	680b      	ldr	r3, [r1, #0]
 800a1f8:	fa9b f313 	qadd16	r3, fp, r3
 800a1fc:	fa9c fb23 	shadd16	fp, ip, r3
 800a200:	fadc f323 	shsub16	r3, ip, r3
 800a204:	f04f 0c00 	mov.w	ip, #0
 800a208:	fa9b fb2c 	shadd16	fp, fp, ip
 800a20c:	f8c5 b000 	str.w	fp, [r5]
 800a210:	4435      	add	r5, r6
 800a212:	fb48 fb03 	smusd	fp, r8, r3
 800a216:	fb28 f313 	smuadx	r3, r8, r3
 800a21a:	ea03 030a 	and.w	r3, r3, sl
 800a21e:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800a222:	f8d0 b000 	ldr.w	fp, [r0]
 800a226:	6003      	str	r3, [r0, #0]
 800a228:	f8d1 c000 	ldr.w	ip, [r1]
 800a22c:	fadb fc1c 	qsub16	ip, fp, ip
 800a230:	4430      	add	r0, r6
 800a232:	fae2 f32c 	shsax	r3, r2, ip
 800a236:	faa2 f22c 	shasx	r2, r2, ip
 800a23a:	fb49 fc02 	smusd	ip, r9, r2
 800a23e:	fb29 f212 	smuadx	r2, r9, r2
 800a242:	ea02 020a 	and.w	r2, r2, sl
 800a246:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 800a24a:	6022      	str	r2, [r4, #0]
 800a24c:	4434      	add	r4, r6
 800a24e:	fb4e f203 	smusd	r2, lr, r3
 800a252:	fb2e f313 	smuadx	r3, lr, r3
 800a256:	ea03 030a 	and.w	r3, r3, sl
 800a25a:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800a25e:	9a02      	ldr	r2, [sp, #8]
 800a260:	600b      	str	r3, [r1, #0]
 800a262:	9b01      	ldr	r3, [sp, #4]
 800a264:	4417      	add	r7, r2
 800a266:	42bb      	cmp	r3, r7
 800a268:	4431      	add	r1, r6
 800a26a:	d8bc      	bhi.n	800a1e6 <arm_radix4_butterfly_inverse_q15+0x166>
 800a26c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800a270:	440a      	add	r2, r1
 800a272:	9208      	str	r2, [sp, #32]
 800a274:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a276:	9a07      	ldr	r2, [sp, #28]
 800a278:	9b03      	ldr	r3, [sp, #12]
 800a27a:	440a      	add	r2, r1
 800a27c:	9207      	str	r2, [sp, #28]
 800a27e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a280:	9a06      	ldr	r2, [sp, #24]
 800a282:	440a      	add	r2, r1
 800a284:	9206      	str	r2, [sp, #24]
 800a286:	9a05      	ldr	r2, [sp, #20]
 800a288:	3204      	adds	r2, #4
 800a28a:	9205      	str	r2, [sp, #20]
 800a28c:	9a04      	ldr	r2, [sp, #16]
 800a28e:	3204      	adds	r2, #4
 800a290:	9204      	str	r2, [sp, #16]
 800a292:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a294:	3301      	adds	r3, #1
 800a296:	4293      	cmp	r3, r2
 800a298:	9303      	str	r3, [sp, #12]
 800a29a:	d393      	bcc.n	800a1c4 <arm_radix4_butterfly_inverse_q15+0x144>
 800a29c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2a0:	2a04      	cmp	r2, #4
 800a2a2:	f63f af6e 	bhi.w	800a182 <arm_radix4_butterfly_inverse_q15+0x102>
 800a2a6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a2a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2aa:	689d      	ldr	r5, [r3, #8]
 800a2ac:	68de      	ldr	r6, [r3, #12]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	6859      	ldr	r1, [r3, #4]
 800a2b2:	fa92 f015 	qadd16	r0, r2, r5
 800a2b6:	3c01      	subs	r4, #1
 800a2b8:	fad2 f215 	qsub16	r2, r2, r5
 800a2bc:	f103 0310 	add.w	r3, r3, #16
 800a2c0:	fa91 f516 	qadd16	r5, r1, r6
 800a2c4:	fad1 f116 	qsub16	r1, r1, r6
 800a2c8:	fa90 f625 	shadd16	r6, r0, r5
 800a2cc:	fad0 f025 	shsub16	r0, r0, r5
 800a2d0:	f843 6c10 	str.w	r6, [r3, #-16]
 800a2d4:	f843 0c0c 	str.w	r0, [r3, #-12]
 800a2d8:	faa2 f021 	shasx	r0, r2, r1
 800a2dc:	fae2 f221 	shsax	r2, r2, r1
 800a2e0:	f843 0c08 	str.w	r0, [r3, #-8]
 800a2e4:	f843 2c04 	str.w	r2, [r3, #-4]
 800a2e8:	d1df      	bne.n	800a2aa <arm_radix4_butterfly_inverse_q15+0x22a>
 800a2ea:	b013      	add	sp, #76	@ 0x4c
 800a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f0:	2400      	movs	r4, #0
 800a2f2:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 800a3d0 <arm_radix4_butterfly_inverse_q15+0x350>
 800a2f6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a2f8:	4623      	mov	r3, r4
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	4691      	mov	r9, r2
 800a2fe:	f8d8 0000 	ldr.w	r0, [r8]
 800a302:	f8dc 2000 	ldr.w	r2, [ip]
 800a306:	f8da 1000 	ldr.w	r1, [sl]
 800a30a:	fa90 f023 	shadd16	r0, r0, r3
 800a30e:	fa91 f123 	shadd16	r1, r1, r3
 800a312:	fa90 f023 	shadd16	r0, r0, r3
 800a316:	fa91 fb23 	shadd16	fp, r1, r3
 800a31a:	fa92 f223 	shadd16	r2, r2, r3
 800a31e:	6829      	ldr	r1, [r5, #0]
 800a320:	fa92 f223 	shadd16	r2, r2, r3
 800a324:	fa91 f123 	shadd16	r1, r1, r3
 800a328:	fa90 f612 	qadd16	r6, r0, r2
 800a32c:	fa91 f123 	shadd16	r1, r1, r3
 800a330:	fa9b f111 	qadd16	r1, fp, r1
 800a334:	fa96 fb21 	shadd16	fp, r6, r1
 800a338:	f848 bb04 	str.w	fp, [r8], #4
 800a33c:	fad6 f611 	qsub16	r6, r6, r1
 800a340:	fad0 f212 	qsub16	r2, r0, r2
 800a344:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 800a348:	fb41 f006 	smusd	r0, r1, r6
 800a34c:	fb21 f116 	smuadx	r1, r1, r6
 800a350:	ea01 010e 	and.w	r1, r1, lr
 800a354:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800a358:	f8da 0000 	ldr.w	r0, [sl]
 800a35c:	f84a 1b04 	str.w	r1, [sl], #4
 800a360:	fa90 f023 	shadd16	r0, r0, r3
 800a364:	682e      	ldr	r6, [r5, #0]
 800a366:	fa90 f023 	shadd16	r0, r0, r3
 800a36a:	fa96 f623 	shadd16	r6, r6, r3
 800a36e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800a372:	fa96 f623 	shadd16	r6, r6, r3
 800a376:	fad0 f016 	qsub16	r0, r0, r6
 800a37a:	fae2 f610 	qsax	r6, r2, r0
 800a37e:	faa2 f210 	qasx	r2, r2, r0
 800a382:	fb41 fb02 	smusd	fp, r1, r2
 800a386:	fb21 f212 	smuadx	r2, r1, r2
 800a38a:	ea02 020e 	and.w	r2, r2, lr
 800a38e:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800a392:	f84c 2b04 	str.w	r2, [ip], #4
 800a396:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a39a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a39e:	fb42 f106 	smusd	r1, r2, r6
 800a3a2:	fb22 f216 	smuadx	r2, r2, r6
 800a3a6:	ea02 020e 	and.w	r2, r2, lr
 800a3aa:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800a3ae:	f845 2b04 	str.w	r2, [r5], #4
 800a3b2:	9a03      	ldr	r2, [sp, #12]
 800a3b4:	f1b9 0901 	subs.w	r9, r9, #1
 800a3b8:	4414      	add	r4, r2
 800a3ba:	d1a0      	bne.n	800a2fe <arm_radix4_butterfly_inverse_q15+0x27e>
 800a3bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a3be:	9b03      	ldr	r3, [sp, #12]
 800a3c0:	2a04      	cmp	r2, #4
 800a3c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a3c6:	f63f aed9 	bhi.w	800a17c <arm_radix4_butterfly_inverse_q15+0xfc>
 800a3ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	e76c      	b.n	800a2aa <arm_radix4_butterfly_inverse_q15+0x22a>
 800a3d0:	ffff0000 	.word	0xffff0000

0800a3d4 <arm_bitreversal_16>:
 800a3d4:	b1f1      	cbz	r1, 800a414 <arm_bitreversal_16+0x40>
 800a3d6:	b4f0      	push	{r4, r5, r6, r7}
 800a3d8:	2400      	movs	r4, #0
 800a3da:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 800a3de:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800a3e2:	886d      	ldrh	r5, [r5, #2]
 800a3e4:	08ad      	lsrs	r5, r5, #2
 800a3e6:	089b      	lsrs	r3, r3, #2
 800a3e8:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 800a3ec:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 800a3f0:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 800a3f4:	006e      	lsls	r6, r5, #1
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 800a3fc:	3302      	adds	r3, #2
 800a3fe:	1cb5      	adds	r5, r6, #2
 800a400:	3402      	adds	r4, #2
 800a402:	b2a4      	uxth	r4, r4
 800a404:	5ac6      	ldrh	r6, [r0, r3]
 800a406:	5b47      	ldrh	r7, [r0, r5]
 800a408:	52c7      	strh	r7, [r0, r3]
 800a40a:	42a1      	cmp	r1, r4
 800a40c:	5346      	strh	r6, [r0, r5]
 800a40e:	d8e4      	bhi.n	800a3da <arm_bitreversal_16+0x6>
 800a410:	bcf0      	pop	{r4, r5, r6, r7}
 800a412:	4770      	bx	lr
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop

0800a418 <std>:
 800a418:	2300      	movs	r3, #0
 800a41a:	b510      	push	{r4, lr}
 800a41c:	4604      	mov	r4, r0
 800a41e:	e9c0 3300 	strd	r3, r3, [r0]
 800a422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a426:	6083      	str	r3, [r0, #8]
 800a428:	8181      	strh	r1, [r0, #12]
 800a42a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a42c:	81c2      	strh	r2, [r0, #14]
 800a42e:	6183      	str	r3, [r0, #24]
 800a430:	4619      	mov	r1, r3
 800a432:	2208      	movs	r2, #8
 800a434:	305c      	adds	r0, #92	@ 0x5c
 800a436:	f000 faad 	bl	800a994 <memset>
 800a43a:	4b0d      	ldr	r3, [pc, #52]	@ (800a470 <std+0x58>)
 800a43c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a43e:	4b0d      	ldr	r3, [pc, #52]	@ (800a474 <std+0x5c>)
 800a440:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <std+0x60>)
 800a444:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a446:	4b0d      	ldr	r3, [pc, #52]	@ (800a47c <std+0x64>)
 800a448:	6323      	str	r3, [r4, #48]	@ 0x30
 800a44a:	4b0d      	ldr	r3, [pc, #52]	@ (800a480 <std+0x68>)
 800a44c:	6224      	str	r4, [r4, #32]
 800a44e:	429c      	cmp	r4, r3
 800a450:	d006      	beq.n	800a460 <std+0x48>
 800a452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a456:	4294      	cmp	r4, r2
 800a458:	d002      	beq.n	800a460 <std+0x48>
 800a45a:	33d0      	adds	r3, #208	@ 0xd0
 800a45c:	429c      	cmp	r4, r3
 800a45e:	d105      	bne.n	800a46c <std+0x54>
 800a460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a468:	f000 bb0c 	b.w	800aa84 <__retarget_lock_init_recursive>
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	bf00      	nop
 800a470:	0800a7e5 	.word	0x0800a7e5
 800a474:	0800a807 	.word	0x0800a807
 800a478:	0800a83f 	.word	0x0800a83f
 800a47c:	0800a863 	.word	0x0800a863
 800a480:	20004b48 	.word	0x20004b48

0800a484 <stdio_exit_handler>:
 800a484:	4a02      	ldr	r2, [pc, #8]	@ (800a490 <stdio_exit_handler+0xc>)
 800a486:	4903      	ldr	r1, [pc, #12]	@ (800a494 <stdio_exit_handler+0x10>)
 800a488:	4803      	ldr	r0, [pc, #12]	@ (800a498 <stdio_exit_handler+0x14>)
 800a48a:	f000 b869 	b.w	800a560 <_fwalk_sglue>
 800a48e:	bf00      	nop
 800a490:	20002fa0 	.word	0x20002fa0
 800a494:	0800b351 	.word	0x0800b351
 800a498:	20002fb0 	.word	0x20002fb0

0800a49c <cleanup_stdio>:
 800a49c:	6841      	ldr	r1, [r0, #4]
 800a49e:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d0 <cleanup_stdio+0x34>)
 800a4a0:	4299      	cmp	r1, r3
 800a4a2:	b510      	push	{r4, lr}
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	d001      	beq.n	800a4ac <cleanup_stdio+0x10>
 800a4a8:	f000 ff52 	bl	800b350 <_fflush_r>
 800a4ac:	68a1      	ldr	r1, [r4, #8]
 800a4ae:	4b09      	ldr	r3, [pc, #36]	@ (800a4d4 <cleanup_stdio+0x38>)
 800a4b0:	4299      	cmp	r1, r3
 800a4b2:	d002      	beq.n	800a4ba <cleanup_stdio+0x1e>
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f000 ff4b 	bl	800b350 <_fflush_r>
 800a4ba:	68e1      	ldr	r1, [r4, #12]
 800a4bc:	4b06      	ldr	r3, [pc, #24]	@ (800a4d8 <cleanup_stdio+0x3c>)
 800a4be:	4299      	cmp	r1, r3
 800a4c0:	d004      	beq.n	800a4cc <cleanup_stdio+0x30>
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c8:	f000 bf42 	b.w	800b350 <_fflush_r>
 800a4cc:	bd10      	pop	{r4, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20004b48 	.word	0x20004b48
 800a4d4:	20004bb0 	.word	0x20004bb0
 800a4d8:	20004c18 	.word	0x20004c18

0800a4dc <global_stdio_init.part.0>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	4b0b      	ldr	r3, [pc, #44]	@ (800a50c <global_stdio_init.part.0+0x30>)
 800a4e0:	4c0b      	ldr	r4, [pc, #44]	@ (800a510 <global_stdio_init.part.0+0x34>)
 800a4e2:	4a0c      	ldr	r2, [pc, #48]	@ (800a514 <global_stdio_init.part.0+0x38>)
 800a4e4:	601a      	str	r2, [r3, #0]
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2104      	movs	r1, #4
 800a4ec:	f7ff ff94 	bl	800a418 <std>
 800a4f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	2109      	movs	r1, #9
 800a4f8:	f7ff ff8e 	bl	800a418 <std>
 800a4fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a500:	2202      	movs	r2, #2
 800a502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a506:	2112      	movs	r1, #18
 800a508:	f7ff bf86 	b.w	800a418 <std>
 800a50c:	20004c80 	.word	0x20004c80
 800a510:	20004b48 	.word	0x20004b48
 800a514:	0800a485 	.word	0x0800a485

0800a518 <__sfp_lock_acquire>:
 800a518:	4801      	ldr	r0, [pc, #4]	@ (800a520 <__sfp_lock_acquire+0x8>)
 800a51a:	f000 bab4 	b.w	800aa86 <__retarget_lock_acquire_recursive>
 800a51e:	bf00      	nop
 800a520:	20004c89 	.word	0x20004c89

0800a524 <__sfp_lock_release>:
 800a524:	4801      	ldr	r0, [pc, #4]	@ (800a52c <__sfp_lock_release+0x8>)
 800a526:	f000 baaf 	b.w	800aa88 <__retarget_lock_release_recursive>
 800a52a:	bf00      	nop
 800a52c:	20004c89 	.word	0x20004c89

0800a530 <__sinit>:
 800a530:	b510      	push	{r4, lr}
 800a532:	4604      	mov	r4, r0
 800a534:	f7ff fff0 	bl	800a518 <__sfp_lock_acquire>
 800a538:	6a23      	ldr	r3, [r4, #32]
 800a53a:	b11b      	cbz	r3, 800a544 <__sinit+0x14>
 800a53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a540:	f7ff bff0 	b.w	800a524 <__sfp_lock_release>
 800a544:	4b04      	ldr	r3, [pc, #16]	@ (800a558 <__sinit+0x28>)
 800a546:	6223      	str	r3, [r4, #32]
 800a548:	4b04      	ldr	r3, [pc, #16]	@ (800a55c <__sinit+0x2c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1f5      	bne.n	800a53c <__sinit+0xc>
 800a550:	f7ff ffc4 	bl	800a4dc <global_stdio_init.part.0>
 800a554:	e7f2      	b.n	800a53c <__sinit+0xc>
 800a556:	bf00      	nop
 800a558:	0800a49d 	.word	0x0800a49d
 800a55c:	20004c80 	.word	0x20004c80

0800a560 <_fwalk_sglue>:
 800a560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a564:	4607      	mov	r7, r0
 800a566:	4688      	mov	r8, r1
 800a568:	4614      	mov	r4, r2
 800a56a:	2600      	movs	r6, #0
 800a56c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a570:	f1b9 0901 	subs.w	r9, r9, #1
 800a574:	d505      	bpl.n	800a582 <_fwalk_sglue+0x22>
 800a576:	6824      	ldr	r4, [r4, #0]
 800a578:	2c00      	cmp	r4, #0
 800a57a:	d1f7      	bne.n	800a56c <_fwalk_sglue+0xc>
 800a57c:	4630      	mov	r0, r6
 800a57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a582:	89ab      	ldrh	r3, [r5, #12]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d907      	bls.n	800a598 <_fwalk_sglue+0x38>
 800a588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a58c:	3301      	adds	r3, #1
 800a58e:	d003      	beq.n	800a598 <_fwalk_sglue+0x38>
 800a590:	4629      	mov	r1, r5
 800a592:	4638      	mov	r0, r7
 800a594:	47c0      	blx	r8
 800a596:	4306      	orrs	r6, r0
 800a598:	3568      	adds	r5, #104	@ 0x68
 800a59a:	e7e9      	b.n	800a570 <_fwalk_sglue+0x10>

0800a59c <iprintf>:
 800a59c:	b40f      	push	{r0, r1, r2, r3}
 800a59e:	b507      	push	{r0, r1, r2, lr}
 800a5a0:	4906      	ldr	r1, [pc, #24]	@ (800a5bc <iprintf+0x20>)
 800a5a2:	ab04      	add	r3, sp, #16
 800a5a4:	6808      	ldr	r0, [r1, #0]
 800a5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5aa:	6881      	ldr	r1, [r0, #8]
 800a5ac:	9301      	str	r3, [sp, #4]
 800a5ae:	f000 fba5 	bl	800acfc <_vfiprintf_r>
 800a5b2:	b003      	add	sp, #12
 800a5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b8:	b004      	add	sp, #16
 800a5ba:	4770      	bx	lr
 800a5bc:	20002fac 	.word	0x20002fac

0800a5c0 <_puts_r>:
 800a5c0:	6a03      	ldr	r3, [r0, #32]
 800a5c2:	b570      	push	{r4, r5, r6, lr}
 800a5c4:	6884      	ldr	r4, [r0, #8]
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	460e      	mov	r6, r1
 800a5ca:	b90b      	cbnz	r3, 800a5d0 <_puts_r+0x10>
 800a5cc:	f7ff ffb0 	bl	800a530 <__sinit>
 800a5d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5d2:	07db      	lsls	r3, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_puts_r+0x22>
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	0598      	lsls	r0, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_puts_r+0x22>
 800a5dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5de:	f000 fa52 	bl	800aa86 <__retarget_lock_acquire_recursive>
 800a5e2:	89a3      	ldrh	r3, [r4, #12]
 800a5e4:	0719      	lsls	r1, r3, #28
 800a5e6:	d502      	bpl.n	800a5ee <_puts_r+0x2e>
 800a5e8:	6923      	ldr	r3, [r4, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d135      	bne.n	800a65a <_puts_r+0x9a>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	f000 f979 	bl	800a8e8 <__swsetup_r>
 800a5f6:	b380      	cbz	r0, 800a65a <_puts_r+0x9a>
 800a5f8:	f04f 35ff 	mov.w	r5, #4294967295
 800a5fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5fe:	07da      	lsls	r2, r3, #31
 800a600:	d405      	bmi.n	800a60e <_puts_r+0x4e>
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	059b      	lsls	r3, r3, #22
 800a606:	d402      	bmi.n	800a60e <_puts_r+0x4e>
 800a608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a60a:	f000 fa3d 	bl	800aa88 <__retarget_lock_release_recursive>
 800a60e:	4628      	mov	r0, r5
 800a610:	bd70      	pop	{r4, r5, r6, pc}
 800a612:	2b00      	cmp	r3, #0
 800a614:	da04      	bge.n	800a620 <_puts_r+0x60>
 800a616:	69a2      	ldr	r2, [r4, #24]
 800a618:	429a      	cmp	r2, r3
 800a61a:	dc17      	bgt.n	800a64c <_puts_r+0x8c>
 800a61c:	290a      	cmp	r1, #10
 800a61e:	d015      	beq.n	800a64c <_puts_r+0x8c>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	7019      	strb	r1, [r3, #0]
 800a628:	68a3      	ldr	r3, [r4, #8]
 800a62a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a62e:	3b01      	subs	r3, #1
 800a630:	60a3      	str	r3, [r4, #8]
 800a632:	2900      	cmp	r1, #0
 800a634:	d1ed      	bne.n	800a612 <_puts_r+0x52>
 800a636:	2b00      	cmp	r3, #0
 800a638:	da11      	bge.n	800a65e <_puts_r+0x9e>
 800a63a:	4622      	mov	r2, r4
 800a63c:	210a      	movs	r1, #10
 800a63e:	4628      	mov	r0, r5
 800a640:	f000 f913 	bl	800a86a <__swbuf_r>
 800a644:	3001      	adds	r0, #1
 800a646:	d0d7      	beq.n	800a5f8 <_puts_r+0x38>
 800a648:	250a      	movs	r5, #10
 800a64a:	e7d7      	b.n	800a5fc <_puts_r+0x3c>
 800a64c:	4622      	mov	r2, r4
 800a64e:	4628      	mov	r0, r5
 800a650:	f000 f90b 	bl	800a86a <__swbuf_r>
 800a654:	3001      	adds	r0, #1
 800a656:	d1e7      	bne.n	800a628 <_puts_r+0x68>
 800a658:	e7ce      	b.n	800a5f8 <_puts_r+0x38>
 800a65a:	3e01      	subs	r6, #1
 800a65c:	e7e4      	b.n	800a628 <_puts_r+0x68>
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	1c5a      	adds	r2, r3, #1
 800a662:	6022      	str	r2, [r4, #0]
 800a664:	220a      	movs	r2, #10
 800a666:	701a      	strb	r2, [r3, #0]
 800a668:	e7ee      	b.n	800a648 <_puts_r+0x88>
	...

0800a66c <puts>:
 800a66c:	4b02      	ldr	r3, [pc, #8]	@ (800a678 <puts+0xc>)
 800a66e:	4601      	mov	r1, r0
 800a670:	6818      	ldr	r0, [r3, #0]
 800a672:	f7ff bfa5 	b.w	800a5c0 <_puts_r>
 800a676:	bf00      	nop
 800a678:	20002fac 	.word	0x20002fac

0800a67c <setvbuf>:
 800a67c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a680:	461d      	mov	r5, r3
 800a682:	4b57      	ldr	r3, [pc, #348]	@ (800a7e0 <setvbuf+0x164>)
 800a684:	681f      	ldr	r7, [r3, #0]
 800a686:	4604      	mov	r4, r0
 800a688:	460e      	mov	r6, r1
 800a68a:	4690      	mov	r8, r2
 800a68c:	b127      	cbz	r7, 800a698 <setvbuf+0x1c>
 800a68e:	6a3b      	ldr	r3, [r7, #32]
 800a690:	b913      	cbnz	r3, 800a698 <setvbuf+0x1c>
 800a692:	4638      	mov	r0, r7
 800a694:	f7ff ff4c 	bl	800a530 <__sinit>
 800a698:	f1b8 0f02 	cmp.w	r8, #2
 800a69c:	d006      	beq.n	800a6ac <setvbuf+0x30>
 800a69e:	f1b8 0f01 	cmp.w	r8, #1
 800a6a2:	f200 809a 	bhi.w	800a7da <setvbuf+0x15e>
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	f2c0 8097 	blt.w	800a7da <setvbuf+0x15e>
 800a6ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6ae:	07d9      	lsls	r1, r3, #31
 800a6b0:	d405      	bmi.n	800a6be <setvbuf+0x42>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	059a      	lsls	r2, r3, #22
 800a6b6:	d402      	bmi.n	800a6be <setvbuf+0x42>
 800a6b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ba:	f000 f9e4 	bl	800aa86 <__retarget_lock_acquire_recursive>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f000 fe45 	bl	800b350 <_fflush_r>
 800a6c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6c8:	b141      	cbz	r1, 800a6dc <setvbuf+0x60>
 800a6ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6ce:	4299      	cmp	r1, r3
 800a6d0:	d002      	beq.n	800a6d8 <setvbuf+0x5c>
 800a6d2:	4638      	mov	r0, r7
 800a6d4:	f000 f9e8 	bl	800aaa8 <_free_r>
 800a6d8:	2300      	movs	r3, #0
 800a6da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6dc:	2300      	movs	r3, #0
 800a6de:	61a3      	str	r3, [r4, #24]
 800a6e0:	6063      	str	r3, [r4, #4]
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	061b      	lsls	r3, r3, #24
 800a6e6:	d503      	bpl.n	800a6f0 <setvbuf+0x74>
 800a6e8:	6921      	ldr	r1, [r4, #16]
 800a6ea:	4638      	mov	r0, r7
 800a6ec:	f000 f9dc 	bl	800aaa8 <_free_r>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800a6f6:	f023 0303 	bic.w	r3, r3, #3
 800a6fa:	f1b8 0f02 	cmp.w	r8, #2
 800a6fe:	81a3      	strh	r3, [r4, #12]
 800a700:	d061      	beq.n	800a7c6 <setvbuf+0x14a>
 800a702:	ab01      	add	r3, sp, #4
 800a704:	466a      	mov	r2, sp
 800a706:	4621      	mov	r1, r4
 800a708:	4638      	mov	r0, r7
 800a70a:	f000 fe49 	bl	800b3a0 <__swhatbuf_r>
 800a70e:	89a3      	ldrh	r3, [r4, #12]
 800a710:	4318      	orrs	r0, r3
 800a712:	81a0      	strh	r0, [r4, #12]
 800a714:	bb2d      	cbnz	r5, 800a762 <setvbuf+0xe6>
 800a716:	9d00      	ldr	r5, [sp, #0]
 800a718:	4628      	mov	r0, r5
 800a71a:	f000 fa0f 	bl	800ab3c <malloc>
 800a71e:	4606      	mov	r6, r0
 800a720:	2800      	cmp	r0, #0
 800a722:	d152      	bne.n	800a7ca <setvbuf+0x14e>
 800a724:	f8dd 9000 	ldr.w	r9, [sp]
 800a728:	45a9      	cmp	r9, r5
 800a72a:	d140      	bne.n	800a7ae <setvbuf+0x132>
 800a72c:	f04f 35ff 	mov.w	r5, #4294967295
 800a730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a734:	f043 0202 	orr.w	r2, r3, #2
 800a738:	81a2      	strh	r2, [r4, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	60a2      	str	r2, [r4, #8]
 800a73e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800a742:	6022      	str	r2, [r4, #0]
 800a744:	6122      	str	r2, [r4, #16]
 800a746:	2201      	movs	r2, #1
 800a748:	6162      	str	r2, [r4, #20]
 800a74a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a74c:	07d6      	lsls	r6, r2, #31
 800a74e:	d404      	bmi.n	800a75a <setvbuf+0xde>
 800a750:	0598      	lsls	r0, r3, #22
 800a752:	d402      	bmi.n	800a75a <setvbuf+0xde>
 800a754:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a756:	f000 f997 	bl	800aa88 <__retarget_lock_release_recursive>
 800a75a:	4628      	mov	r0, r5
 800a75c:	b003      	add	sp, #12
 800a75e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a762:	2e00      	cmp	r6, #0
 800a764:	d0d8      	beq.n	800a718 <setvbuf+0x9c>
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	b913      	cbnz	r3, 800a770 <setvbuf+0xf4>
 800a76a:	4638      	mov	r0, r7
 800a76c:	f7ff fee0 	bl	800a530 <__sinit>
 800a770:	f1b8 0f01 	cmp.w	r8, #1
 800a774:	bf08      	it	eq
 800a776:	89a3      	ldrheq	r3, [r4, #12]
 800a778:	6026      	str	r6, [r4, #0]
 800a77a:	bf04      	itt	eq
 800a77c:	f043 0301 	orreq.w	r3, r3, #1
 800a780:	81a3      	strheq	r3, [r4, #12]
 800a782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a786:	f013 0208 	ands.w	r2, r3, #8
 800a78a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a78e:	d01e      	beq.n	800a7ce <setvbuf+0x152>
 800a790:	07d9      	lsls	r1, r3, #31
 800a792:	bf41      	itttt	mi
 800a794:	2200      	movmi	r2, #0
 800a796:	426d      	negmi	r5, r5
 800a798:	60a2      	strmi	r2, [r4, #8]
 800a79a:	61a5      	strmi	r5, [r4, #24]
 800a79c:	bf58      	it	pl
 800a79e:	60a5      	strpl	r5, [r4, #8]
 800a7a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7a2:	07d2      	lsls	r2, r2, #31
 800a7a4:	d401      	bmi.n	800a7aa <setvbuf+0x12e>
 800a7a6:	059b      	lsls	r3, r3, #22
 800a7a8:	d513      	bpl.n	800a7d2 <setvbuf+0x156>
 800a7aa:	2500      	movs	r5, #0
 800a7ac:	e7d5      	b.n	800a75a <setvbuf+0xde>
 800a7ae:	4648      	mov	r0, r9
 800a7b0:	f000 f9c4 	bl	800ab3c <malloc>
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d0b8      	beq.n	800a72c <setvbuf+0xb0>
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	464d      	mov	r5, r9
 800a7c4:	e7cf      	b.n	800a766 <setvbuf+0xea>
 800a7c6:	2500      	movs	r5, #0
 800a7c8:	e7b2      	b.n	800a730 <setvbuf+0xb4>
 800a7ca:	46a9      	mov	r9, r5
 800a7cc:	e7f5      	b.n	800a7ba <setvbuf+0x13e>
 800a7ce:	60a2      	str	r2, [r4, #8]
 800a7d0:	e7e6      	b.n	800a7a0 <setvbuf+0x124>
 800a7d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7d4:	f000 f958 	bl	800aa88 <__retarget_lock_release_recursive>
 800a7d8:	e7e7      	b.n	800a7aa <setvbuf+0x12e>
 800a7da:	f04f 35ff 	mov.w	r5, #4294967295
 800a7de:	e7bc      	b.n	800a75a <setvbuf+0xde>
 800a7e0:	20002fac 	.word	0x20002fac

0800a7e4 <__sread>:
 800a7e4:	b510      	push	{r4, lr}
 800a7e6:	460c      	mov	r4, r1
 800a7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ec:	f000 f8fc 	bl	800a9e8 <_read_r>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	bfab      	itete	ge
 800a7f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a7f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a7f8:	181b      	addge	r3, r3, r0
 800a7fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a7fe:	bfac      	ite	ge
 800a800:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a802:	81a3      	strhlt	r3, [r4, #12]
 800a804:	bd10      	pop	{r4, pc}

0800a806 <__swrite>:
 800a806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80a:	461f      	mov	r7, r3
 800a80c:	898b      	ldrh	r3, [r1, #12]
 800a80e:	05db      	lsls	r3, r3, #23
 800a810:	4605      	mov	r5, r0
 800a812:	460c      	mov	r4, r1
 800a814:	4616      	mov	r6, r2
 800a816:	d505      	bpl.n	800a824 <__swrite+0x1e>
 800a818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81c:	2302      	movs	r3, #2
 800a81e:	2200      	movs	r2, #0
 800a820:	f000 f8d0 	bl	800a9c4 <_lseek_r>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a82a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a82e:	81a3      	strh	r3, [r4, #12]
 800a830:	4632      	mov	r2, r6
 800a832:	463b      	mov	r3, r7
 800a834:	4628      	mov	r0, r5
 800a836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a83a:	f000 b8e7 	b.w	800aa0c <_write_r>

0800a83e <__sseek>:
 800a83e:	b510      	push	{r4, lr}
 800a840:	460c      	mov	r4, r1
 800a842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a846:	f000 f8bd 	bl	800a9c4 <_lseek_r>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	89a3      	ldrh	r3, [r4, #12]
 800a84e:	bf15      	itete	ne
 800a850:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a852:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a856:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a85a:	81a3      	strheq	r3, [r4, #12]
 800a85c:	bf18      	it	ne
 800a85e:	81a3      	strhne	r3, [r4, #12]
 800a860:	bd10      	pop	{r4, pc}

0800a862 <__sclose>:
 800a862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a866:	f000 b89d 	b.w	800a9a4 <_close_r>

0800a86a <__swbuf_r>:
 800a86a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86c:	460e      	mov	r6, r1
 800a86e:	4614      	mov	r4, r2
 800a870:	4605      	mov	r5, r0
 800a872:	b118      	cbz	r0, 800a87c <__swbuf_r+0x12>
 800a874:	6a03      	ldr	r3, [r0, #32]
 800a876:	b90b      	cbnz	r3, 800a87c <__swbuf_r+0x12>
 800a878:	f7ff fe5a 	bl	800a530 <__sinit>
 800a87c:	69a3      	ldr	r3, [r4, #24]
 800a87e:	60a3      	str	r3, [r4, #8]
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	071a      	lsls	r2, r3, #28
 800a884:	d501      	bpl.n	800a88a <__swbuf_r+0x20>
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	b943      	cbnz	r3, 800a89c <__swbuf_r+0x32>
 800a88a:	4621      	mov	r1, r4
 800a88c:	4628      	mov	r0, r5
 800a88e:	f000 f82b 	bl	800a8e8 <__swsetup_r>
 800a892:	b118      	cbz	r0, 800a89c <__swbuf_r+0x32>
 800a894:	f04f 37ff 	mov.w	r7, #4294967295
 800a898:	4638      	mov	r0, r7
 800a89a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a89c:	6823      	ldr	r3, [r4, #0]
 800a89e:	6922      	ldr	r2, [r4, #16]
 800a8a0:	1a98      	subs	r0, r3, r2
 800a8a2:	6963      	ldr	r3, [r4, #20]
 800a8a4:	b2f6      	uxtb	r6, r6
 800a8a6:	4283      	cmp	r3, r0
 800a8a8:	4637      	mov	r7, r6
 800a8aa:	dc05      	bgt.n	800a8b8 <__swbuf_r+0x4e>
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f000 fd4e 	bl	800b350 <_fflush_r>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d1ed      	bne.n	800a894 <__swbuf_r+0x2a>
 800a8b8:	68a3      	ldr	r3, [r4, #8]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	60a3      	str	r3, [r4, #8]
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	1c5a      	adds	r2, r3, #1
 800a8c2:	6022      	str	r2, [r4, #0]
 800a8c4:	701e      	strb	r6, [r3, #0]
 800a8c6:	6962      	ldr	r2, [r4, #20]
 800a8c8:	1c43      	adds	r3, r0, #1
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d004      	beq.n	800a8d8 <__swbuf_r+0x6e>
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	07db      	lsls	r3, r3, #31
 800a8d2:	d5e1      	bpl.n	800a898 <__swbuf_r+0x2e>
 800a8d4:	2e0a      	cmp	r6, #10
 800a8d6:	d1df      	bne.n	800a898 <__swbuf_r+0x2e>
 800a8d8:	4621      	mov	r1, r4
 800a8da:	4628      	mov	r0, r5
 800a8dc:	f000 fd38 	bl	800b350 <_fflush_r>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d0d9      	beq.n	800a898 <__swbuf_r+0x2e>
 800a8e4:	e7d6      	b.n	800a894 <__swbuf_r+0x2a>
	...

0800a8e8 <__swsetup_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	4b29      	ldr	r3, [pc, #164]	@ (800a990 <__swsetup_r+0xa8>)
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	6818      	ldr	r0, [r3, #0]
 800a8f0:	460c      	mov	r4, r1
 800a8f2:	b118      	cbz	r0, 800a8fc <__swsetup_r+0x14>
 800a8f4:	6a03      	ldr	r3, [r0, #32]
 800a8f6:	b90b      	cbnz	r3, 800a8fc <__swsetup_r+0x14>
 800a8f8:	f7ff fe1a 	bl	800a530 <__sinit>
 800a8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a900:	0719      	lsls	r1, r3, #28
 800a902:	d422      	bmi.n	800a94a <__swsetup_r+0x62>
 800a904:	06da      	lsls	r2, r3, #27
 800a906:	d407      	bmi.n	800a918 <__swsetup_r+0x30>
 800a908:	2209      	movs	r2, #9
 800a90a:	602a      	str	r2, [r5, #0]
 800a90c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a910:	81a3      	strh	r3, [r4, #12]
 800a912:	f04f 30ff 	mov.w	r0, #4294967295
 800a916:	e033      	b.n	800a980 <__swsetup_r+0x98>
 800a918:	0758      	lsls	r0, r3, #29
 800a91a:	d512      	bpl.n	800a942 <__swsetup_r+0x5a>
 800a91c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a91e:	b141      	cbz	r1, 800a932 <__swsetup_r+0x4a>
 800a920:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a924:	4299      	cmp	r1, r3
 800a926:	d002      	beq.n	800a92e <__swsetup_r+0x46>
 800a928:	4628      	mov	r0, r5
 800a92a:	f000 f8bd 	bl	800aaa8 <_free_r>
 800a92e:	2300      	movs	r3, #0
 800a930:	6363      	str	r3, [r4, #52]	@ 0x34
 800a932:	89a3      	ldrh	r3, [r4, #12]
 800a934:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a938:	81a3      	strh	r3, [r4, #12]
 800a93a:	2300      	movs	r3, #0
 800a93c:	6063      	str	r3, [r4, #4]
 800a93e:	6923      	ldr	r3, [r4, #16]
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	f043 0308 	orr.w	r3, r3, #8
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	b94b      	cbnz	r3, 800a962 <__swsetup_r+0x7a>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a958:	d003      	beq.n	800a962 <__swsetup_r+0x7a>
 800a95a:	4621      	mov	r1, r4
 800a95c:	4628      	mov	r0, r5
 800a95e:	f000 fd45 	bl	800b3ec <__smakebuf_r>
 800a962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a966:	f013 0201 	ands.w	r2, r3, #1
 800a96a:	d00a      	beq.n	800a982 <__swsetup_r+0x9a>
 800a96c:	2200      	movs	r2, #0
 800a96e:	60a2      	str	r2, [r4, #8]
 800a970:	6962      	ldr	r2, [r4, #20]
 800a972:	4252      	negs	r2, r2
 800a974:	61a2      	str	r2, [r4, #24]
 800a976:	6922      	ldr	r2, [r4, #16]
 800a978:	b942      	cbnz	r2, 800a98c <__swsetup_r+0xa4>
 800a97a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a97e:	d1c5      	bne.n	800a90c <__swsetup_r+0x24>
 800a980:	bd38      	pop	{r3, r4, r5, pc}
 800a982:	0799      	lsls	r1, r3, #30
 800a984:	bf58      	it	pl
 800a986:	6962      	ldrpl	r2, [r4, #20]
 800a988:	60a2      	str	r2, [r4, #8]
 800a98a:	e7f4      	b.n	800a976 <__swsetup_r+0x8e>
 800a98c:	2000      	movs	r0, #0
 800a98e:	e7f7      	b.n	800a980 <__swsetup_r+0x98>
 800a990:	20002fac 	.word	0x20002fac

0800a994 <memset>:
 800a994:	4402      	add	r2, r0
 800a996:	4603      	mov	r3, r0
 800a998:	4293      	cmp	r3, r2
 800a99a:	d100      	bne.n	800a99e <memset+0xa>
 800a99c:	4770      	bx	lr
 800a99e:	f803 1b01 	strb.w	r1, [r3], #1
 800a9a2:	e7f9      	b.n	800a998 <memset+0x4>

0800a9a4 <_close_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	4d06      	ldr	r5, [pc, #24]	@ (800a9c0 <_close_r+0x1c>)
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	4608      	mov	r0, r1
 800a9ae:	602b      	str	r3, [r5, #0]
 800a9b0:	f7f7 f9aa 	bl	8001d08 <_close>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d102      	bne.n	800a9be <_close_r+0x1a>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	b103      	cbz	r3, 800a9be <_close_r+0x1a>
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	20004c84 	.word	0x20004c84

0800a9c4 <_lseek_r>:
 800a9c4:	b538      	push	{r3, r4, r5, lr}
 800a9c6:	4d07      	ldr	r5, [pc, #28]	@ (800a9e4 <_lseek_r+0x20>)
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	4608      	mov	r0, r1
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	602a      	str	r2, [r5, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	f7f7 f9af 	bl	8001d36 <_lseek>
 800a9d8:	1c43      	adds	r3, r0, #1
 800a9da:	d102      	bne.n	800a9e2 <_lseek_r+0x1e>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	b103      	cbz	r3, 800a9e2 <_lseek_r+0x1e>
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	20004c84 	.word	0x20004c84

0800a9e8 <_read_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4d07      	ldr	r5, [pc, #28]	@ (800aa08 <_read_r+0x20>)
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	4608      	mov	r0, r1
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	602a      	str	r2, [r5, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f7f7 f9ae 	bl	8001d58 <_read>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_read_r+0x1e>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_read_r+0x1e>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	20004c84 	.word	0x20004c84

0800aa0c <_write_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	4d07      	ldr	r5, [pc, #28]	@ (800aa2c <_write_r+0x20>)
 800aa10:	4604      	mov	r4, r0
 800aa12:	4608      	mov	r0, r1
 800aa14:	4611      	mov	r1, r2
 800aa16:	2200      	movs	r2, #0
 800aa18:	602a      	str	r2, [r5, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f7f7 f948 	bl	8001cb0 <_write>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_write_r+0x1e>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_write_r+0x1e>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	20004c84 	.word	0x20004c84

0800aa30 <__errno>:
 800aa30:	4b01      	ldr	r3, [pc, #4]	@ (800aa38 <__errno+0x8>)
 800aa32:	6818      	ldr	r0, [r3, #0]
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	20002fac 	.word	0x20002fac

0800aa3c <__libc_init_array>:
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	4d0d      	ldr	r5, [pc, #52]	@ (800aa74 <__libc_init_array+0x38>)
 800aa40:	4c0d      	ldr	r4, [pc, #52]	@ (800aa78 <__libc_init_array+0x3c>)
 800aa42:	1b64      	subs	r4, r4, r5
 800aa44:	10a4      	asrs	r4, r4, #2
 800aa46:	2600      	movs	r6, #0
 800aa48:	42a6      	cmp	r6, r4
 800aa4a:	d109      	bne.n	800aa60 <__libc_init_array+0x24>
 800aa4c:	4d0b      	ldr	r5, [pc, #44]	@ (800aa7c <__libc_init_array+0x40>)
 800aa4e:	4c0c      	ldr	r4, [pc, #48]	@ (800aa80 <__libc_init_array+0x44>)
 800aa50:	f000 fd3a 	bl	800b4c8 <_init>
 800aa54:	1b64      	subs	r4, r4, r5
 800aa56:	10a4      	asrs	r4, r4, #2
 800aa58:	2600      	movs	r6, #0
 800aa5a:	42a6      	cmp	r6, r4
 800aa5c:	d105      	bne.n	800aa6a <__libc_init_array+0x2e>
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa64:	4798      	blx	r3
 800aa66:	3601      	adds	r6, #1
 800aa68:	e7ee      	b.n	800aa48 <__libc_init_array+0xc>
 800aa6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa6e:	4798      	blx	r3
 800aa70:	3601      	adds	r6, #1
 800aa72:	e7f2      	b.n	800aa5a <__libc_init_array+0x1e>
 800aa74:	0801d884 	.word	0x0801d884
 800aa78:	0801d884 	.word	0x0801d884
 800aa7c:	0801d884 	.word	0x0801d884
 800aa80:	0801d888 	.word	0x0801d888

0800aa84 <__retarget_lock_init_recursive>:
 800aa84:	4770      	bx	lr

0800aa86 <__retarget_lock_acquire_recursive>:
 800aa86:	4770      	bx	lr

0800aa88 <__retarget_lock_release_recursive>:
 800aa88:	4770      	bx	lr

0800aa8a <memcpy>:
 800aa8a:	440a      	add	r2, r1
 800aa8c:	4291      	cmp	r1, r2
 800aa8e:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa92:	d100      	bne.n	800aa96 <memcpy+0xc>
 800aa94:	4770      	bx	lr
 800aa96:	b510      	push	{r4, lr}
 800aa98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aaa0:	4291      	cmp	r1, r2
 800aaa2:	d1f9      	bne.n	800aa98 <memcpy+0xe>
 800aaa4:	bd10      	pop	{r4, pc}
	...

0800aaa8 <_free_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4605      	mov	r5, r0
 800aaac:	2900      	cmp	r1, #0
 800aaae:	d041      	beq.n	800ab34 <_free_r+0x8c>
 800aab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aab4:	1f0c      	subs	r4, r1, #4
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	bfb8      	it	lt
 800aaba:	18e4      	addlt	r4, r4, r3
 800aabc:	f000 f8e8 	bl	800ac90 <__malloc_lock>
 800aac0:	4a1d      	ldr	r2, [pc, #116]	@ (800ab38 <_free_r+0x90>)
 800aac2:	6813      	ldr	r3, [r2, #0]
 800aac4:	b933      	cbnz	r3, 800aad4 <_free_r+0x2c>
 800aac6:	6063      	str	r3, [r4, #4]
 800aac8:	6014      	str	r4, [r2, #0]
 800aaca:	4628      	mov	r0, r5
 800aacc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aad0:	f000 b8e4 	b.w	800ac9c <__malloc_unlock>
 800aad4:	42a3      	cmp	r3, r4
 800aad6:	d908      	bls.n	800aaea <_free_r+0x42>
 800aad8:	6820      	ldr	r0, [r4, #0]
 800aada:	1821      	adds	r1, r4, r0
 800aadc:	428b      	cmp	r3, r1
 800aade:	bf01      	itttt	eq
 800aae0:	6819      	ldreq	r1, [r3, #0]
 800aae2:	685b      	ldreq	r3, [r3, #4]
 800aae4:	1809      	addeq	r1, r1, r0
 800aae6:	6021      	streq	r1, [r4, #0]
 800aae8:	e7ed      	b.n	800aac6 <_free_r+0x1e>
 800aaea:	461a      	mov	r2, r3
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	b10b      	cbz	r3, 800aaf4 <_free_r+0x4c>
 800aaf0:	42a3      	cmp	r3, r4
 800aaf2:	d9fa      	bls.n	800aaea <_free_r+0x42>
 800aaf4:	6811      	ldr	r1, [r2, #0]
 800aaf6:	1850      	adds	r0, r2, r1
 800aaf8:	42a0      	cmp	r0, r4
 800aafa:	d10b      	bne.n	800ab14 <_free_r+0x6c>
 800aafc:	6820      	ldr	r0, [r4, #0]
 800aafe:	4401      	add	r1, r0
 800ab00:	1850      	adds	r0, r2, r1
 800ab02:	4283      	cmp	r3, r0
 800ab04:	6011      	str	r1, [r2, #0]
 800ab06:	d1e0      	bne.n	800aaca <_free_r+0x22>
 800ab08:	6818      	ldr	r0, [r3, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	6053      	str	r3, [r2, #4]
 800ab0e:	4408      	add	r0, r1
 800ab10:	6010      	str	r0, [r2, #0]
 800ab12:	e7da      	b.n	800aaca <_free_r+0x22>
 800ab14:	d902      	bls.n	800ab1c <_free_r+0x74>
 800ab16:	230c      	movs	r3, #12
 800ab18:	602b      	str	r3, [r5, #0]
 800ab1a:	e7d6      	b.n	800aaca <_free_r+0x22>
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	1821      	adds	r1, r4, r0
 800ab20:	428b      	cmp	r3, r1
 800ab22:	bf04      	itt	eq
 800ab24:	6819      	ldreq	r1, [r3, #0]
 800ab26:	685b      	ldreq	r3, [r3, #4]
 800ab28:	6063      	str	r3, [r4, #4]
 800ab2a:	bf04      	itt	eq
 800ab2c:	1809      	addeq	r1, r1, r0
 800ab2e:	6021      	streq	r1, [r4, #0]
 800ab30:	6054      	str	r4, [r2, #4]
 800ab32:	e7ca      	b.n	800aaca <_free_r+0x22>
 800ab34:	bd38      	pop	{r3, r4, r5, pc}
 800ab36:	bf00      	nop
 800ab38:	20004c90 	.word	0x20004c90

0800ab3c <malloc>:
 800ab3c:	4b02      	ldr	r3, [pc, #8]	@ (800ab48 <malloc+0xc>)
 800ab3e:	4601      	mov	r1, r0
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	f000 b825 	b.w	800ab90 <_malloc_r>
 800ab46:	bf00      	nop
 800ab48:	20002fac 	.word	0x20002fac

0800ab4c <sbrk_aligned>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	4e0f      	ldr	r6, [pc, #60]	@ (800ab8c <sbrk_aligned+0x40>)
 800ab50:	460c      	mov	r4, r1
 800ab52:	6831      	ldr	r1, [r6, #0]
 800ab54:	4605      	mov	r5, r0
 800ab56:	b911      	cbnz	r1, 800ab5e <sbrk_aligned+0x12>
 800ab58:	f000 fca6 	bl	800b4a8 <_sbrk_r>
 800ab5c:	6030      	str	r0, [r6, #0]
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4628      	mov	r0, r5
 800ab62:	f000 fca1 	bl	800b4a8 <_sbrk_r>
 800ab66:	1c43      	adds	r3, r0, #1
 800ab68:	d103      	bne.n	800ab72 <sbrk_aligned+0x26>
 800ab6a:	f04f 34ff 	mov.w	r4, #4294967295
 800ab6e:	4620      	mov	r0, r4
 800ab70:	bd70      	pop	{r4, r5, r6, pc}
 800ab72:	1cc4      	adds	r4, r0, #3
 800ab74:	f024 0403 	bic.w	r4, r4, #3
 800ab78:	42a0      	cmp	r0, r4
 800ab7a:	d0f8      	beq.n	800ab6e <sbrk_aligned+0x22>
 800ab7c:	1a21      	subs	r1, r4, r0
 800ab7e:	4628      	mov	r0, r5
 800ab80:	f000 fc92 	bl	800b4a8 <_sbrk_r>
 800ab84:	3001      	adds	r0, #1
 800ab86:	d1f2      	bne.n	800ab6e <sbrk_aligned+0x22>
 800ab88:	e7ef      	b.n	800ab6a <sbrk_aligned+0x1e>
 800ab8a:	bf00      	nop
 800ab8c:	20004c8c 	.word	0x20004c8c

0800ab90 <_malloc_r>:
 800ab90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab94:	1ccd      	adds	r5, r1, #3
 800ab96:	f025 0503 	bic.w	r5, r5, #3
 800ab9a:	3508      	adds	r5, #8
 800ab9c:	2d0c      	cmp	r5, #12
 800ab9e:	bf38      	it	cc
 800aba0:	250c      	movcc	r5, #12
 800aba2:	2d00      	cmp	r5, #0
 800aba4:	4606      	mov	r6, r0
 800aba6:	db01      	blt.n	800abac <_malloc_r+0x1c>
 800aba8:	42a9      	cmp	r1, r5
 800abaa:	d904      	bls.n	800abb6 <_malloc_r+0x26>
 800abac:	230c      	movs	r3, #12
 800abae:	6033      	str	r3, [r6, #0]
 800abb0:	2000      	movs	r0, #0
 800abb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac8c <_malloc_r+0xfc>
 800abba:	f000 f869 	bl	800ac90 <__malloc_lock>
 800abbe:	f8d8 3000 	ldr.w	r3, [r8]
 800abc2:	461c      	mov	r4, r3
 800abc4:	bb44      	cbnz	r4, 800ac18 <_malloc_r+0x88>
 800abc6:	4629      	mov	r1, r5
 800abc8:	4630      	mov	r0, r6
 800abca:	f7ff ffbf 	bl	800ab4c <sbrk_aligned>
 800abce:	1c43      	adds	r3, r0, #1
 800abd0:	4604      	mov	r4, r0
 800abd2:	d158      	bne.n	800ac86 <_malloc_r+0xf6>
 800abd4:	f8d8 4000 	ldr.w	r4, [r8]
 800abd8:	4627      	mov	r7, r4
 800abda:	2f00      	cmp	r7, #0
 800abdc:	d143      	bne.n	800ac66 <_malloc_r+0xd6>
 800abde:	2c00      	cmp	r4, #0
 800abe0:	d04b      	beq.n	800ac7a <_malloc_r+0xea>
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	4639      	mov	r1, r7
 800abe6:	4630      	mov	r0, r6
 800abe8:	eb04 0903 	add.w	r9, r4, r3
 800abec:	f000 fc5c 	bl	800b4a8 <_sbrk_r>
 800abf0:	4581      	cmp	r9, r0
 800abf2:	d142      	bne.n	800ac7a <_malloc_r+0xea>
 800abf4:	6821      	ldr	r1, [r4, #0]
 800abf6:	1a6d      	subs	r5, r5, r1
 800abf8:	4629      	mov	r1, r5
 800abfa:	4630      	mov	r0, r6
 800abfc:	f7ff ffa6 	bl	800ab4c <sbrk_aligned>
 800ac00:	3001      	adds	r0, #1
 800ac02:	d03a      	beq.n	800ac7a <_malloc_r+0xea>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	442b      	add	r3, r5
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ac0e:	685a      	ldr	r2, [r3, #4]
 800ac10:	bb62      	cbnz	r2, 800ac6c <_malloc_r+0xdc>
 800ac12:	f8c8 7000 	str.w	r7, [r8]
 800ac16:	e00f      	b.n	800ac38 <_malloc_r+0xa8>
 800ac18:	6822      	ldr	r2, [r4, #0]
 800ac1a:	1b52      	subs	r2, r2, r5
 800ac1c:	d420      	bmi.n	800ac60 <_malloc_r+0xd0>
 800ac1e:	2a0b      	cmp	r2, #11
 800ac20:	d917      	bls.n	800ac52 <_malloc_r+0xc2>
 800ac22:	1961      	adds	r1, r4, r5
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	6025      	str	r5, [r4, #0]
 800ac28:	bf18      	it	ne
 800ac2a:	6059      	strne	r1, [r3, #4]
 800ac2c:	6863      	ldr	r3, [r4, #4]
 800ac2e:	bf08      	it	eq
 800ac30:	f8c8 1000 	streq.w	r1, [r8]
 800ac34:	5162      	str	r2, [r4, r5]
 800ac36:	604b      	str	r3, [r1, #4]
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f000 f82f 	bl	800ac9c <__malloc_unlock>
 800ac3e:	f104 000b 	add.w	r0, r4, #11
 800ac42:	1d23      	adds	r3, r4, #4
 800ac44:	f020 0007 	bic.w	r0, r0, #7
 800ac48:	1ac2      	subs	r2, r0, r3
 800ac4a:	bf1c      	itt	ne
 800ac4c:	1a1b      	subne	r3, r3, r0
 800ac4e:	50a3      	strne	r3, [r4, r2]
 800ac50:	e7af      	b.n	800abb2 <_malloc_r+0x22>
 800ac52:	6862      	ldr	r2, [r4, #4]
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	bf0c      	ite	eq
 800ac58:	f8c8 2000 	streq.w	r2, [r8]
 800ac5c:	605a      	strne	r2, [r3, #4]
 800ac5e:	e7eb      	b.n	800ac38 <_malloc_r+0xa8>
 800ac60:	4623      	mov	r3, r4
 800ac62:	6864      	ldr	r4, [r4, #4]
 800ac64:	e7ae      	b.n	800abc4 <_malloc_r+0x34>
 800ac66:	463c      	mov	r4, r7
 800ac68:	687f      	ldr	r7, [r7, #4]
 800ac6a:	e7b6      	b.n	800abda <_malloc_r+0x4a>
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	42a3      	cmp	r3, r4
 800ac72:	d1fb      	bne.n	800ac6c <_malloc_r+0xdc>
 800ac74:	2300      	movs	r3, #0
 800ac76:	6053      	str	r3, [r2, #4]
 800ac78:	e7de      	b.n	800ac38 <_malloc_r+0xa8>
 800ac7a:	230c      	movs	r3, #12
 800ac7c:	6033      	str	r3, [r6, #0]
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f000 f80c 	bl	800ac9c <__malloc_unlock>
 800ac84:	e794      	b.n	800abb0 <_malloc_r+0x20>
 800ac86:	6005      	str	r5, [r0, #0]
 800ac88:	e7d6      	b.n	800ac38 <_malloc_r+0xa8>
 800ac8a:	bf00      	nop
 800ac8c:	20004c90 	.word	0x20004c90

0800ac90 <__malloc_lock>:
 800ac90:	4801      	ldr	r0, [pc, #4]	@ (800ac98 <__malloc_lock+0x8>)
 800ac92:	f7ff bef8 	b.w	800aa86 <__retarget_lock_acquire_recursive>
 800ac96:	bf00      	nop
 800ac98:	20004c88 	.word	0x20004c88

0800ac9c <__malloc_unlock>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	@ (800aca4 <__malloc_unlock+0x8>)
 800ac9e:	f7ff bef3 	b.w	800aa88 <__retarget_lock_release_recursive>
 800aca2:	bf00      	nop
 800aca4:	20004c88 	.word	0x20004c88

0800aca8 <__sfputc_r>:
 800aca8:	6893      	ldr	r3, [r2, #8]
 800acaa:	3b01      	subs	r3, #1
 800acac:	2b00      	cmp	r3, #0
 800acae:	b410      	push	{r4}
 800acb0:	6093      	str	r3, [r2, #8]
 800acb2:	da08      	bge.n	800acc6 <__sfputc_r+0x1e>
 800acb4:	6994      	ldr	r4, [r2, #24]
 800acb6:	42a3      	cmp	r3, r4
 800acb8:	db01      	blt.n	800acbe <__sfputc_r+0x16>
 800acba:	290a      	cmp	r1, #10
 800acbc:	d103      	bne.n	800acc6 <__sfputc_r+0x1e>
 800acbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acc2:	f7ff bdd2 	b.w	800a86a <__swbuf_r>
 800acc6:	6813      	ldr	r3, [r2, #0]
 800acc8:	1c58      	adds	r0, r3, #1
 800acca:	6010      	str	r0, [r2, #0]
 800accc:	7019      	strb	r1, [r3, #0]
 800acce:	4608      	mov	r0, r1
 800acd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <__sfputs_r>:
 800acd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	4614      	mov	r4, r2
 800acde:	18d5      	adds	r5, r2, r3
 800ace0:	42ac      	cmp	r4, r5
 800ace2:	d101      	bne.n	800ace8 <__sfputs_r+0x12>
 800ace4:	2000      	movs	r0, #0
 800ace6:	e007      	b.n	800acf8 <__sfputs_r+0x22>
 800ace8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acec:	463a      	mov	r2, r7
 800acee:	4630      	mov	r0, r6
 800acf0:	f7ff ffda 	bl	800aca8 <__sfputc_r>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d1f3      	bne.n	800ace0 <__sfputs_r+0xa>
 800acf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acfc <_vfiprintf_r>:
 800acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	460d      	mov	r5, r1
 800ad02:	b09d      	sub	sp, #116	@ 0x74
 800ad04:	4614      	mov	r4, r2
 800ad06:	4698      	mov	r8, r3
 800ad08:	4606      	mov	r6, r0
 800ad0a:	b118      	cbz	r0, 800ad14 <_vfiprintf_r+0x18>
 800ad0c:	6a03      	ldr	r3, [r0, #32]
 800ad0e:	b90b      	cbnz	r3, 800ad14 <_vfiprintf_r+0x18>
 800ad10:	f7ff fc0e 	bl	800a530 <__sinit>
 800ad14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad16:	07d9      	lsls	r1, r3, #31
 800ad18:	d405      	bmi.n	800ad26 <_vfiprintf_r+0x2a>
 800ad1a:	89ab      	ldrh	r3, [r5, #12]
 800ad1c:	059a      	lsls	r2, r3, #22
 800ad1e:	d402      	bmi.n	800ad26 <_vfiprintf_r+0x2a>
 800ad20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad22:	f7ff feb0 	bl	800aa86 <__retarget_lock_acquire_recursive>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	071b      	lsls	r3, r3, #28
 800ad2a:	d501      	bpl.n	800ad30 <_vfiprintf_r+0x34>
 800ad2c:	692b      	ldr	r3, [r5, #16]
 800ad2e:	b99b      	cbnz	r3, 800ad58 <_vfiprintf_r+0x5c>
 800ad30:	4629      	mov	r1, r5
 800ad32:	4630      	mov	r0, r6
 800ad34:	f7ff fdd8 	bl	800a8e8 <__swsetup_r>
 800ad38:	b170      	cbz	r0, 800ad58 <_vfiprintf_r+0x5c>
 800ad3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad3c:	07dc      	lsls	r4, r3, #31
 800ad3e:	d504      	bpl.n	800ad4a <_vfiprintf_r+0x4e>
 800ad40:	f04f 30ff 	mov.w	r0, #4294967295
 800ad44:	b01d      	add	sp, #116	@ 0x74
 800ad46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad4a:	89ab      	ldrh	r3, [r5, #12]
 800ad4c:	0598      	lsls	r0, r3, #22
 800ad4e:	d4f7      	bmi.n	800ad40 <_vfiprintf_r+0x44>
 800ad50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad52:	f7ff fe99 	bl	800aa88 <__retarget_lock_release_recursive>
 800ad56:	e7f3      	b.n	800ad40 <_vfiprintf_r+0x44>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad5c:	2320      	movs	r3, #32
 800ad5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad66:	2330      	movs	r3, #48	@ 0x30
 800ad68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af18 <_vfiprintf_r+0x21c>
 800ad6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad70:	f04f 0901 	mov.w	r9, #1
 800ad74:	4623      	mov	r3, r4
 800ad76:	469a      	mov	sl, r3
 800ad78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad7c:	b10a      	cbz	r2, 800ad82 <_vfiprintf_r+0x86>
 800ad7e:	2a25      	cmp	r2, #37	@ 0x25
 800ad80:	d1f9      	bne.n	800ad76 <_vfiprintf_r+0x7a>
 800ad82:	ebba 0b04 	subs.w	fp, sl, r4
 800ad86:	d00b      	beq.n	800ada0 <_vfiprintf_r+0xa4>
 800ad88:	465b      	mov	r3, fp
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ffa1 	bl	800acd6 <__sfputs_r>
 800ad94:	3001      	adds	r0, #1
 800ad96:	f000 80a7 	beq.w	800aee8 <_vfiprintf_r+0x1ec>
 800ad9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad9c:	445a      	add	r2, fp
 800ad9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ada0:	f89a 3000 	ldrb.w	r3, [sl]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f000 809f 	beq.w	800aee8 <_vfiprintf_r+0x1ec>
 800adaa:	2300      	movs	r3, #0
 800adac:	f04f 32ff 	mov.w	r2, #4294967295
 800adb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adb4:	f10a 0a01 	add.w	sl, sl, #1
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	9307      	str	r3, [sp, #28]
 800adbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800adc2:	4654      	mov	r4, sl
 800adc4:	2205      	movs	r2, #5
 800adc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adca:	4853      	ldr	r0, [pc, #332]	@ (800af18 <_vfiprintf_r+0x21c>)
 800adcc:	f7f5 fa10 	bl	80001f0 <memchr>
 800add0:	9a04      	ldr	r2, [sp, #16]
 800add2:	b9d8      	cbnz	r0, 800ae0c <_vfiprintf_r+0x110>
 800add4:	06d1      	lsls	r1, r2, #27
 800add6:	bf44      	itt	mi
 800add8:	2320      	movmi	r3, #32
 800adda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adde:	0713      	lsls	r3, r2, #28
 800ade0:	bf44      	itt	mi
 800ade2:	232b      	movmi	r3, #43	@ 0x2b
 800ade4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ade8:	f89a 3000 	ldrb.w	r3, [sl]
 800adec:	2b2a      	cmp	r3, #42	@ 0x2a
 800adee:	d015      	beq.n	800ae1c <_vfiprintf_r+0x120>
 800adf0:	9a07      	ldr	r2, [sp, #28]
 800adf2:	4654      	mov	r4, sl
 800adf4:	2000      	movs	r0, #0
 800adf6:	f04f 0c0a 	mov.w	ip, #10
 800adfa:	4621      	mov	r1, r4
 800adfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae00:	3b30      	subs	r3, #48	@ 0x30
 800ae02:	2b09      	cmp	r3, #9
 800ae04:	d94b      	bls.n	800ae9e <_vfiprintf_r+0x1a2>
 800ae06:	b1b0      	cbz	r0, 800ae36 <_vfiprintf_r+0x13a>
 800ae08:	9207      	str	r2, [sp, #28]
 800ae0a:	e014      	b.n	800ae36 <_vfiprintf_r+0x13a>
 800ae0c:	eba0 0308 	sub.w	r3, r0, r8
 800ae10:	fa09 f303 	lsl.w	r3, r9, r3
 800ae14:	4313      	orrs	r3, r2
 800ae16:	9304      	str	r3, [sp, #16]
 800ae18:	46a2      	mov	sl, r4
 800ae1a:	e7d2      	b.n	800adc2 <_vfiprintf_r+0xc6>
 800ae1c:	9b03      	ldr	r3, [sp, #12]
 800ae1e:	1d19      	adds	r1, r3, #4
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	9103      	str	r1, [sp, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	bfbb      	ittet	lt
 800ae28:	425b      	neglt	r3, r3
 800ae2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae2e:	9307      	strge	r3, [sp, #28]
 800ae30:	9307      	strlt	r3, [sp, #28]
 800ae32:	bfb8      	it	lt
 800ae34:	9204      	strlt	r2, [sp, #16]
 800ae36:	7823      	ldrb	r3, [r4, #0]
 800ae38:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae3a:	d10a      	bne.n	800ae52 <_vfiprintf_r+0x156>
 800ae3c:	7863      	ldrb	r3, [r4, #1]
 800ae3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae40:	d132      	bne.n	800aea8 <_vfiprintf_r+0x1ac>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	1d1a      	adds	r2, r3, #4
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	9203      	str	r2, [sp, #12]
 800ae4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae4e:	3402      	adds	r4, #2
 800ae50:	9305      	str	r3, [sp, #20]
 800ae52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af28 <_vfiprintf_r+0x22c>
 800ae56:	7821      	ldrb	r1, [r4, #0]
 800ae58:	2203      	movs	r2, #3
 800ae5a:	4650      	mov	r0, sl
 800ae5c:	f7f5 f9c8 	bl	80001f0 <memchr>
 800ae60:	b138      	cbz	r0, 800ae72 <_vfiprintf_r+0x176>
 800ae62:	9b04      	ldr	r3, [sp, #16]
 800ae64:	eba0 000a 	sub.w	r0, r0, sl
 800ae68:	2240      	movs	r2, #64	@ 0x40
 800ae6a:	4082      	lsls	r2, r0
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	3401      	adds	r4, #1
 800ae70:	9304      	str	r3, [sp, #16]
 800ae72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae76:	4829      	ldr	r0, [pc, #164]	@ (800af1c <_vfiprintf_r+0x220>)
 800ae78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae7c:	2206      	movs	r2, #6
 800ae7e:	f7f5 f9b7 	bl	80001f0 <memchr>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d03f      	beq.n	800af06 <_vfiprintf_r+0x20a>
 800ae86:	4b26      	ldr	r3, [pc, #152]	@ (800af20 <_vfiprintf_r+0x224>)
 800ae88:	bb1b      	cbnz	r3, 800aed2 <_vfiprintf_r+0x1d6>
 800ae8a:	9b03      	ldr	r3, [sp, #12]
 800ae8c:	3307      	adds	r3, #7
 800ae8e:	f023 0307 	bic.w	r3, r3, #7
 800ae92:	3308      	adds	r3, #8
 800ae94:	9303      	str	r3, [sp, #12]
 800ae96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae98:	443b      	add	r3, r7
 800ae9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae9c:	e76a      	b.n	800ad74 <_vfiprintf_r+0x78>
 800ae9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aea2:	460c      	mov	r4, r1
 800aea4:	2001      	movs	r0, #1
 800aea6:	e7a8      	b.n	800adfa <_vfiprintf_r+0xfe>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	3401      	adds	r4, #1
 800aeac:	9305      	str	r3, [sp, #20]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	f04f 0c0a 	mov.w	ip, #10
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeba:	3a30      	subs	r2, #48	@ 0x30
 800aebc:	2a09      	cmp	r2, #9
 800aebe:	d903      	bls.n	800aec8 <_vfiprintf_r+0x1cc>
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d0c6      	beq.n	800ae52 <_vfiprintf_r+0x156>
 800aec4:	9105      	str	r1, [sp, #20]
 800aec6:	e7c4      	b.n	800ae52 <_vfiprintf_r+0x156>
 800aec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aecc:	4604      	mov	r4, r0
 800aece:	2301      	movs	r3, #1
 800aed0:	e7f0      	b.n	800aeb4 <_vfiprintf_r+0x1b8>
 800aed2:	ab03      	add	r3, sp, #12
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	462a      	mov	r2, r5
 800aed8:	4b12      	ldr	r3, [pc, #72]	@ (800af24 <_vfiprintf_r+0x228>)
 800aeda:	a904      	add	r1, sp, #16
 800aedc:	4630      	mov	r0, r6
 800aede:	f3af 8000 	nop.w
 800aee2:	4607      	mov	r7, r0
 800aee4:	1c78      	adds	r0, r7, #1
 800aee6:	d1d6      	bne.n	800ae96 <_vfiprintf_r+0x19a>
 800aee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aeea:	07d9      	lsls	r1, r3, #31
 800aeec:	d405      	bmi.n	800aefa <_vfiprintf_r+0x1fe>
 800aeee:	89ab      	ldrh	r3, [r5, #12]
 800aef0:	059a      	lsls	r2, r3, #22
 800aef2:	d402      	bmi.n	800aefa <_vfiprintf_r+0x1fe>
 800aef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aef6:	f7ff fdc7 	bl	800aa88 <__retarget_lock_release_recursive>
 800aefa:	89ab      	ldrh	r3, [r5, #12]
 800aefc:	065b      	lsls	r3, r3, #25
 800aefe:	f53f af1f 	bmi.w	800ad40 <_vfiprintf_r+0x44>
 800af02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af04:	e71e      	b.n	800ad44 <_vfiprintf_r+0x48>
 800af06:	ab03      	add	r3, sp, #12
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	462a      	mov	r2, r5
 800af0c:	4b05      	ldr	r3, [pc, #20]	@ (800af24 <_vfiprintf_r+0x228>)
 800af0e:	a904      	add	r1, sp, #16
 800af10:	4630      	mov	r0, r6
 800af12:	f000 f879 	bl	800b008 <_printf_i>
 800af16:	e7e4      	b.n	800aee2 <_vfiprintf_r+0x1e6>
 800af18:	0801d848 	.word	0x0801d848
 800af1c:	0801d852 	.word	0x0801d852
 800af20:	00000000 	.word	0x00000000
 800af24:	0800acd7 	.word	0x0800acd7
 800af28:	0801d84e 	.word	0x0801d84e

0800af2c <_printf_common>:
 800af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af30:	4616      	mov	r6, r2
 800af32:	4698      	mov	r8, r3
 800af34:	688a      	ldr	r2, [r1, #8]
 800af36:	690b      	ldr	r3, [r1, #16]
 800af38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af3c:	4293      	cmp	r3, r2
 800af3e:	bfb8      	it	lt
 800af40:	4613      	movlt	r3, r2
 800af42:	6033      	str	r3, [r6, #0]
 800af44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af48:	4607      	mov	r7, r0
 800af4a:	460c      	mov	r4, r1
 800af4c:	b10a      	cbz	r2, 800af52 <_printf_common+0x26>
 800af4e:	3301      	adds	r3, #1
 800af50:	6033      	str	r3, [r6, #0]
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	0699      	lsls	r1, r3, #26
 800af56:	bf42      	ittt	mi
 800af58:	6833      	ldrmi	r3, [r6, #0]
 800af5a:	3302      	addmi	r3, #2
 800af5c:	6033      	strmi	r3, [r6, #0]
 800af5e:	6825      	ldr	r5, [r4, #0]
 800af60:	f015 0506 	ands.w	r5, r5, #6
 800af64:	d106      	bne.n	800af74 <_printf_common+0x48>
 800af66:	f104 0a19 	add.w	sl, r4, #25
 800af6a:	68e3      	ldr	r3, [r4, #12]
 800af6c:	6832      	ldr	r2, [r6, #0]
 800af6e:	1a9b      	subs	r3, r3, r2
 800af70:	42ab      	cmp	r3, r5
 800af72:	dc26      	bgt.n	800afc2 <_printf_common+0x96>
 800af74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af78:	6822      	ldr	r2, [r4, #0]
 800af7a:	3b00      	subs	r3, #0
 800af7c:	bf18      	it	ne
 800af7e:	2301      	movne	r3, #1
 800af80:	0692      	lsls	r2, r2, #26
 800af82:	d42b      	bmi.n	800afdc <_printf_common+0xb0>
 800af84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af88:	4641      	mov	r1, r8
 800af8a:	4638      	mov	r0, r7
 800af8c:	47c8      	blx	r9
 800af8e:	3001      	adds	r0, #1
 800af90:	d01e      	beq.n	800afd0 <_printf_common+0xa4>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	6922      	ldr	r2, [r4, #16]
 800af96:	f003 0306 	and.w	r3, r3, #6
 800af9a:	2b04      	cmp	r3, #4
 800af9c:	bf02      	ittt	eq
 800af9e:	68e5      	ldreq	r5, [r4, #12]
 800afa0:	6833      	ldreq	r3, [r6, #0]
 800afa2:	1aed      	subeq	r5, r5, r3
 800afa4:	68a3      	ldr	r3, [r4, #8]
 800afa6:	bf0c      	ite	eq
 800afa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afac:	2500      	movne	r5, #0
 800afae:	4293      	cmp	r3, r2
 800afb0:	bfc4      	itt	gt
 800afb2:	1a9b      	subgt	r3, r3, r2
 800afb4:	18ed      	addgt	r5, r5, r3
 800afb6:	2600      	movs	r6, #0
 800afb8:	341a      	adds	r4, #26
 800afba:	42b5      	cmp	r5, r6
 800afbc:	d11a      	bne.n	800aff4 <_printf_common+0xc8>
 800afbe:	2000      	movs	r0, #0
 800afc0:	e008      	b.n	800afd4 <_printf_common+0xa8>
 800afc2:	2301      	movs	r3, #1
 800afc4:	4652      	mov	r2, sl
 800afc6:	4641      	mov	r1, r8
 800afc8:	4638      	mov	r0, r7
 800afca:	47c8      	blx	r9
 800afcc:	3001      	adds	r0, #1
 800afce:	d103      	bne.n	800afd8 <_printf_common+0xac>
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295
 800afd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd8:	3501      	adds	r5, #1
 800afda:	e7c6      	b.n	800af6a <_printf_common+0x3e>
 800afdc:	18e1      	adds	r1, r4, r3
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	2030      	movs	r0, #48	@ 0x30
 800afe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800afe6:	4422      	add	r2, r4
 800afe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800afec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aff0:	3302      	adds	r3, #2
 800aff2:	e7c7      	b.n	800af84 <_printf_common+0x58>
 800aff4:	2301      	movs	r3, #1
 800aff6:	4622      	mov	r2, r4
 800aff8:	4641      	mov	r1, r8
 800affa:	4638      	mov	r0, r7
 800affc:	47c8      	blx	r9
 800affe:	3001      	adds	r0, #1
 800b000:	d0e6      	beq.n	800afd0 <_printf_common+0xa4>
 800b002:	3601      	adds	r6, #1
 800b004:	e7d9      	b.n	800afba <_printf_common+0x8e>
	...

0800b008 <_printf_i>:
 800b008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b00c:	7e0f      	ldrb	r7, [r1, #24]
 800b00e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b010:	2f78      	cmp	r7, #120	@ 0x78
 800b012:	4691      	mov	r9, r2
 800b014:	4680      	mov	r8, r0
 800b016:	460c      	mov	r4, r1
 800b018:	469a      	mov	sl, r3
 800b01a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b01e:	d807      	bhi.n	800b030 <_printf_i+0x28>
 800b020:	2f62      	cmp	r7, #98	@ 0x62
 800b022:	d80a      	bhi.n	800b03a <_printf_i+0x32>
 800b024:	2f00      	cmp	r7, #0
 800b026:	f000 80d2 	beq.w	800b1ce <_printf_i+0x1c6>
 800b02a:	2f58      	cmp	r7, #88	@ 0x58
 800b02c:	f000 80b9 	beq.w	800b1a2 <_printf_i+0x19a>
 800b030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b038:	e03a      	b.n	800b0b0 <_printf_i+0xa8>
 800b03a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b03e:	2b15      	cmp	r3, #21
 800b040:	d8f6      	bhi.n	800b030 <_printf_i+0x28>
 800b042:	a101      	add	r1, pc, #4	@ (adr r1, 800b048 <_printf_i+0x40>)
 800b044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b048:	0800b0a1 	.word	0x0800b0a1
 800b04c:	0800b0b5 	.word	0x0800b0b5
 800b050:	0800b031 	.word	0x0800b031
 800b054:	0800b031 	.word	0x0800b031
 800b058:	0800b031 	.word	0x0800b031
 800b05c:	0800b031 	.word	0x0800b031
 800b060:	0800b0b5 	.word	0x0800b0b5
 800b064:	0800b031 	.word	0x0800b031
 800b068:	0800b031 	.word	0x0800b031
 800b06c:	0800b031 	.word	0x0800b031
 800b070:	0800b031 	.word	0x0800b031
 800b074:	0800b1b5 	.word	0x0800b1b5
 800b078:	0800b0df 	.word	0x0800b0df
 800b07c:	0800b16f 	.word	0x0800b16f
 800b080:	0800b031 	.word	0x0800b031
 800b084:	0800b031 	.word	0x0800b031
 800b088:	0800b1d7 	.word	0x0800b1d7
 800b08c:	0800b031 	.word	0x0800b031
 800b090:	0800b0df 	.word	0x0800b0df
 800b094:	0800b031 	.word	0x0800b031
 800b098:	0800b031 	.word	0x0800b031
 800b09c:	0800b177 	.word	0x0800b177
 800b0a0:	6833      	ldr	r3, [r6, #0]
 800b0a2:	1d1a      	adds	r2, r3, #4
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6032      	str	r2, [r6, #0]
 800b0a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e09d      	b.n	800b1f0 <_printf_i+0x1e8>
 800b0b4:	6833      	ldr	r3, [r6, #0]
 800b0b6:	6820      	ldr	r0, [r4, #0]
 800b0b8:	1d19      	adds	r1, r3, #4
 800b0ba:	6031      	str	r1, [r6, #0]
 800b0bc:	0606      	lsls	r6, r0, #24
 800b0be:	d501      	bpl.n	800b0c4 <_printf_i+0xbc>
 800b0c0:	681d      	ldr	r5, [r3, #0]
 800b0c2:	e003      	b.n	800b0cc <_printf_i+0xc4>
 800b0c4:	0645      	lsls	r5, r0, #25
 800b0c6:	d5fb      	bpl.n	800b0c0 <_printf_i+0xb8>
 800b0c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	da03      	bge.n	800b0d8 <_printf_i+0xd0>
 800b0d0:	232d      	movs	r3, #45	@ 0x2d
 800b0d2:	426d      	negs	r5, r5
 800b0d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0d8:	4859      	ldr	r0, [pc, #356]	@ (800b240 <_printf_i+0x238>)
 800b0da:	230a      	movs	r3, #10
 800b0dc:	e011      	b.n	800b102 <_printf_i+0xfa>
 800b0de:	6821      	ldr	r1, [r4, #0]
 800b0e0:	6833      	ldr	r3, [r6, #0]
 800b0e2:	0608      	lsls	r0, r1, #24
 800b0e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0e8:	d402      	bmi.n	800b0f0 <_printf_i+0xe8>
 800b0ea:	0649      	lsls	r1, r1, #25
 800b0ec:	bf48      	it	mi
 800b0ee:	b2ad      	uxthmi	r5, r5
 800b0f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0f2:	4853      	ldr	r0, [pc, #332]	@ (800b240 <_printf_i+0x238>)
 800b0f4:	6033      	str	r3, [r6, #0]
 800b0f6:	bf14      	ite	ne
 800b0f8:	230a      	movne	r3, #10
 800b0fa:	2308      	moveq	r3, #8
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b102:	6866      	ldr	r6, [r4, #4]
 800b104:	60a6      	str	r6, [r4, #8]
 800b106:	2e00      	cmp	r6, #0
 800b108:	bfa2      	ittt	ge
 800b10a:	6821      	ldrge	r1, [r4, #0]
 800b10c:	f021 0104 	bicge.w	r1, r1, #4
 800b110:	6021      	strge	r1, [r4, #0]
 800b112:	b90d      	cbnz	r5, 800b118 <_printf_i+0x110>
 800b114:	2e00      	cmp	r6, #0
 800b116:	d04b      	beq.n	800b1b0 <_printf_i+0x1a8>
 800b118:	4616      	mov	r6, r2
 800b11a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b11e:	fb03 5711 	mls	r7, r3, r1, r5
 800b122:	5dc7      	ldrb	r7, [r0, r7]
 800b124:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b128:	462f      	mov	r7, r5
 800b12a:	42bb      	cmp	r3, r7
 800b12c:	460d      	mov	r5, r1
 800b12e:	d9f4      	bls.n	800b11a <_printf_i+0x112>
 800b130:	2b08      	cmp	r3, #8
 800b132:	d10b      	bne.n	800b14c <_printf_i+0x144>
 800b134:	6823      	ldr	r3, [r4, #0]
 800b136:	07df      	lsls	r7, r3, #31
 800b138:	d508      	bpl.n	800b14c <_printf_i+0x144>
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	6861      	ldr	r1, [r4, #4]
 800b13e:	4299      	cmp	r1, r3
 800b140:	bfde      	ittt	le
 800b142:	2330      	movle	r3, #48	@ 0x30
 800b144:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b148:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b14c:	1b92      	subs	r2, r2, r6
 800b14e:	6122      	str	r2, [r4, #16]
 800b150:	f8cd a000 	str.w	sl, [sp]
 800b154:	464b      	mov	r3, r9
 800b156:	aa03      	add	r2, sp, #12
 800b158:	4621      	mov	r1, r4
 800b15a:	4640      	mov	r0, r8
 800b15c:	f7ff fee6 	bl	800af2c <_printf_common>
 800b160:	3001      	adds	r0, #1
 800b162:	d14a      	bne.n	800b1fa <_printf_i+0x1f2>
 800b164:	f04f 30ff 	mov.w	r0, #4294967295
 800b168:	b004      	add	sp, #16
 800b16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16e:	6823      	ldr	r3, [r4, #0]
 800b170:	f043 0320 	orr.w	r3, r3, #32
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	4833      	ldr	r0, [pc, #204]	@ (800b244 <_printf_i+0x23c>)
 800b178:	2778      	movs	r7, #120	@ 0x78
 800b17a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	6831      	ldr	r1, [r6, #0]
 800b182:	061f      	lsls	r7, r3, #24
 800b184:	f851 5b04 	ldr.w	r5, [r1], #4
 800b188:	d402      	bmi.n	800b190 <_printf_i+0x188>
 800b18a:	065f      	lsls	r7, r3, #25
 800b18c:	bf48      	it	mi
 800b18e:	b2ad      	uxthmi	r5, r5
 800b190:	6031      	str	r1, [r6, #0]
 800b192:	07d9      	lsls	r1, r3, #31
 800b194:	bf44      	itt	mi
 800b196:	f043 0320 	orrmi.w	r3, r3, #32
 800b19a:	6023      	strmi	r3, [r4, #0]
 800b19c:	b11d      	cbz	r5, 800b1a6 <_printf_i+0x19e>
 800b19e:	2310      	movs	r3, #16
 800b1a0:	e7ac      	b.n	800b0fc <_printf_i+0xf4>
 800b1a2:	4827      	ldr	r0, [pc, #156]	@ (800b240 <_printf_i+0x238>)
 800b1a4:	e7e9      	b.n	800b17a <_printf_i+0x172>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	f023 0320 	bic.w	r3, r3, #32
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	e7f6      	b.n	800b19e <_printf_i+0x196>
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	e7bd      	b.n	800b130 <_printf_i+0x128>
 800b1b4:	6833      	ldr	r3, [r6, #0]
 800b1b6:	6825      	ldr	r5, [r4, #0]
 800b1b8:	6961      	ldr	r1, [r4, #20]
 800b1ba:	1d18      	adds	r0, r3, #4
 800b1bc:	6030      	str	r0, [r6, #0]
 800b1be:	062e      	lsls	r6, r5, #24
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	d501      	bpl.n	800b1c8 <_printf_i+0x1c0>
 800b1c4:	6019      	str	r1, [r3, #0]
 800b1c6:	e002      	b.n	800b1ce <_printf_i+0x1c6>
 800b1c8:	0668      	lsls	r0, r5, #25
 800b1ca:	d5fb      	bpl.n	800b1c4 <_printf_i+0x1bc>
 800b1cc:	8019      	strh	r1, [r3, #0]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	6123      	str	r3, [r4, #16]
 800b1d2:	4616      	mov	r6, r2
 800b1d4:	e7bc      	b.n	800b150 <_printf_i+0x148>
 800b1d6:	6833      	ldr	r3, [r6, #0]
 800b1d8:	1d1a      	adds	r2, r3, #4
 800b1da:	6032      	str	r2, [r6, #0]
 800b1dc:	681e      	ldr	r6, [r3, #0]
 800b1de:	6862      	ldr	r2, [r4, #4]
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	f7f5 f804 	bl	80001f0 <memchr>
 800b1e8:	b108      	cbz	r0, 800b1ee <_printf_i+0x1e6>
 800b1ea:	1b80      	subs	r0, r0, r6
 800b1ec:	6060      	str	r0, [r4, #4]
 800b1ee:	6863      	ldr	r3, [r4, #4]
 800b1f0:	6123      	str	r3, [r4, #16]
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1f8:	e7aa      	b.n	800b150 <_printf_i+0x148>
 800b1fa:	6923      	ldr	r3, [r4, #16]
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	4649      	mov	r1, r9
 800b200:	4640      	mov	r0, r8
 800b202:	47d0      	blx	sl
 800b204:	3001      	adds	r0, #1
 800b206:	d0ad      	beq.n	800b164 <_printf_i+0x15c>
 800b208:	6823      	ldr	r3, [r4, #0]
 800b20a:	079b      	lsls	r3, r3, #30
 800b20c:	d413      	bmi.n	800b236 <_printf_i+0x22e>
 800b20e:	68e0      	ldr	r0, [r4, #12]
 800b210:	9b03      	ldr	r3, [sp, #12]
 800b212:	4298      	cmp	r0, r3
 800b214:	bfb8      	it	lt
 800b216:	4618      	movlt	r0, r3
 800b218:	e7a6      	b.n	800b168 <_printf_i+0x160>
 800b21a:	2301      	movs	r3, #1
 800b21c:	4632      	mov	r2, r6
 800b21e:	4649      	mov	r1, r9
 800b220:	4640      	mov	r0, r8
 800b222:	47d0      	blx	sl
 800b224:	3001      	adds	r0, #1
 800b226:	d09d      	beq.n	800b164 <_printf_i+0x15c>
 800b228:	3501      	adds	r5, #1
 800b22a:	68e3      	ldr	r3, [r4, #12]
 800b22c:	9903      	ldr	r1, [sp, #12]
 800b22e:	1a5b      	subs	r3, r3, r1
 800b230:	42ab      	cmp	r3, r5
 800b232:	dcf2      	bgt.n	800b21a <_printf_i+0x212>
 800b234:	e7eb      	b.n	800b20e <_printf_i+0x206>
 800b236:	2500      	movs	r5, #0
 800b238:	f104 0619 	add.w	r6, r4, #25
 800b23c:	e7f5      	b.n	800b22a <_printf_i+0x222>
 800b23e:	bf00      	nop
 800b240:	0801d859 	.word	0x0801d859
 800b244:	0801d86a 	.word	0x0801d86a

0800b248 <__sflush_r>:
 800b248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b250:	0716      	lsls	r6, r2, #28
 800b252:	4605      	mov	r5, r0
 800b254:	460c      	mov	r4, r1
 800b256:	d454      	bmi.n	800b302 <__sflush_r+0xba>
 800b258:	684b      	ldr	r3, [r1, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dc02      	bgt.n	800b264 <__sflush_r+0x1c>
 800b25e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b260:	2b00      	cmp	r3, #0
 800b262:	dd48      	ble.n	800b2f6 <__sflush_r+0xae>
 800b264:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b266:	2e00      	cmp	r6, #0
 800b268:	d045      	beq.n	800b2f6 <__sflush_r+0xae>
 800b26a:	2300      	movs	r3, #0
 800b26c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b270:	682f      	ldr	r7, [r5, #0]
 800b272:	6a21      	ldr	r1, [r4, #32]
 800b274:	602b      	str	r3, [r5, #0]
 800b276:	d030      	beq.n	800b2da <__sflush_r+0x92>
 800b278:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	0759      	lsls	r1, r3, #29
 800b27e:	d505      	bpl.n	800b28c <__sflush_r+0x44>
 800b280:	6863      	ldr	r3, [r4, #4]
 800b282:	1ad2      	subs	r2, r2, r3
 800b284:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b286:	b10b      	cbz	r3, 800b28c <__sflush_r+0x44>
 800b288:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b28a:	1ad2      	subs	r2, r2, r3
 800b28c:	2300      	movs	r3, #0
 800b28e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b290:	6a21      	ldr	r1, [r4, #32]
 800b292:	4628      	mov	r0, r5
 800b294:	47b0      	blx	r6
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	89a3      	ldrh	r3, [r4, #12]
 800b29a:	d106      	bne.n	800b2aa <__sflush_r+0x62>
 800b29c:	6829      	ldr	r1, [r5, #0]
 800b29e:	291d      	cmp	r1, #29
 800b2a0:	d82b      	bhi.n	800b2fa <__sflush_r+0xb2>
 800b2a2:	4a2a      	ldr	r2, [pc, #168]	@ (800b34c <__sflush_r+0x104>)
 800b2a4:	410a      	asrs	r2, r1
 800b2a6:	07d6      	lsls	r6, r2, #31
 800b2a8:	d427      	bmi.n	800b2fa <__sflush_r+0xb2>
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	6062      	str	r2, [r4, #4]
 800b2ae:	04d9      	lsls	r1, r3, #19
 800b2b0:	6922      	ldr	r2, [r4, #16]
 800b2b2:	6022      	str	r2, [r4, #0]
 800b2b4:	d504      	bpl.n	800b2c0 <__sflush_r+0x78>
 800b2b6:	1c42      	adds	r2, r0, #1
 800b2b8:	d101      	bne.n	800b2be <__sflush_r+0x76>
 800b2ba:	682b      	ldr	r3, [r5, #0]
 800b2bc:	b903      	cbnz	r3, 800b2c0 <__sflush_r+0x78>
 800b2be:	6560      	str	r0, [r4, #84]	@ 0x54
 800b2c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2c2:	602f      	str	r7, [r5, #0]
 800b2c4:	b1b9      	cbz	r1, 800b2f6 <__sflush_r+0xae>
 800b2c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2ca:	4299      	cmp	r1, r3
 800b2cc:	d002      	beq.n	800b2d4 <__sflush_r+0x8c>
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f7ff fbea 	bl	800aaa8 <_free_r>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2d8:	e00d      	b.n	800b2f6 <__sflush_r+0xae>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	4628      	mov	r0, r5
 800b2de:	47b0      	blx	r6
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	1c50      	adds	r0, r2, #1
 800b2e4:	d1c9      	bne.n	800b27a <__sflush_r+0x32>
 800b2e6:	682b      	ldr	r3, [r5, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0c6      	beq.n	800b27a <__sflush_r+0x32>
 800b2ec:	2b1d      	cmp	r3, #29
 800b2ee:	d001      	beq.n	800b2f4 <__sflush_r+0xac>
 800b2f0:	2b16      	cmp	r3, #22
 800b2f2:	d11e      	bne.n	800b332 <__sflush_r+0xea>
 800b2f4:	602f      	str	r7, [r5, #0]
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	e022      	b.n	800b340 <__sflush_r+0xf8>
 800b2fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2fe:	b21b      	sxth	r3, r3
 800b300:	e01b      	b.n	800b33a <__sflush_r+0xf2>
 800b302:	690f      	ldr	r7, [r1, #16]
 800b304:	2f00      	cmp	r7, #0
 800b306:	d0f6      	beq.n	800b2f6 <__sflush_r+0xae>
 800b308:	0793      	lsls	r3, r2, #30
 800b30a:	680e      	ldr	r6, [r1, #0]
 800b30c:	bf08      	it	eq
 800b30e:	694b      	ldreq	r3, [r1, #20]
 800b310:	600f      	str	r7, [r1, #0]
 800b312:	bf18      	it	ne
 800b314:	2300      	movne	r3, #0
 800b316:	eba6 0807 	sub.w	r8, r6, r7
 800b31a:	608b      	str	r3, [r1, #8]
 800b31c:	f1b8 0f00 	cmp.w	r8, #0
 800b320:	dde9      	ble.n	800b2f6 <__sflush_r+0xae>
 800b322:	6a21      	ldr	r1, [r4, #32]
 800b324:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b326:	4643      	mov	r3, r8
 800b328:	463a      	mov	r2, r7
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b0      	blx	r6
 800b32e:	2800      	cmp	r0, #0
 800b330:	dc08      	bgt.n	800b344 <__sflush_r+0xfc>
 800b332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b33a:	81a3      	strh	r3, [r4, #12]
 800b33c:	f04f 30ff 	mov.w	r0, #4294967295
 800b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b344:	4407      	add	r7, r0
 800b346:	eba8 0800 	sub.w	r8, r8, r0
 800b34a:	e7e7      	b.n	800b31c <__sflush_r+0xd4>
 800b34c:	dfbffffe 	.word	0xdfbffffe

0800b350 <_fflush_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	690b      	ldr	r3, [r1, #16]
 800b354:	4605      	mov	r5, r0
 800b356:	460c      	mov	r4, r1
 800b358:	b913      	cbnz	r3, 800b360 <_fflush_r+0x10>
 800b35a:	2500      	movs	r5, #0
 800b35c:	4628      	mov	r0, r5
 800b35e:	bd38      	pop	{r3, r4, r5, pc}
 800b360:	b118      	cbz	r0, 800b36a <_fflush_r+0x1a>
 800b362:	6a03      	ldr	r3, [r0, #32]
 800b364:	b90b      	cbnz	r3, 800b36a <_fflush_r+0x1a>
 800b366:	f7ff f8e3 	bl	800a530 <__sinit>
 800b36a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d0f3      	beq.n	800b35a <_fflush_r+0xa>
 800b372:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b374:	07d0      	lsls	r0, r2, #31
 800b376:	d404      	bmi.n	800b382 <_fflush_r+0x32>
 800b378:	0599      	lsls	r1, r3, #22
 800b37a:	d402      	bmi.n	800b382 <_fflush_r+0x32>
 800b37c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b37e:	f7ff fb82 	bl	800aa86 <__retarget_lock_acquire_recursive>
 800b382:	4628      	mov	r0, r5
 800b384:	4621      	mov	r1, r4
 800b386:	f7ff ff5f 	bl	800b248 <__sflush_r>
 800b38a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b38c:	07da      	lsls	r2, r3, #31
 800b38e:	4605      	mov	r5, r0
 800b390:	d4e4      	bmi.n	800b35c <_fflush_r+0xc>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	059b      	lsls	r3, r3, #22
 800b396:	d4e1      	bmi.n	800b35c <_fflush_r+0xc>
 800b398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b39a:	f7ff fb75 	bl	800aa88 <__retarget_lock_release_recursive>
 800b39e:	e7dd      	b.n	800b35c <_fflush_r+0xc>

0800b3a0 <__swhatbuf_r>:
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a8:	2900      	cmp	r1, #0
 800b3aa:	b096      	sub	sp, #88	@ 0x58
 800b3ac:	4615      	mov	r5, r2
 800b3ae:	461e      	mov	r6, r3
 800b3b0:	da0d      	bge.n	800b3ce <__swhatbuf_r+0x2e>
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b3b8:	f04f 0100 	mov.w	r1, #0
 800b3bc:	bf14      	ite	ne
 800b3be:	2340      	movne	r3, #64	@ 0x40
 800b3c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	6031      	str	r1, [r6, #0]
 800b3c8:	602b      	str	r3, [r5, #0]
 800b3ca:	b016      	add	sp, #88	@ 0x58
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
 800b3ce:	466a      	mov	r2, sp
 800b3d0:	f000 f848 	bl	800b464 <_fstat_r>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	dbec      	blt.n	800b3b2 <__swhatbuf_r+0x12>
 800b3d8:	9901      	ldr	r1, [sp, #4]
 800b3da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3e2:	4259      	negs	r1, r3
 800b3e4:	4159      	adcs	r1, r3
 800b3e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3ea:	e7eb      	b.n	800b3c4 <__swhatbuf_r+0x24>

0800b3ec <__smakebuf_r>:
 800b3ec:	898b      	ldrh	r3, [r1, #12]
 800b3ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3f0:	079d      	lsls	r5, r3, #30
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	d507      	bpl.n	800b408 <__smakebuf_r+0x1c>
 800b3f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	6123      	str	r3, [r4, #16]
 800b400:	2301      	movs	r3, #1
 800b402:	6163      	str	r3, [r4, #20]
 800b404:	b003      	add	sp, #12
 800b406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b408:	ab01      	add	r3, sp, #4
 800b40a:	466a      	mov	r2, sp
 800b40c:	f7ff ffc8 	bl	800b3a0 <__swhatbuf_r>
 800b410:	9f00      	ldr	r7, [sp, #0]
 800b412:	4605      	mov	r5, r0
 800b414:	4639      	mov	r1, r7
 800b416:	4630      	mov	r0, r6
 800b418:	f7ff fbba 	bl	800ab90 <_malloc_r>
 800b41c:	b948      	cbnz	r0, 800b432 <__smakebuf_r+0x46>
 800b41e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b422:	059a      	lsls	r2, r3, #22
 800b424:	d4ee      	bmi.n	800b404 <__smakebuf_r+0x18>
 800b426:	f023 0303 	bic.w	r3, r3, #3
 800b42a:	f043 0302 	orr.w	r3, r3, #2
 800b42e:	81a3      	strh	r3, [r4, #12]
 800b430:	e7e2      	b.n	800b3f8 <__smakebuf_r+0xc>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	6020      	str	r0, [r4, #0]
 800b436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b43a:	81a3      	strh	r3, [r4, #12]
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b442:	b15b      	cbz	r3, 800b45c <__smakebuf_r+0x70>
 800b444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b448:	4630      	mov	r0, r6
 800b44a:	f000 f81d 	bl	800b488 <_isatty_r>
 800b44e:	b128      	cbz	r0, 800b45c <__smakebuf_r+0x70>
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	f023 0303 	bic.w	r3, r3, #3
 800b456:	f043 0301 	orr.w	r3, r3, #1
 800b45a:	81a3      	strh	r3, [r4, #12]
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	431d      	orrs	r5, r3
 800b460:	81a5      	strh	r5, [r4, #12]
 800b462:	e7cf      	b.n	800b404 <__smakebuf_r+0x18>

0800b464 <_fstat_r>:
 800b464:	b538      	push	{r3, r4, r5, lr}
 800b466:	4d07      	ldr	r5, [pc, #28]	@ (800b484 <_fstat_r+0x20>)
 800b468:	2300      	movs	r3, #0
 800b46a:	4604      	mov	r4, r0
 800b46c:	4608      	mov	r0, r1
 800b46e:	4611      	mov	r1, r2
 800b470:	602b      	str	r3, [r5, #0]
 800b472:	f7f6 fc99 	bl	8001da8 <_fstat>
 800b476:	1c43      	adds	r3, r0, #1
 800b478:	d102      	bne.n	800b480 <_fstat_r+0x1c>
 800b47a:	682b      	ldr	r3, [r5, #0]
 800b47c:	b103      	cbz	r3, 800b480 <_fstat_r+0x1c>
 800b47e:	6023      	str	r3, [r4, #0]
 800b480:	bd38      	pop	{r3, r4, r5, pc}
 800b482:	bf00      	nop
 800b484:	20004c84 	.word	0x20004c84

0800b488 <_isatty_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d06      	ldr	r5, [pc, #24]	@ (800b4a4 <_isatty_r+0x1c>)
 800b48c:	2300      	movs	r3, #0
 800b48e:	4604      	mov	r4, r0
 800b490:	4608      	mov	r0, r1
 800b492:	602b      	str	r3, [r5, #0]
 800b494:	f7f6 fbf6 	bl	8001c84 <_isatty>
 800b498:	1c43      	adds	r3, r0, #1
 800b49a:	d102      	bne.n	800b4a2 <_isatty_r+0x1a>
 800b49c:	682b      	ldr	r3, [r5, #0]
 800b49e:	b103      	cbz	r3, 800b4a2 <_isatty_r+0x1a>
 800b4a0:	6023      	str	r3, [r4, #0]
 800b4a2:	bd38      	pop	{r3, r4, r5, pc}
 800b4a4:	20004c84 	.word	0x20004c84

0800b4a8 <_sbrk_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4d06      	ldr	r5, [pc, #24]	@ (800b4c4 <_sbrk_r+0x1c>)
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	602b      	str	r3, [r5, #0]
 800b4b4:	f7f7 ff2c 	bl	8003310 <_sbrk>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_sbrk_r+0x1a>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_sbrk_r+0x1a>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	20004c84 	.word	0x20004c84

0800b4c8 <_init>:
 800b4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ca:	bf00      	nop
 800b4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ce:	bc08      	pop	{r3}
 800b4d0:	469e      	mov	lr, r3
 800b4d2:	4770      	bx	lr

0800b4d4 <_fini>:
 800b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d6:	bf00      	nop
 800b4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4da:	bc08      	pop	{r3}
 800b4dc:	469e      	mov	lr, r3
 800b4de:	4770      	bx	lr
